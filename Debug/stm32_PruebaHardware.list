
stm32_PruebaHardware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a3c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08005b50  08005b50  00015b50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e00  08005e00  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08005e00  08005e00  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e00  08005e00  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e00  08005e00  00015e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e04  08005e04  00015e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08005e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  200001ec  08005ff4  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08005ff4  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aba7  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001825  00000000  00000000  0002adbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b88  00000000  00000000  0002c5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af0  00000000  00000000  0002d170  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000179da  00000000  00000000  0002dc60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008876  00000000  00000000  0004563a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a906  00000000  00000000  0004deb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d87b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003af0  00000000  00000000  000d8834  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08005b34 	.word	0x08005b34

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08005b34 	.word	0x08005b34

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe8:	f000 fcac 	bl	8001944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fec:	f000 f82a 	bl	8001044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff0:	f000 f988 	bl	8001304 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000ff4:	f000 f86c 	bl	80010d0 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000ff8:	f000 f95a 	bl	80012b0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000ffc:	f000 f90a 	bl	8001214 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Inicio las 4 PWM
 8001000:	2100      	movs	r1, #0
 8001002:	480c      	ldr	r0, [pc, #48]	; (8001034 <main+0x50>)
 8001004:	f001 fcc8 	bl	8002998 <HAL_TIM_PWM_Start>
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);

	HAL_TIM_Base_Start_IT(&htim2);
 8001008:	480b      	ldr	r0, [pc, #44]	; (8001038 <main+0x54>)
 800100a:	f001 fc1b 	bl	8002844 <HAL_TIM_Base_Start_IT>

	// Doy direccion de giro a los motores:
	HAL_GPIO_WritePin(PWM11_GPIO_Port, PWM11_Pin, GPIO_PIN_SET);
 800100e:	2201      	movs	r2, #1
 8001010:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001014:	4809      	ldr	r0, [pc, #36]	; (800103c <main+0x58>)
 8001016:	f000 ff5f 	bl	8001ed8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PWM12_GPIO_Port, PWM12_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001020:	4806      	ldr	r0, [pc, #24]	; (800103c <main+0x58>)
 8001022:	f000 ff59 	bl	8001ed8 <HAL_GPIO_WritePin>
//		timer2 = __HAL_TIM_GET_COUNTER(&htim2);
//		sprintf(buf,"Registro timer2: %d\n",timer2);
//		HAL_UART_Transmit(&huart3, (uint8_t *)buf, sizeof(buf), 100);


		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001026:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <main+0x5c>)
 800102c:	f000 ff6c 	bl	8001f08 <HAL_GPIO_TogglePin>
 8001030:	e7f9      	b.n	8001026 <main+0x42>
 8001032:	bf00      	nop
 8001034:	20000268 	.word	0x20000268
 8001038:	200002f0 	.word	0x200002f0
 800103c:	40010c00 	.word	0x40010c00
 8001040:	40011000 	.word	0x40011000

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b090      	sub	sp, #64	; 0x40
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 0318 	add.w	r3, r7, #24
 800104e:	2228      	movs	r2, #40	; 0x28
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f002 fd2a 	bl	8003aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001066:	2301      	movs	r3, #1
 8001068:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800106a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800106e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001074:	2301      	movs	r3, #1
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001078:	2302      	movs	r3, #2
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800107c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001080:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001082:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001086:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001088:	f107 0318 	add.w	r3, r7, #24
 800108c:	4618      	mov	r0, r3
 800108e:	f000 ff6d 	bl	8001f6c <HAL_RCC_OscConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001098:	f000 facc 	bl	8001634 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109c:	230f      	movs	r3, #15
 800109e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a0:	2302      	movs	r3, #2
 80010a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2102      	movs	r1, #2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 f9d8 	bl	800246c <HAL_RCC_ClockConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010c2:	f000 fab7 	bl	8001634 <Error_Handler>
  }
}
 80010c6:	bf00      	nop
 80010c8:	3740      	adds	r7, #64	; 0x40
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b096      	sub	sp, #88	; 0x58
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]
 80010fe:	615a      	str	r2, [r3, #20]
 8001100:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2220      	movs	r2, #32
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f002 fccf 	bl	8003aac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800110e:	4b3f      	ldr	r3, [pc, #252]	; (800120c <MX_TIM1_Init+0x13c>)
 8001110:	4a3f      	ldr	r2, [pc, #252]	; (8001210 <MX_TIM1_Init+0x140>)
 8001112:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001114:	4b3d      	ldr	r3, [pc, #244]	; (800120c <MX_TIM1_Init+0x13c>)
 8001116:	2247      	movs	r2, #71	; 0x47
 8001118:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111a:	4b3c      	ldr	r3, [pc, #240]	; (800120c <MX_TIM1_Init+0x13c>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8001120:	4b3a      	ldr	r3, [pc, #232]	; (800120c <MX_TIM1_Init+0x13c>)
 8001122:	f242 7210 	movw	r2, #10000	; 0x2710
 8001126:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001128:	4b38      	ldr	r3, [pc, #224]	; (800120c <MX_TIM1_Init+0x13c>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800112e:	4b37      	ldr	r3, [pc, #220]	; (800120c <MX_TIM1_Init+0x13c>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001134:	4b35      	ldr	r3, [pc, #212]	; (800120c <MX_TIM1_Init+0x13c>)
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800113a:	4834      	ldr	r0, [pc, #208]	; (800120c <MX_TIM1_Init+0x13c>)
 800113c:	f001 fb32 	bl	80027a4 <HAL_TIM_Base_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001146:	f000 fa75 	bl	8001634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001150:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001154:	4619      	mov	r1, r3
 8001156:	482d      	ldr	r0, [pc, #180]	; (800120c <MX_TIM1_Init+0x13c>)
 8001158:	f001 fe86 	bl	8002e68 <HAL_TIM_ConfigClockSource>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001162:	f000 fa67 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001166:	4829      	ldr	r0, [pc, #164]	; (800120c <MX_TIM1_Init+0x13c>)
 8001168:	f001 fbbe 	bl	80028e8 <HAL_TIM_PWM_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001172:	f000 fa5f 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800117e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001182:	4619      	mov	r1, r3
 8001184:	4821      	ldr	r0, [pc, #132]	; (800120c <MX_TIM1_Init+0x13c>)
 8001186:	f002 f9ef 	bl	8003568 <HAL_TIMEx_MasterConfigSynchronization>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001190:	f000 fa50 	bl	8001634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001194:	2360      	movs	r3, #96	; 0x60
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2000;
 8001198:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800119e:	2300      	movs	r3, #0
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011a2:	2300      	movs	r3, #0
 80011a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b6:	2200      	movs	r2, #0
 80011b8:	4619      	mov	r1, r3
 80011ba:	4814      	ldr	r0, [pc, #80]	; (800120c <MX_TIM1_Init+0x13c>)
 80011bc:	f001 fd96 	bl	8002cec <HAL_TIM_PWM_ConfigChannel>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80011c6:	f000 fa35 	bl	8001634 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	4619      	mov	r1, r3
 80011ec:	4807      	ldr	r0, [pc, #28]	; (800120c <MX_TIM1_Init+0x13c>)
 80011ee:	f002 fa19 	bl	8003624 <HAL_TIMEx_ConfigBreakDeadTime>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80011f8:	f000 fa1c 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011fc:	4803      	ldr	r0, [pc, #12]	; (800120c <MX_TIM1_Init+0x13c>)
 80011fe:	f000 fa87 	bl	8001710 <HAL_TIM_MspPostInit>

}
 8001202:	bf00      	nop
 8001204:	3758      	adds	r7, #88	; 0x58
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000268 	.word	0x20000268
 8001210:	40012c00 	.word	0x40012c00

08001214 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001228:	463b      	mov	r3, r7
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001230:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <MX_TIM2_Init+0x98>)
 8001232:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001236:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MX_TIM2_Init+0x98>)
 800123a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800123e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_TIM2_Init+0x98>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 25000;
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <MX_TIM2_Init+0x98>)
 8001248:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800124c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_TIM2_Init+0x98>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_TIM2_Init+0x98>)
 8001256:	2280      	movs	r2, #128	; 0x80
 8001258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800125a:	4814      	ldr	r0, [pc, #80]	; (80012ac <MX_TIM2_Init+0x98>)
 800125c:	f001 faa2 	bl	80027a4 <HAL_TIM_Base_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001266:	f000 f9e5 	bl	8001634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001270:	f107 0308 	add.w	r3, r7, #8
 8001274:	4619      	mov	r1, r3
 8001276:	480d      	ldr	r0, [pc, #52]	; (80012ac <MX_TIM2_Init+0x98>)
 8001278:	f001 fdf6 	bl	8002e68 <HAL_TIM_ConfigClockSource>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001282:	f000 f9d7 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800128e:	463b      	mov	r3, r7
 8001290:	4619      	mov	r1, r3
 8001292:	4806      	ldr	r0, [pc, #24]	; (80012ac <MX_TIM2_Init+0x98>)
 8001294:	f002 f968 	bl	8003568 <HAL_TIMEx_MasterConfigSynchronization>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800129e:	f000 f9c9 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200002f0 	.word	0x200002f0

080012b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_USART3_UART_Init+0x4c>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	; (8001300 <MX_USART3_UART_Init+0x50>)
 80012b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <MX_USART3_UART_Init+0x4c>)
 80012bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_USART3_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_USART3_UART_Init+0x4c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <MX_USART3_UART_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_USART3_UART_Init+0x4c>)
 80012d6:	220c      	movs	r2, #12
 80012d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <MX_USART3_UART_Init+0x4c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_USART3_UART_Init+0x4c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_USART3_UART_Init+0x4c>)
 80012e8:	f002 f9ff 	bl	80036ea <HAL_UART_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80012f2:	f000 f99f 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000224 	.word	0x20000224
 8001300:	40004800 	.word	0x40004800

08001304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001318:	4b38      	ldr	r3, [pc, #224]	; (80013fc <MX_GPIO_Init+0xf8>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a37      	ldr	r2, [pc, #220]	; (80013fc <MX_GPIO_Init+0xf8>)
 800131e:	f043 0310 	orr.w	r3, r3, #16
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b35      	ldr	r3, [pc, #212]	; (80013fc <MX_GPIO_Init+0xf8>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0310 	and.w	r3, r3, #16
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001330:	4b32      	ldr	r3, [pc, #200]	; (80013fc <MX_GPIO_Init+0xf8>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a31      	ldr	r2, [pc, #196]	; (80013fc <MX_GPIO_Init+0xf8>)
 8001336:	f043 0320 	orr.w	r3, r3, #32
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <MX_GPIO_Init+0xf8>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0320 	and.w	r3, r3, #32
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001348:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <MX_GPIO_Init+0xf8>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a2b      	ldr	r2, [pc, #172]	; (80013fc <MX_GPIO_Init+0xf8>)
 800134e:	f043 0308 	orr.w	r3, r3, #8
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b29      	ldr	r3, [pc, #164]	; (80013fc <MX_GPIO_Init+0xf8>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	4b26      	ldr	r3, [pc, #152]	; (80013fc <MX_GPIO_Init+0xf8>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a25      	ldr	r2, [pc, #148]	; (80013fc <MX_GPIO_Init+0xf8>)
 8001366:	f043 0304 	orr.w	r3, r3, #4
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b23      	ldr	r3, [pc, #140]	; (80013fc <MX_GPIO_Init+0xf8>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	603b      	str	r3, [r7, #0]
 8001376:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137e:	4820      	ldr	r0, [pc, #128]	; (8001400 <MX_GPIO_Init+0xfc>)
 8001380:	f000 fdaa 	bl	8001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWM12_Pin|PWM11_Pin, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800138a:	481e      	ldr	r0, [pc, #120]	; (8001404 <MX_GPIO_Init+0x100>)
 800138c:	f000 fda4 	bl	8001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	2301      	movs	r3, #1
 8001398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2302      	movs	r3, #2
 80013a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 0310 	add.w	r3, r7, #16
 80013a6:	4619      	mov	r1, r3
 80013a8:	4815      	ldr	r0, [pc, #84]	; (8001400 <MX_GPIO_Init+0xfc>)
 80013aa:	f000 fc3b 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM12_Pin PWM11_Pin */
  GPIO_InitStruct.Pin = PWM12_Pin|PWM11_Pin;
 80013ae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80013b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2302      	movs	r3, #2
 80013be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	4619      	mov	r1, r3
 80013c6:	480f      	ldr	r0, [pc, #60]	; (8001404 <MX_GPIO_Init+0x100>)
 80013c8:	f000 fc2c 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : D01_Pin */
  GPIO_InitStruct.Pin = D01_Pin;
 80013cc:	2340      	movs	r3, #64	; 0x40
 80013ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013d0:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <MX_GPIO_Init+0x104>)
 80013d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D01_GPIO_Port, &GPIO_InitStruct);
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	4619      	mov	r1, r3
 80013de:	4809      	ldr	r0, [pc, #36]	; (8001404 <MX_GPIO_Init+0x100>)
 80013e0:	f000 fc20 	bl	8001c24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	2017      	movs	r0, #23
 80013ea:	f000 fbe4 	bl	8001bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013ee:	2017      	movs	r0, #23
 80013f0:	f000 fbfd 	bl	8001bee <HAL_NVIC_EnableIRQ>

}
 80013f4:	bf00      	nop
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40021000 	.word	0x40021000
 8001400:	40011000 	.word	0x40011000
 8001404:	40010c00 	.word	0x40010c00
 8001408:	10110000 	.word	0x10110000

0800140c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 800140c:	b5b0      	push	{r4, r5, r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af02      	add	r7, sp, #8
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == D01_Pin){
 8001416:	88fb      	ldrh	r3, [r7, #6]
 8001418:	2b40      	cmp	r3, #64	; 0x40
 800141a:	f040 809c 	bne.w	8001556 <HAL_GPIO_EXTI_Callback+0x14a>
		pulsoprev = pulsoact;
 800141e:	4b50      	ldr	r3, [pc, #320]	; (8001560 <HAL_GPIO_EXTI_Callback+0x154>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a50      	ldr	r2, [pc, #320]	; (8001564 <HAL_GPIO_EXTI_Callback+0x158>)
 8001424:	6013      	str	r3, [r2, #0]
		pulsoact = __HAL_TIM_GET_COUNTER(&htim2);
 8001426:	4b50      	ldr	r3, [pc, #320]	; (8001568 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	461a      	mov	r2, r3
 800142e:	4b4c      	ldr	r3, [pc, #304]	; (8001560 <HAL_GPIO_EXTI_Callback+0x154>)
 8001430:	601a      	str	r2, [r3, #0]

		if (pulsoprev > pulsoact){
 8001432:	4b4c      	ldr	r3, [pc, #304]	; (8001564 <HAL_GPIO_EXTI_Callback+0x158>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4b4a      	ldr	r3, [pc, #296]	; (8001560 <HAL_GPIO_EXTI_Callback+0x154>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	dd0a      	ble.n	8001454 <HAL_GPIO_EXTI_Callback+0x48>

			ms = 25000 - pulsoprev + pulsoact;
 800143e:	4b49      	ldr	r3, [pc, #292]	; (8001564 <HAL_GPIO_EXTI_Callback+0x158>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f5c3 43c3 	rsb	r3, r3, #24960	; 0x6180
 8001446:	3328      	adds	r3, #40	; 0x28
 8001448:	4a45      	ldr	r2, [pc, #276]	; (8001560 <HAL_GPIO_EXTI_Callback+0x154>)
 800144a:	6812      	ldr	r2, [r2, #0]
 800144c:	4413      	add	r3, r2
 800144e:	4a47      	ldr	r2, [pc, #284]	; (800156c <HAL_GPIO_EXTI_Callback+0x160>)
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e006      	b.n	8001462 <HAL_GPIO_EXTI_Callback+0x56>

		}
		else {
			ms = pulsoact - pulsoprev;
 8001454:	4b42      	ldr	r3, [pc, #264]	; (8001560 <HAL_GPIO_EXTI_Callback+0x154>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b42      	ldr	r3, [pc, #264]	; (8001564 <HAL_GPIO_EXTI_Callback+0x158>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	4a43      	ldr	r2, [pc, #268]	; (800156c <HAL_GPIO_EXTI_Callback+0x160>)
 8001460:	6013      	str	r3, [r2, #0]
		}
		float Fs = 100000.0;
 8001462:	4b43      	ldr	r3, [pc, #268]	; (8001570 <HAL_GPIO_EXTI_Callback+0x164>)
 8001464:	60fb      	str	r3, [r7, #12]

//		w1 = 100000 / ((float)ms*30.0);
		w1 = (2.0*pi*Fs)/((float)ms*(float)30.0); // En rad/seg
 8001466:	4b43      	ldr	r3, [pc, #268]	; (8001574 <HAL_GPIO_EXTI_Callback+0x168>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7fe ffdc 	bl	8000428 <__aeabi_f2d>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	f7fe fe7a 	bl	800016c <__adddf3>
 8001478:	4603      	mov	r3, r0
 800147a:	460c      	mov	r4, r1
 800147c:	4625      	mov	r5, r4
 800147e:	461c      	mov	r4, r3
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f7fe ffd1 	bl	8000428 <__aeabi_f2d>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4620      	mov	r0, r4
 800148c:	4629      	mov	r1, r5
 800148e:	f7ff f823 	bl	80004d8 <__aeabi_dmul>
 8001492:	4603      	mov	r3, r0
 8001494:	460c      	mov	r4, r1
 8001496:	4625      	mov	r5, r4
 8001498:	461c      	mov	r4, r3
 800149a:	4b34      	ldr	r3, [pc, #208]	; (800156c <HAL_GPIO_EXTI_Callback+0x160>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fbfc 	bl	8000c9c <__aeabi_i2f>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4934      	ldr	r1, [pc, #208]	; (8001578 <HAL_GPIO_EXTI_Callback+0x16c>)
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fc4b 	bl	8000d44 <__aeabi_fmul>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe ffb9 	bl	8000428 <__aeabi_f2d>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4620      	mov	r0, r4
 80014bc:	4629      	mov	r1, r5
 80014be:	f7ff f935 	bl	800072c <__aeabi_ddiv>
 80014c2:	4603      	mov	r3, r0
 80014c4:	460c      	mov	r4, r1
 80014c6:	4618      	mov	r0, r3
 80014c8:	4621      	mov	r1, r4
 80014ca:	f7ff fadd 	bl	8000a88 <__aeabi_d2f>
 80014ce:	4602      	mov	r2, r0
 80014d0:	4b2a      	ldr	r3, [pc, #168]	; (800157c <HAL_GPIO_EXTI_Callback+0x170>)
 80014d2:	601a      	str	r2, [r3, #0]
		w1 = w1*60.0/(2.0*pi); // rad/seg = rad/seg * 60seg/1min * 1rev/2pirad
 80014d4:	4b29      	ldr	r3, [pc, #164]	; (800157c <HAL_GPIO_EXTI_Callback+0x170>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe ffa5 	bl	8000428 <__aeabi_f2d>
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	4b27      	ldr	r3, [pc, #156]	; (8001580 <HAL_GPIO_EXTI_Callback+0x174>)
 80014e4:	f7fe fff8 	bl	80004d8 <__aeabi_dmul>
 80014e8:	4603      	mov	r3, r0
 80014ea:	460c      	mov	r4, r1
 80014ec:	4625      	mov	r5, r4
 80014ee:	461c      	mov	r4, r3
 80014f0:	4b20      	ldr	r3, [pc, #128]	; (8001574 <HAL_GPIO_EXTI_Callback+0x168>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7fe ff97 	bl	8000428 <__aeabi_f2d>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	f7fe fe35 	bl	800016c <__adddf3>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4620      	mov	r0, r4
 8001508:	4629      	mov	r1, r5
 800150a:	f7ff f90f 	bl	800072c <__aeabi_ddiv>
 800150e:	4603      	mov	r3, r0
 8001510:	460c      	mov	r4, r1
 8001512:	4618      	mov	r0, r3
 8001514:	4621      	mov	r1, r4
 8001516:	f7ff fab7 	bl	8000a88 <__aeabi_d2f>
 800151a:	4602      	mov	r2, r0
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_GPIO_EXTI_Callback+0x170>)
 800151e:	601a      	str	r2, [r3, #0]

		sprintf(buf,"Rps w1: %.2f ms: %d\n",w1,ms);
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_GPIO_EXTI_Callback+0x170>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ff7f 	bl	8000428 <__aeabi_f2d>
 800152a:	460a      	mov	r2, r1
 800152c:	4601      	mov	r1, r0
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_GPIO_EXTI_Callback+0x160>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	4613      	mov	r3, r2
 8001536:	460a      	mov	r2, r1
 8001538:	4912      	ldr	r1, [pc, #72]	; (8001584 <HAL_GPIO_EXTI_Callback+0x178>)
 800153a:	4813      	ldr	r0, [pc, #76]	; (8001588 <HAL_GPIO_EXTI_Callback+0x17c>)
 800153c:	f002 ff0e 	bl	800435c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)buf, sizeof(buf), 100);
 8001540:	2364      	movs	r3, #100	; 0x64
 8001542:	2240      	movs	r2, #64	; 0x40
 8001544:	4910      	ldr	r1, [pc, #64]	; (8001588 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001546:	4811      	ldr	r0, [pc, #68]	; (800158c <HAL_GPIO_EXTI_Callback+0x180>)
 8001548:	f002 f91c 	bl	8003784 <HAL_UART_Transmit>




		encoder = encoder + 1;
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_GPIO_EXTI_Callback+0x184>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <HAL_GPIO_EXTI_Callback+0x184>)
 8001554:	6013      	str	r3, [r2, #0]
	}
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bdb0      	pop	{r4, r5, r7, pc}
 800155e:	bf00      	nop
 8001560:	20000004 	.word	0x20000004
 8001564:	20000208 	.word	0x20000208
 8001568:	200002f0 	.word	0x200002f0
 800156c:	20000000 	.word	0x20000000
 8001570:	47c35000 	.word	0x47c35000
 8001574:	20000008 	.word	0x20000008
 8001578:	41f00000 	.word	0x41f00000
 800157c:	2000020c 	.word	0x2000020c
 8001580:	404e0000 	.word	0x404e0000
 8001584:	08005b50 	.word	0x08005b50
 8001588:	200002b0 	.word	0x200002b0
 800158c:	20000224 	.word	0x20000224
 8001590:	20000210 	.word	0x20000210

08001594 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001594:	b5b0      	push	{r4, r5, r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

	if (htim==&htim2){
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a1e      	ldr	r2, [pc, #120]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d135      	bne.n	8001610 <HAL_TIM_PeriodElapsedCallback+0x7c>
		// periodo es 0,25 seg

		W = (encoder/30.0)/(float)Fss; // (Cantidad de revoluciones)/(Segundos)
 80015a4:	4b1d      	ldr	r3, [pc, #116]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe ff2b 	bl	8000404 <__aeabi_i2d>
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80015b4:	f7ff f8ba 	bl	800072c <__aeabi_ddiv>
 80015b8:	4603      	mov	r3, r0
 80015ba:	460c      	mov	r4, r1
 80015bc:	4625      	mov	r5, r4
 80015be:	461c      	mov	r4, r3
 80015c0:	4b18      	ldr	r3, [pc, #96]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fb69 	bl	8000c9c <__aeabi_i2f>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ff2b 	bl	8000428 <__aeabi_f2d>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4620      	mov	r0, r4
 80015d8:	4629      	mov	r1, r5
 80015da:	f7ff f8a7 	bl	800072c <__aeabi_ddiv>
 80015de:	4603      	mov	r3, r0
 80015e0:	460c      	mov	r4, r1
 80015e2:	4618      	mov	r0, r3
 80015e4:	4621      	mov	r1, r4
 80015e6:	f7ff fa4f 	bl	8000a88 <__aeabi_d2f>
 80015ea:	4602      	mov	r2, r0
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80015ee:	601a      	str	r2, [r3, #0]

		sprintf(buf,"Rps: %.2f \n",W);
 80015f0:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ff17 	bl	8000428 <__aeabi_f2d>
 80015fa:	4603      	mov	r3, r0
 80015fc:	460c      	mov	r4, r1
 80015fe:	461a      	mov	r2, r3
 8001600:	4623      	mov	r3, r4
 8001602:	490a      	ldr	r1, [pc, #40]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001604:	480a      	ldr	r0, [pc, #40]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001606:	f002 fea9 	bl	800435c <siprintf>
//		HAL_UART_Transmit(&huart3, (uint8_t *)buf, sizeof(buf), 100);

		encoder = 0;
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
	}
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bdb0      	pop	{r4, r5, r7, pc}
 8001618:	200002f0 	.word	0x200002f0
 800161c:	20000210 	.word	0x20000210
 8001620:	403e0000 	.word	0x403e0000
 8001624:	2000000c 	.word	0x2000000c
 8001628:	20000214 	.word	0x20000214
 800162c:	08005b68 	.word	0x08005b68
 8001630:	200002b0 	.word	0x200002b0

08001634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001638:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800163a:	e7fe      	b.n	800163a <Error_Handler+0x6>

0800163c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_MspInit+0x5c>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	4a14      	ldr	r2, [pc, #80]	; (8001698 <HAL_MspInit+0x5c>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6193      	str	r3, [r2, #24]
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_MspInit+0x5c>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_MspInit+0x5c>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <HAL_MspInit+0x5c>)
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001664:	61d3      	str	r3, [r2, #28]
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_MspInit+0x5c>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_MspInit+0x60>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_MspInit+0x60>)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	40021000 	.word	0x40021000
 800169c:	40010000 	.word	0x40010000

080016a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a16      	ldr	r2, [pc, #88]	; (8001708 <HAL_TIM_Base_MspInit+0x68>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d10c      	bne.n	80016cc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016b2:	4b16      	ldr	r3, [pc, #88]	; (800170c <HAL_TIM_Base_MspInit+0x6c>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	4a15      	ldr	r2, [pc, #84]	; (800170c <HAL_TIM_Base_MspInit+0x6c>)
 80016b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016bc:	6193      	str	r3, [r2, #24]
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <HAL_TIM_Base_MspInit+0x6c>)
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016ca:	e018      	b.n	80016fe <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d4:	d113      	bne.n	80016fe <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <HAL_TIM_Base_MspInit+0x6c>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	4a0c      	ldr	r2, [pc, #48]	; (800170c <HAL_TIM_Base_MspInit+0x6c>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	61d3      	str	r3, [r2, #28]
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_TIM_Base_MspInit+0x6c>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	201c      	movs	r0, #28
 80016f4:	f000 fa5f 	bl	8001bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016f8:	201c      	movs	r0, #28
 80016fa:	f000 fa78 	bl	8001bee <HAL_NVIC_EnableIRQ>
}
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40012c00 	.word	0x40012c00
 800170c:	40021000 	.word	0x40021000

08001710 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a10      	ldr	r2, [pc, #64]	; (800176c <HAL_TIM_MspPostInit+0x5c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d118      	bne.n	8001762 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <HAL_TIM_MspPostInit+0x60>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <HAL_TIM_MspPostInit+0x60>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_TIM_MspPostInit+0x60>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800174c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	f107 0310 	add.w	r3, r7, #16
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	; (8001774 <HAL_TIM_MspPostInit+0x64>)
 800175e:	f000 fa61 	bl	8001c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001762:	bf00      	nop
 8001764:	3720      	adds	r7, #32
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40012c00 	.word	0x40012c00
 8001770:	40021000 	.word	0x40021000
 8001774:	40010800 	.word	0x40010800

08001778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a1c      	ldr	r2, [pc, #112]	; (8001804 <HAL_UART_MspInit+0x8c>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d131      	bne.n	80017fc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <HAL_UART_MspInit+0x90>)
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	4a1a      	ldr	r2, [pc, #104]	; (8001808 <HAL_UART_MspInit+0x90>)
 800179e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a2:	61d3      	str	r3, [r2, #28]
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <HAL_UART_MspInit+0x90>)
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b0:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_UART_MspInit+0x90>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a14      	ldr	r2, [pc, #80]	; (8001808 <HAL_UART_MspInit+0x90>)
 80017b6:	f043 0308 	orr.w	r3, r3, #8
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_UART_MspInit+0x90>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d2:	2303      	movs	r3, #3
 80017d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	f107 0310 	add.w	r3, r7, #16
 80017da:	4619      	mov	r1, r3
 80017dc:	480b      	ldr	r0, [pc, #44]	; (800180c <HAL_UART_MspInit+0x94>)
 80017de:	f000 fa21 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	4619      	mov	r1, r3
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <HAL_UART_MspInit+0x94>)
 80017f8:	f000 fa14 	bl	8001c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017fc:	bf00      	nop
 80017fe:	3720      	adds	r7, #32
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40004800 	.word	0x40004800
 8001808:	40021000 	.word	0x40021000
 800180c:	40010c00 	.word	0x40010c00

08001810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <NMI_Handler+0x4>

08001816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <HardFault_Handler+0x4>

0800181c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <MemManage_Handler+0x4>

08001822 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <UsageFault_Handler+0x4>

0800182e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001856:	f000 f8bb 	bl	80019d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}

0800185e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001862:	2040      	movs	r0, #64	; 0x40
 8001864:	f000 fb6a 	bl	8001f3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}

0800186c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <TIM2_IRQHandler+0x10>)
 8001872:	f001 f933 	bl	8002adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200002f0 	.word	0x200002f0

08001880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001888:	4a14      	ldr	r2, [pc, #80]	; (80018dc <_sbrk+0x5c>)
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <_sbrk+0x60>)
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001894:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <_sbrk+0x64>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d102      	bne.n	80018a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <_sbrk+0x64>)
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <_sbrk+0x68>)
 80018a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <_sbrk+0x64>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d207      	bcs.n	80018c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018b0:	f002 f8d2 	bl	8003a58 <__errno>
 80018b4:	4602      	mov	r2, r0
 80018b6:	230c      	movs	r3, #12
 80018b8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295
 80018be:	e009      	b.n	80018d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <_sbrk+0x64>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	4a05      	ldr	r2, [pc, #20]	; (80018e4 <_sbrk+0x64>)
 80018d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018d2:	68fb      	ldr	r3, [r7, #12]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20005000 	.word	0x20005000
 80018e0:	00000400 	.word	0x00000400
 80018e4:	20000218 	.word	0x20000218
 80018e8:	20000340 	.word	0x20000340

080018ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f8:	480c      	ldr	r0, [pc, #48]	; (800192c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018fa:	490d      	ldr	r1, [pc, #52]	; (8001930 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018fc:	4a0d      	ldr	r2, [pc, #52]	; (8001934 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001900:	e002      	b.n	8001908 <LoopCopyDataInit>

08001902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001906:	3304      	adds	r3, #4

08001908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800190c:	d3f9      	bcc.n	8001902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001910:	4c0a      	ldr	r4, [pc, #40]	; (800193c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001914:	e001      	b.n	800191a <LoopFillZerobss>

08001916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001918:	3204      	adds	r2, #4

0800191a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800191c:	d3fb      	bcc.n	8001916 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800191e:	f7ff ffe5 	bl	80018ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001922:	f002 f89f 	bl	8003a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001926:	f7ff fb5d 	bl	8000fe4 <main>
  bx lr
 800192a:	4770      	bx	lr
  ldr r0, =_sdata
 800192c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001930:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001934:	08005e08 	.word	0x08005e08
  ldr r2, =_sbss
 8001938:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800193c:	20000340 	.word	0x20000340

08001940 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001940:	e7fe      	b.n	8001940 <ADC1_2_IRQHandler>
	...

08001944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_Init+0x28>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a07      	ldr	r2, [pc, #28]	; (800196c <HAL_Init+0x28>)
 800194e:	f043 0310 	orr.w	r3, r3, #16
 8001952:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001954:	2003      	movs	r0, #3
 8001956:	f000 f923 	bl	8001ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800195a:	2000      	movs	r0, #0
 800195c:	f000 f808 	bl	8001970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001960:	f7ff fe6c 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40022000 	.word	0x40022000

08001970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_InitTick+0x54>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_InitTick+0x58>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001986:	fbb3 f3f1 	udiv	r3, r3, r1
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f000 f93b 	bl	8001c0a <HAL_SYSTICK_Config>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e00e      	b.n	80019bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d80a      	bhi.n	80019ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a4:	2200      	movs	r2, #0
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f000 f903 	bl	8001bb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b0:	4a06      	ldr	r2, [pc, #24]	; (80019cc <HAL_InitTick+0x5c>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e000      	b.n	80019bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000010 	.word	0x20000010
 80019c8:	20000018 	.word	0x20000018
 80019cc:	20000014 	.word	0x20000014

080019d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_IncTick+0x1c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_IncTick+0x20>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	4a03      	ldr	r2, [pc, #12]	; (80019f0 <HAL_IncTick+0x20>)
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	20000018 	.word	0x20000018
 80019f0:	20000338 	.word	0x20000338

080019f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return uwTick;
 80019f8:	4b02      	ldr	r3, [pc, #8]	; (8001a04 <HAL_GetTick+0x10>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	20000338 	.word	0x20000338

08001a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a24:	4013      	ands	r3, r2
 8001a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3a:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60d3      	str	r3, [r2, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <__NVIC_GetPriorityGrouping+0x18>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	f003 0307 	and.w	r3, r3, #7
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	db0b      	blt.n	8001a96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	f003 021f 	and.w	r2, r3, #31
 8001a84:	4906      	ldr	r1, [pc, #24]	; (8001aa0 <__NVIC_EnableIRQ+0x34>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	e000e100 	.word	0xe000e100

08001aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db0a      	blt.n	8001ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	490c      	ldr	r1, [pc, #48]	; (8001af0 <__NVIC_SetPriority+0x4c>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001acc:	e00a      	b.n	8001ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4908      	ldr	r1, [pc, #32]	; (8001af4 <__NVIC_SetPriority+0x50>)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	3b04      	subs	r3, #4
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	761a      	strb	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000e100 	.word	0xe000e100
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	; 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f1c3 0307 	rsb	r3, r3, #7
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	bf28      	it	cs
 8001b16:	2304      	movcs	r3, #4
 8001b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d902      	bls.n	8001b28 <NVIC_EncodePriority+0x30>
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3b03      	subs	r3, #3
 8001b26:	e000      	b.n	8001b2a <NVIC_EncodePriority+0x32>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	4313      	orrs	r3, r2
         );
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	; 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b6c:	d301      	bcc.n	8001b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00f      	b.n	8001b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <SysTick_Config+0x40>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7a:	210f      	movs	r1, #15
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	f7ff ff90 	bl	8001aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <SysTick_Config+0x40>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8a:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <SysTick_Config+0x40>)
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	e000e010 	.word	0xe000e010

08001ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff2d 	bl	8001a08 <__NVIC_SetPriorityGrouping>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc8:	f7ff ff42 	bl	8001a50 <__NVIC_GetPriorityGrouping>
 8001bcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	68b9      	ldr	r1, [r7, #8]
 8001bd2:	6978      	ldr	r0, [r7, #20]
 8001bd4:	f7ff ff90 	bl	8001af8 <NVIC_EncodePriority>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bde:	4611      	mov	r1, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff5f 	bl	8001aa4 <__NVIC_SetPriority>
}
 8001be6:	bf00      	nop
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff35 	bl	8001a6c <__NVIC_EnableIRQ>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ffa2 	bl	8001b5c <SysTick_Config>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b08b      	sub	sp, #44	; 0x2c
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c32:	2300      	movs	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c36:	e127      	b.n	8001e88 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c38:	2201      	movs	r2, #1
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	69fa      	ldr	r2, [r7, #28]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	f040 8116 	bne.w	8001e82 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b12      	cmp	r3, #18
 8001c5c:	d034      	beq.n	8001cc8 <HAL_GPIO_Init+0xa4>
 8001c5e:	2b12      	cmp	r3, #18
 8001c60:	d80d      	bhi.n	8001c7e <HAL_GPIO_Init+0x5a>
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d02b      	beq.n	8001cbe <HAL_GPIO_Init+0x9a>
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d804      	bhi.n	8001c74 <HAL_GPIO_Init+0x50>
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d031      	beq.n	8001cd2 <HAL_GPIO_Init+0xae>
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d01c      	beq.n	8001cac <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c72:	e048      	b.n	8001d06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d043      	beq.n	8001d00 <HAL_GPIO_Init+0xdc>
 8001c78:	2b11      	cmp	r3, #17
 8001c7a:	d01b      	beq.n	8001cb4 <HAL_GPIO_Init+0x90>
          break;
 8001c7c:	e043      	b.n	8001d06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c7e:	4a89      	ldr	r2, [pc, #548]	; (8001ea4 <HAL_GPIO_Init+0x280>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d026      	beq.n	8001cd2 <HAL_GPIO_Init+0xae>
 8001c84:	4a87      	ldr	r2, [pc, #540]	; (8001ea4 <HAL_GPIO_Init+0x280>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d806      	bhi.n	8001c98 <HAL_GPIO_Init+0x74>
 8001c8a:	4a87      	ldr	r2, [pc, #540]	; (8001ea8 <HAL_GPIO_Init+0x284>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d020      	beq.n	8001cd2 <HAL_GPIO_Init+0xae>
 8001c90:	4a86      	ldr	r2, [pc, #536]	; (8001eac <HAL_GPIO_Init+0x288>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d01d      	beq.n	8001cd2 <HAL_GPIO_Init+0xae>
          break;
 8001c96:	e036      	b.n	8001d06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c98:	4a85      	ldr	r2, [pc, #532]	; (8001eb0 <HAL_GPIO_Init+0x28c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d019      	beq.n	8001cd2 <HAL_GPIO_Init+0xae>
 8001c9e:	4a85      	ldr	r2, [pc, #532]	; (8001eb4 <HAL_GPIO_Init+0x290>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d016      	beq.n	8001cd2 <HAL_GPIO_Init+0xae>
 8001ca4:	4a84      	ldr	r2, [pc, #528]	; (8001eb8 <HAL_GPIO_Init+0x294>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d013      	beq.n	8001cd2 <HAL_GPIO_Init+0xae>
          break;
 8001caa:	e02c      	b.n	8001d06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	623b      	str	r3, [r7, #32]
          break;
 8001cb2:	e028      	b.n	8001d06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	623b      	str	r3, [r7, #32]
          break;
 8001cbc:	e023      	b.n	8001d06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	3308      	adds	r3, #8
 8001cc4:	623b      	str	r3, [r7, #32]
          break;
 8001cc6:	e01e      	b.n	8001d06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	330c      	adds	r3, #12
 8001cce:	623b      	str	r3, [r7, #32]
          break;
 8001cd0:	e019      	b.n	8001d06 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d102      	bne.n	8001ce0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cda:	2304      	movs	r3, #4
 8001cdc:	623b      	str	r3, [r7, #32]
          break;
 8001cde:	e012      	b.n	8001d06 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d105      	bne.n	8001cf4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ce8:	2308      	movs	r3, #8
 8001cea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	611a      	str	r2, [r3, #16]
          break;
 8001cf2:	e008      	b.n	8001d06 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cf4:	2308      	movs	r3, #8
 8001cf6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	615a      	str	r2, [r3, #20]
          break;
 8001cfe:	e002      	b.n	8001d06 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d00:	2300      	movs	r3, #0
 8001d02:	623b      	str	r3, [r7, #32]
          break;
 8001d04:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	2bff      	cmp	r3, #255	; 0xff
 8001d0a:	d801      	bhi.n	8001d10 <HAL_GPIO_Init+0xec>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	e001      	b.n	8001d14 <HAL_GPIO_Init+0xf0>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3304      	adds	r3, #4
 8001d14:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	2bff      	cmp	r3, #255	; 0xff
 8001d1a:	d802      	bhi.n	8001d22 <HAL_GPIO_Init+0xfe>
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	e002      	b.n	8001d28 <HAL_GPIO_Init+0x104>
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	3b08      	subs	r3, #8
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	210f      	movs	r1, #15
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	401a      	ands	r2, r3
 8001d3a:	6a39      	ldr	r1, [r7, #32]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	431a      	orrs	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 8096 	beq.w	8001e82 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d56:	4b59      	ldr	r3, [pc, #356]	; (8001ebc <HAL_GPIO_Init+0x298>)
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	4a58      	ldr	r2, [pc, #352]	; (8001ebc <HAL_GPIO_Init+0x298>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6193      	str	r3, [r2, #24]
 8001d62:	4b56      	ldr	r3, [pc, #344]	; (8001ebc <HAL_GPIO_Init+0x298>)
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d6e:	4a54      	ldr	r2, [pc, #336]	; (8001ec0 <HAL_GPIO_Init+0x29c>)
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	089b      	lsrs	r3, r3, #2
 8001d74:	3302      	adds	r3, #2
 8001d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	220f      	movs	r2, #15
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4b      	ldr	r2, [pc, #300]	; (8001ec4 <HAL_GPIO_Init+0x2a0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d013      	beq.n	8001dc2 <HAL_GPIO_Init+0x19e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4a      	ldr	r2, [pc, #296]	; (8001ec8 <HAL_GPIO_Init+0x2a4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d00d      	beq.n	8001dbe <HAL_GPIO_Init+0x19a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a49      	ldr	r2, [pc, #292]	; (8001ecc <HAL_GPIO_Init+0x2a8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d007      	beq.n	8001dba <HAL_GPIO_Init+0x196>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a48      	ldr	r2, [pc, #288]	; (8001ed0 <HAL_GPIO_Init+0x2ac>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d101      	bne.n	8001db6 <HAL_GPIO_Init+0x192>
 8001db2:	2303      	movs	r3, #3
 8001db4:	e006      	b.n	8001dc4 <HAL_GPIO_Init+0x1a0>
 8001db6:	2304      	movs	r3, #4
 8001db8:	e004      	b.n	8001dc4 <HAL_GPIO_Init+0x1a0>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e002      	b.n	8001dc4 <HAL_GPIO_Init+0x1a0>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_GPIO_Init+0x1a0>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc6:	f002 0203 	and.w	r2, r2, #3
 8001dca:	0092      	lsls	r2, r2, #2
 8001dcc:	4093      	lsls	r3, r2
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dd4:	493a      	ldr	r1, [pc, #232]	; (8001ec0 <HAL_GPIO_Init+0x29c>)
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	3302      	adds	r3, #2
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d006      	beq.n	8001dfc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dee:	4b39      	ldr	r3, [pc, #228]	; (8001ed4 <HAL_GPIO_Init+0x2b0>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4938      	ldr	r1, [pc, #224]	; (8001ed4 <HAL_GPIO_Init+0x2b0>)
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]
 8001dfa:	e006      	b.n	8001e0a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dfc:	4b35      	ldr	r3, [pc, #212]	; (8001ed4 <HAL_GPIO_Init+0x2b0>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	4933      	ldr	r1, [pc, #204]	; (8001ed4 <HAL_GPIO_Init+0x2b0>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d006      	beq.n	8001e24 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e16:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <HAL_GPIO_Init+0x2b0>)
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	492e      	ldr	r1, [pc, #184]	; (8001ed4 <HAL_GPIO_Init+0x2b0>)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	604b      	str	r3, [r1, #4]
 8001e22:	e006      	b.n	8001e32 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e24:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <HAL_GPIO_Init+0x2b0>)
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	4929      	ldr	r1, [pc, #164]	; (8001ed4 <HAL_GPIO_Init+0x2b0>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d006      	beq.n	8001e4c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e3e:	4b25      	ldr	r3, [pc, #148]	; (8001ed4 <HAL_GPIO_Init+0x2b0>)
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	4924      	ldr	r1, [pc, #144]	; (8001ed4 <HAL_GPIO_Init+0x2b0>)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
 8001e4a:	e006      	b.n	8001e5a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e4c:	4b21      	ldr	r3, [pc, #132]	; (8001ed4 <HAL_GPIO_Init+0x2b0>)
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	491f      	ldr	r1, [pc, #124]	; (8001ed4 <HAL_GPIO_Init+0x2b0>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d006      	beq.n	8001e74 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e66:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <HAL_GPIO_Init+0x2b0>)
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	491a      	ldr	r1, [pc, #104]	; (8001ed4 <HAL_GPIO_Init+0x2b0>)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	60cb      	str	r3, [r1, #12]
 8001e72:	e006      	b.n	8001e82 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e74:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <HAL_GPIO_Init+0x2b0>)
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	4915      	ldr	r1, [pc, #84]	; (8001ed4 <HAL_GPIO_Init+0x2b0>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	3301      	adds	r3, #1
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f47f aed0 	bne.w	8001c38 <HAL_GPIO_Init+0x14>
  }
}
 8001e98:	bf00      	nop
 8001e9a:	372c      	adds	r7, #44	; 0x2c
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	10210000 	.word	0x10210000
 8001ea8:	10110000 	.word	0x10110000
 8001eac:	10120000 	.word	0x10120000
 8001eb0:	10310000 	.word	0x10310000
 8001eb4:	10320000 	.word	0x10320000
 8001eb8:	10220000 	.word	0x10220000
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40010000 	.word	0x40010000
 8001ec4:	40010800 	.word	0x40010800
 8001ec8:	40010c00 	.word	0x40010c00
 8001ecc:	40011000 	.word	0x40011000
 8001ed0:	40011400 	.word	0x40011400
 8001ed4:	40010400 	.word	0x40010400

08001ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	807b      	strh	r3, [r7, #2]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ee8:	787b      	ldrb	r3, [r7, #1]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eee:	887a      	ldrh	r2, [r7, #2]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ef4:	e003      	b.n	8001efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ef6:	887b      	ldrh	r3, [r7, #2]
 8001ef8:	041a      	lsls	r2, r3, #16
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	611a      	str	r2, [r3, #16]
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr

08001f08 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f1a:	887a      	ldrh	r2, [r7, #2]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	041a      	lsls	r2, r3, #16
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	43d9      	mvns	r1, r3
 8001f26:	887b      	ldrh	r3, [r7, #2]
 8001f28:	400b      	ands	r3, r1
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	611a      	str	r2, [r3, #16]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
	...

08001f3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d006      	beq.n	8001f60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f52:	4a05      	ldr	r2, [pc, #20]	; (8001f68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fa56 	bl	800140c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40010400 	.word	0x40010400

08001f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e26c      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8087 	beq.w	800209a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f8c:	4b92      	ldr	r3, [pc, #584]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d00c      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f98:	4b8f      	ldr	r3, [pc, #572]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d112      	bne.n	8001fca <HAL_RCC_OscConfig+0x5e>
 8001fa4:	4b8c      	ldr	r3, [pc, #560]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb0:	d10b      	bne.n	8001fca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb2:	4b89      	ldr	r3, [pc, #548]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d06c      	beq.n	8002098 <HAL_RCC_OscConfig+0x12c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d168      	bne.n	8002098 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e246      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x76>
 8001fd4:	4b80      	ldr	r3, [pc, #512]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a7f      	ldr	r2, [pc, #508]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	e02e      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0x98>
 8001fea:	4b7b      	ldr	r3, [pc, #492]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a7a      	ldr	r2, [pc, #488]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b78      	ldr	r3, [pc, #480]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a77      	ldr	r2, [pc, #476]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e01d      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0xbc>
 800200e:	4b72      	ldr	r3, [pc, #456]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a71      	ldr	r2, [pc, #452]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	4b6f      	ldr	r3, [pc, #444]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6e      	ldr	r2, [pc, #440]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e00b      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8002028:	4b6b      	ldr	r3, [pc, #428]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a6a      	ldr	r2, [pc, #424]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800202e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b68      	ldr	r3, [pc, #416]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a67      	ldr	r2, [pc, #412]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800203a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d013      	beq.n	8002070 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7ff fcd4 	bl	80019f4 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002050:	f7ff fcd0 	bl	80019f4 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b64      	cmp	r3, #100	; 0x64
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e1fa      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002062:	4b5d      	ldr	r3, [pc, #372]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0xe4>
 800206e:	e014      	b.n	800209a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7ff fcc0 	bl	80019f4 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002078:	f7ff fcbc 	bl	80019f4 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e1e6      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208a:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x10c>
 8002096:	e000      	b.n	800209a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d063      	beq.n	800216e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020a6:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00b      	beq.n	80020ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020b2:	4b49      	ldr	r3, [pc, #292]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d11c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x18c>
 80020be:	4b46      	ldr	r3, [pc, #280]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d116      	bne.n	80020f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ca:	4b43      	ldr	r3, [pc, #268]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d005      	beq.n	80020e2 <HAL_RCC_OscConfig+0x176>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d001      	beq.n	80020e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e1ba      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e2:	4b3d      	ldr	r3, [pc, #244]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4939      	ldr	r1, [pc, #228]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	e03a      	b.n	800216e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d020      	beq.n	8002142 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002100:	4b36      	ldr	r3, [pc, #216]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7ff fc75 	bl	80019f4 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210e:	f7ff fc71 	bl	80019f4 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e19b      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002120:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212c:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4927      	ldr	r1, [pc, #156]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800213c:	4313      	orrs	r3, r2
 800213e:	600b      	str	r3, [r1, #0]
 8002140:	e015      	b.n	800216e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002142:	4b26      	ldr	r3, [pc, #152]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7ff fc54 	bl	80019f4 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002150:	f7ff fc50 	bl	80019f4 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e17a      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002162:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d03a      	beq.n	80021f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d019      	beq.n	80021b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002182:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <HAL_RCC_OscConfig+0x274>)
 8002184:	2201      	movs	r2, #1
 8002186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002188:	f7ff fc34 	bl	80019f4 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002190:	f7ff fc30 	bl	80019f4 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e15a      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021ae:	2001      	movs	r0, #1
 80021b0:	f000 fada 	bl	8002768 <RCC_Delay>
 80021b4:	e01c      	b.n	80021f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_RCC_OscConfig+0x274>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021bc:	f7ff fc1a 	bl	80019f4 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c2:	e00f      	b.n	80021e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c4:	f7ff fc16 	bl	80019f4 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d908      	bls.n	80021e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e140      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	42420000 	.word	0x42420000
 80021e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e4:	4b9e      	ldr	r3, [pc, #632]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1e9      	bne.n	80021c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80a6 	beq.w	800234a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002202:	4b97      	ldr	r3, [pc, #604]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10d      	bne.n	800222a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220e:	4b94      	ldr	r3, [pc, #592]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	4a93      	ldr	r2, [pc, #588]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002218:	61d3      	str	r3, [r2, #28]
 800221a:	4b91      	ldr	r3, [pc, #580]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002226:	2301      	movs	r3, #1
 8002228:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222a:	4b8e      	ldr	r3, [pc, #568]	; (8002464 <HAL_RCC_OscConfig+0x4f8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d118      	bne.n	8002268 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002236:	4b8b      	ldr	r3, [pc, #556]	; (8002464 <HAL_RCC_OscConfig+0x4f8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a8a      	ldr	r2, [pc, #552]	; (8002464 <HAL_RCC_OscConfig+0x4f8>)
 800223c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002242:	f7ff fbd7 	bl	80019f4 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224a:	f7ff fbd3 	bl	80019f4 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b64      	cmp	r3, #100	; 0x64
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e0fd      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225c:	4b81      	ldr	r3, [pc, #516]	; (8002464 <HAL_RCC_OscConfig+0x4f8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d106      	bne.n	800227e <HAL_RCC_OscConfig+0x312>
 8002270:	4b7b      	ldr	r3, [pc, #492]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4a7a      	ldr	r2, [pc, #488]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6213      	str	r3, [r2, #32]
 800227c:	e02d      	b.n	80022da <HAL_RCC_OscConfig+0x36e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x334>
 8002286:	4b76      	ldr	r3, [pc, #472]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4a75      	ldr	r2, [pc, #468]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	6213      	str	r3, [r2, #32]
 8002292:	4b73      	ldr	r3, [pc, #460]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4a72      	ldr	r2, [pc, #456]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002298:	f023 0304 	bic.w	r3, r3, #4
 800229c:	6213      	str	r3, [r2, #32]
 800229e:	e01c      	b.n	80022da <HAL_RCC_OscConfig+0x36e>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b05      	cmp	r3, #5
 80022a6:	d10c      	bne.n	80022c2 <HAL_RCC_OscConfig+0x356>
 80022a8:	4b6d      	ldr	r3, [pc, #436]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	4a6c      	ldr	r2, [pc, #432]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022ae:	f043 0304 	orr.w	r3, r3, #4
 80022b2:	6213      	str	r3, [r2, #32]
 80022b4:	4b6a      	ldr	r3, [pc, #424]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	4a69      	ldr	r2, [pc, #420]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6213      	str	r3, [r2, #32]
 80022c0:	e00b      	b.n	80022da <HAL_RCC_OscConfig+0x36e>
 80022c2:	4b67      	ldr	r3, [pc, #412]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	4a66      	ldr	r2, [pc, #408]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	6213      	str	r3, [r2, #32]
 80022ce:	4b64      	ldr	r3, [pc, #400]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4a63      	ldr	r2, [pc, #396]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022d4:	f023 0304 	bic.w	r3, r3, #4
 80022d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d015      	beq.n	800230e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e2:	f7ff fb87 	bl	80019f4 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e8:	e00a      	b.n	8002300 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ea:	f7ff fb83 	bl	80019f4 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e0ab      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002300:	4b57      	ldr	r3, [pc, #348]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0ee      	beq.n	80022ea <HAL_RCC_OscConfig+0x37e>
 800230c:	e014      	b.n	8002338 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230e:	f7ff fb71 	bl	80019f4 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002314:	e00a      	b.n	800232c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f7ff fb6d 	bl	80019f4 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f241 3288 	movw	r2, #5000	; 0x1388
 8002324:	4293      	cmp	r3, r2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e095      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232c:	4b4c      	ldr	r3, [pc, #304]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1ee      	bne.n	8002316 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002338:	7dfb      	ldrb	r3, [r7, #23]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d105      	bne.n	800234a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233e:	4b48      	ldr	r3, [pc, #288]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	4a47      	ldr	r2, [pc, #284]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002348:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8081 	beq.w	8002456 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002354:	4b42      	ldr	r3, [pc, #264]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b08      	cmp	r3, #8
 800235e:	d061      	beq.n	8002424 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	2b02      	cmp	r3, #2
 8002366:	d146      	bne.n	80023f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002368:	4b3f      	ldr	r3, [pc, #252]	; (8002468 <HAL_RCC_OscConfig+0x4fc>)
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7ff fb41 	bl	80019f4 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002376:	f7ff fb3d 	bl	80019f4 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e067      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002388:	4b35      	ldr	r3, [pc, #212]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f0      	bne.n	8002376 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d108      	bne.n	80023b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800239e:	4b30      	ldr	r3, [pc, #192]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	492d      	ldr	r1, [pc, #180]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b0:	4b2b      	ldr	r3, [pc, #172]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a19      	ldr	r1, [r3, #32]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	430b      	orrs	r3, r1
 80023c2:	4927      	ldr	r1, [pc, #156]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c8:	4b27      	ldr	r3, [pc, #156]	; (8002468 <HAL_RCC_OscConfig+0x4fc>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7ff fb11 	bl	80019f4 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d6:	f7ff fb0d 	bl	80019f4 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e037      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e8:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x46a>
 80023f4:	e02f      	b.n	8002456 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f6:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <HAL_RCC_OscConfig+0x4fc>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7ff fafa 	bl	80019f4 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002404:	f7ff faf6 	bl	80019f4 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e020      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x498>
 8002422:	e018      	b.n	8002456 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e013      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	429a      	cmp	r2, r3
 8002442:	d106      	bne.n	8002452 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244e:	429a      	cmp	r2, r3
 8002450:	d001      	beq.n	8002456 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40021000 	.word	0x40021000
 8002464:	40007000 	.word	0x40007000
 8002468:	42420060 	.word	0x42420060

0800246c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0d0      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002480:	4b6a      	ldr	r3, [pc, #424]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d910      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b67      	ldr	r3, [pc, #412]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 0207 	bic.w	r2, r3, #7
 8002496:	4965      	ldr	r1, [pc, #404]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b63      	ldr	r3, [pc, #396]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0b8      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d020      	beq.n	80024fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c8:	4b59      	ldr	r3, [pc, #356]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4a58      	ldr	r2, [pc, #352]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e0:	4b53      	ldr	r3, [pc, #332]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4a52      	ldr	r2, [pc, #328]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ec:	4b50      	ldr	r3, [pc, #320]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	494d      	ldr	r1, [pc, #308]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d040      	beq.n	800258c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b47      	ldr	r3, [pc, #284]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d115      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e07f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252a:	4b41      	ldr	r3, [pc, #260]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e073      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253a:	4b3d      	ldr	r3, [pc, #244]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e06b      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254a:	4b39      	ldr	r3, [pc, #228]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4936      	ldr	r1, [pc, #216]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800255c:	f7ff fa4a 	bl	80019f4 <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	e00a      	b.n	800257a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002564:	f7ff fa46 	bl	80019f4 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e053      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 020c 	and.w	r2, r3, #12
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	429a      	cmp	r2, r3
 800258a:	d1eb      	bne.n	8002564 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800258c:	4b27      	ldr	r3, [pc, #156]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d210      	bcs.n	80025bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b24      	ldr	r3, [pc, #144]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 0207 	bic.w	r2, r3, #7
 80025a2:	4922      	ldr	r1, [pc, #136]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b20      	ldr	r3, [pc, #128]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e032      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4916      	ldr	r1, [pc, #88]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	490e      	ldr	r1, [pc, #56]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025fa:	f000 f821 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025fe:	4601      	mov	r1, r0
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 800260c:	5cd3      	ldrb	r3, [r2, r3]
 800260e:	fa21 f303 	lsr.w	r3, r1, r3
 8002612:	4a09      	ldr	r2, [pc, #36]	; (8002638 <HAL_RCC_ClockConfig+0x1cc>)
 8002614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_RCC_ClockConfig+0x1d0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff f9a8 	bl	8001970 <HAL_InitTick>

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40022000 	.word	0x40022000
 8002630:	40021000 	.word	0x40021000
 8002634:	08005b88 	.word	0x08005b88
 8002638:	20000010 	.word	0x20000010
 800263c:	20000014 	.word	0x20000014

08002640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	b490      	push	{r4, r7}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002646:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002648:	1d3c      	adds	r4, r7, #4
 800264a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800264c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002650:	4b28      	ldr	r3, [pc, #160]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	2300      	movs	r3, #0
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800266a:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b04      	cmp	r3, #4
 8002678:	d002      	beq.n	8002680 <HAL_RCC_GetSysClockFreq+0x40>
 800267a:	2b08      	cmp	r3, #8
 800267c:	d003      	beq.n	8002686 <HAL_RCC_GetSysClockFreq+0x46>
 800267e:	e02d      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002680:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002682:	623b      	str	r3, [r7, #32]
      break;
 8002684:	e02d      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	0c9b      	lsrs	r3, r3, #18
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002692:	4413      	add	r3, r2
 8002694:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002698:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d013      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026a4:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	0c5b      	lsrs	r3, r3, #17
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026b2:	4413      	add	r3, r2
 80026b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	4a0f      	ldr	r2, [pc, #60]	; (80026fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80026be:	fb02 f203 	mul.w	r2, r2, r3
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ca:	e004      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	623b      	str	r3, [r7, #32]
      break;
 80026da:	e002      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026dc:	4b07      	ldr	r3, [pc, #28]	; (80026fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80026de:	623b      	str	r3, [r7, #32]
      break;
 80026e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026e2:	6a3b      	ldr	r3, [r7, #32]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3728      	adds	r7, #40	; 0x28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc90      	pop	{r4, r7}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	08005b74 	.word	0x08005b74
 80026f4:	08005b84 	.word	0x08005b84
 80026f8:	40021000 	.word	0x40021000
 80026fc:	007a1200 	.word	0x007a1200
 8002700:	003d0900 	.word	0x003d0900

08002704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002708:	4b02      	ldr	r3, [pc, #8]	; (8002714 <HAL_RCC_GetHCLKFreq+0x10>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	20000010 	.word	0x20000010

08002718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800271c:	f7ff fff2 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002720:	4601      	mov	r1, r0
 8002722:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	4a03      	ldr	r2, [pc, #12]	; (800273c <HAL_RCC_GetPCLK1Freq+0x24>)
 800272e:	5cd3      	ldrb	r3, [r2, r3]
 8002730:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	08005b98 	.word	0x08005b98

08002740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002744:	f7ff ffde 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002748:	4601      	mov	r1, r0
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	0adb      	lsrs	r3, r3, #11
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4a03      	ldr	r2, [pc, #12]	; (8002764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002756:	5cd3      	ldrb	r3, [r2, r3]
 8002758:	fa21 f303 	lsr.w	r3, r1, r3
}
 800275c:	4618      	mov	r0, r3
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021000 	.word	0x40021000
 8002764:	08005b98 	.word	0x08005b98

08002768 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002770:	4b0a      	ldr	r3, [pc, #40]	; (800279c <RCC_Delay+0x34>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0a      	ldr	r2, [pc, #40]	; (80027a0 <RCC_Delay+0x38>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	0a5b      	lsrs	r3, r3, #9
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	fb02 f303 	mul.w	r3, r2, r3
 8002782:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002784:	bf00      	nop
  }
  while (Delay --);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1e5a      	subs	r2, r3, #1
 800278a:	60fa      	str	r2, [r7, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f9      	bne.n	8002784 <RCC_Delay+0x1c>
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20000010 	.word	0x20000010
 80027a0:	10624dd3 	.word	0x10624dd3

080027a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e041      	b.n	800283a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d106      	bne.n	80027d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7fe ff68 	bl	80016a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3304      	adds	r3, #4
 80027e0:	4619      	mov	r1, r3
 80027e2:	4610      	mov	r0, r2
 80027e4:	f000 fc1c 	bl	8003020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b01      	cmp	r3, #1
 8002856:	d001      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e03a      	b.n	80028d2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a18      	ldr	r2, [pc, #96]	; (80028dc <HAL_TIM_Base_Start_IT+0x98>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00e      	beq.n	800289c <HAL_TIM_Base_Start_IT+0x58>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002886:	d009      	beq.n	800289c <HAL_TIM_Base_Start_IT+0x58>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d004      	beq.n	800289c <HAL_TIM_Base_Start_IT+0x58>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a13      	ldr	r2, [pc, #76]	; (80028e4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d111      	bne.n	80028c0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2b06      	cmp	r3, #6
 80028ac:	d010      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f042 0201 	orr.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028be:	e007      	b.n	80028d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	40012c00 	.word	0x40012c00
 80028e0:	40000400 	.word	0x40000400
 80028e4:	40000800 	.word	0x40000800

080028e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e041      	b.n	800297e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f839 	bl	8002986 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3304      	adds	r3, #4
 8002924:	4619      	mov	r1, r3
 8002926:	4610      	mov	r0, r2
 8002928:	f000 fb7a 	bl	8003020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d109      	bne.n	80029bc <HAL_TIM_PWM_Start+0x24>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	bf14      	ite	ne
 80029b4:	2301      	movne	r3, #1
 80029b6:	2300      	moveq	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	e022      	b.n	8002a02 <HAL_TIM_PWM_Start+0x6a>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d109      	bne.n	80029d6 <HAL_TIM_PWM_Start+0x3e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	bf14      	ite	ne
 80029ce:	2301      	movne	r3, #1
 80029d0:	2300      	moveq	r3, #0
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	e015      	b.n	8002a02 <HAL_TIM_PWM_Start+0x6a>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d109      	bne.n	80029f0 <HAL_TIM_PWM_Start+0x58>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	bf14      	ite	ne
 80029e8:	2301      	movne	r3, #1
 80029ea:	2300      	moveq	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	e008      	b.n	8002a02 <HAL_TIM_PWM_Start+0x6a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	bf14      	ite	ne
 80029fc:	2301      	movne	r3, #1
 80029fe:	2300      	moveq	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e05e      	b.n	8002ac8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d104      	bne.n	8002a1a <HAL_TIM_PWM_Start+0x82>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a18:	e013      	b.n	8002a42 <HAL_TIM_PWM_Start+0xaa>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d104      	bne.n	8002a2a <HAL_TIM_PWM_Start+0x92>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a28:	e00b      	b.n	8002a42 <HAL_TIM_PWM_Start+0xaa>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d104      	bne.n	8002a3a <HAL_TIM_PWM_Start+0xa2>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a38:	e003      	b.n	8002a42 <HAL_TIM_PWM_Start+0xaa>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2201      	movs	r2, #1
 8002a48:	6839      	ldr	r1, [r7, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fd68 	bl	8003520 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a1e      	ldr	r2, [pc, #120]	; (8002ad0 <HAL_TIM_PWM_Start+0x138>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d107      	bne.n	8002a6a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a18      	ldr	r2, [pc, #96]	; (8002ad0 <HAL_TIM_PWM_Start+0x138>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d00e      	beq.n	8002a92 <HAL_TIM_PWM_Start+0xfa>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a7c:	d009      	beq.n	8002a92 <HAL_TIM_PWM_Start+0xfa>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a14      	ldr	r2, [pc, #80]	; (8002ad4 <HAL_TIM_PWM_Start+0x13c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d004      	beq.n	8002a92 <HAL_TIM_PWM_Start+0xfa>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a12      	ldr	r2, [pc, #72]	; (8002ad8 <HAL_TIM_PWM_Start+0x140>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d111      	bne.n	8002ab6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2b06      	cmp	r3, #6
 8002aa2:	d010      	beq.n	8002ac6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab4:	e007      	b.n	8002ac6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 0201 	orr.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40012c00 	.word	0x40012c00
 8002ad4:	40000400 	.word	0x40000400
 8002ad8:	40000800 	.word	0x40000800

08002adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d122      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d11b      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0202 	mvn.w	r2, #2
 8002b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fa62 	bl	8002fe8 <HAL_TIM_IC_CaptureCallback>
 8002b24:	e005      	b.n	8002b32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fa55 	bl	8002fd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 fa64 	bl	8002ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d122      	bne.n	8002b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d11b      	bne.n	8002b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0204 	mvn.w	r2, #4
 8002b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2202      	movs	r2, #2
 8002b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 fa38 	bl	8002fe8 <HAL_TIM_IC_CaptureCallback>
 8002b78:	e005      	b.n	8002b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fa2b 	bl	8002fd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 fa3a 	bl	8002ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d122      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d11b      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0208 	mvn.w	r2, #8
 8002bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fa0e 	bl	8002fe8 <HAL_TIM_IC_CaptureCallback>
 8002bcc:	e005      	b.n	8002bda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fa01 	bl	8002fd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 fa10 	bl	8002ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b10      	cmp	r3, #16
 8002bec:	d122      	bne.n	8002c34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b10      	cmp	r3, #16
 8002bfa:	d11b      	bne.n	8002c34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f06f 0210 	mvn.w	r2, #16
 8002c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2208      	movs	r2, #8
 8002c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f9e4 	bl	8002fe8 <HAL_TIM_IC_CaptureCallback>
 8002c20:	e005      	b.n	8002c2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f9d7 	bl	8002fd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f9e6 	bl	8002ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d10e      	bne.n	8002c60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d107      	bne.n	8002c60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f06f 0201 	mvn.w	r2, #1
 8002c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7fe fc9a 	bl	8001594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6a:	2b80      	cmp	r3, #128	; 0x80
 8002c6c:	d10e      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c78:	2b80      	cmp	r3, #128	; 0x80
 8002c7a:	d107      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fd26 	bl	80036d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c96:	2b40      	cmp	r3, #64	; 0x40
 8002c98:	d10e      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca4:	2b40      	cmp	r3, #64	; 0x40
 8002ca6:	d107      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f9aa 	bl	800300c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d10e      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	d107      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0220 	mvn.w	r2, #32
 8002cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fcf1 	bl	80036c6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e0ac      	b.n	8002e60 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b0c      	cmp	r3, #12
 8002d12:	f200 809f 	bhi.w	8002e54 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002d16:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1c:	08002d51 	.word	0x08002d51
 8002d20:	08002e55 	.word	0x08002e55
 8002d24:	08002e55 	.word	0x08002e55
 8002d28:	08002e55 	.word	0x08002e55
 8002d2c:	08002d91 	.word	0x08002d91
 8002d30:	08002e55 	.word	0x08002e55
 8002d34:	08002e55 	.word	0x08002e55
 8002d38:	08002e55 	.word	0x08002e55
 8002d3c:	08002dd3 	.word	0x08002dd3
 8002d40:	08002e55 	.word	0x08002e55
 8002d44:	08002e55 	.word	0x08002e55
 8002d48:	08002e55 	.word	0x08002e55
 8002d4c:	08002e13 	.word	0x08002e13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 f9c4 	bl	80030e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0208 	orr.w	r2, r2, #8
 8002d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0204 	bic.w	r2, r2, #4
 8002d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6999      	ldr	r1, [r3, #24]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	619a      	str	r2, [r3, #24]
      break;
 8002d8e:	e062      	b.n	8002e56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fa0a 	bl	80031b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6999      	ldr	r1, [r3, #24]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	021a      	lsls	r2, r3, #8
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	619a      	str	r2, [r3, #24]
      break;
 8002dd0:	e041      	b.n	8002e56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68b9      	ldr	r1, [r7, #8]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fa53 	bl	8003284 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69da      	ldr	r2, [r3, #28]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 0208 	orr.w	r2, r2, #8
 8002dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69da      	ldr	r2, [r3, #28]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0204 	bic.w	r2, r2, #4
 8002dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69d9      	ldr	r1, [r3, #28]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	61da      	str	r2, [r3, #28]
      break;
 8002e10:	e021      	b.n	8002e56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fa9d 	bl	8003358 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69da      	ldr	r2, [r3, #28]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	69da      	ldr	r2, [r3, #28]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69d9      	ldr	r1, [r3, #28]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	021a      	lsls	r2, r3, #8
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	61da      	str	r2, [r3, #28]
      break;
 8002e52:	e000      	b.n	8002e56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002e54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_TIM_ConfigClockSource+0x18>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e0a6      	b.n	8002fce <HAL_TIM_ConfigClockSource+0x166>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ea6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b40      	cmp	r3, #64	; 0x40
 8002eb6:	d067      	beq.n	8002f88 <HAL_TIM_ConfigClockSource+0x120>
 8002eb8:	2b40      	cmp	r3, #64	; 0x40
 8002eba:	d80b      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x6c>
 8002ebc:	2b10      	cmp	r3, #16
 8002ebe:	d073      	beq.n	8002fa8 <HAL_TIM_ConfigClockSource+0x140>
 8002ec0:	2b10      	cmp	r3, #16
 8002ec2:	d802      	bhi.n	8002eca <HAL_TIM_ConfigClockSource+0x62>
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d06f      	beq.n	8002fa8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ec8:	e078      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	d06c      	beq.n	8002fa8 <HAL_TIM_ConfigClockSource+0x140>
 8002ece:	2b30      	cmp	r3, #48	; 0x30
 8002ed0:	d06a      	beq.n	8002fa8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002ed2:	e073      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ed4:	2b70      	cmp	r3, #112	; 0x70
 8002ed6:	d00d      	beq.n	8002ef4 <HAL_TIM_ConfigClockSource+0x8c>
 8002ed8:	2b70      	cmp	r3, #112	; 0x70
 8002eda:	d804      	bhi.n	8002ee6 <HAL_TIM_ConfigClockSource+0x7e>
 8002edc:	2b50      	cmp	r3, #80	; 0x50
 8002ede:	d033      	beq.n	8002f48 <HAL_TIM_ConfigClockSource+0xe0>
 8002ee0:	2b60      	cmp	r3, #96	; 0x60
 8002ee2:	d041      	beq.n	8002f68 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002ee4:	e06a      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eea:	d066      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x152>
 8002eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef0:	d017      	beq.n	8002f22 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002ef2:	e063      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	6899      	ldr	r1, [r3, #8]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f000 faed 	bl	80034e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f16:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	609a      	str	r2, [r3, #8]
      break;
 8002f20:	e04c      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6899      	ldr	r1, [r3, #8]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f000 fad6 	bl	80034e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f44:	609a      	str	r2, [r3, #8]
      break;
 8002f46:	e039      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	6859      	ldr	r1, [r3, #4]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	461a      	mov	r2, r3
 8002f56:	f000 fa4d 	bl	80033f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2150      	movs	r1, #80	; 0x50
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 faa4 	bl	80034ae <TIM_ITRx_SetConfig>
      break;
 8002f66:	e029      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	6859      	ldr	r1, [r3, #4]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	461a      	mov	r2, r3
 8002f76:	f000 fa6b 	bl	8003450 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2160      	movs	r1, #96	; 0x60
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fa94 	bl	80034ae <TIM_ITRx_SetConfig>
      break;
 8002f86:	e019      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6818      	ldr	r0, [r3, #0]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	6859      	ldr	r1, [r3, #4]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	461a      	mov	r2, r3
 8002f96:	f000 fa2d 	bl	80033f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2140      	movs	r1, #64	; 0x40
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fa84 	bl	80034ae <TIM_ITRx_SetConfig>
      break;
 8002fa6:	e009      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	f000 fa7b 	bl	80034ae <TIM_ITRx_SetConfig>
        break;
 8002fb8:	e000      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002fba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr

08002ffa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr
	...

08003020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a29      	ldr	r2, [pc, #164]	; (80030d8 <TIM_Base_SetConfig+0xb8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00b      	beq.n	8003050 <TIM_Base_SetConfig+0x30>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303e:	d007      	beq.n	8003050 <TIM_Base_SetConfig+0x30>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a26      	ldr	r2, [pc, #152]	; (80030dc <TIM_Base_SetConfig+0xbc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d003      	beq.n	8003050 <TIM_Base_SetConfig+0x30>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a25      	ldr	r2, [pc, #148]	; (80030e0 <TIM_Base_SetConfig+0xc0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d108      	bne.n	8003062 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a1c      	ldr	r2, [pc, #112]	; (80030d8 <TIM_Base_SetConfig+0xb8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00b      	beq.n	8003082 <TIM_Base_SetConfig+0x62>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003070:	d007      	beq.n	8003082 <TIM_Base_SetConfig+0x62>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a19      	ldr	r2, [pc, #100]	; (80030dc <TIM_Base_SetConfig+0xbc>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d003      	beq.n	8003082 <TIM_Base_SetConfig+0x62>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a18      	ldr	r2, [pc, #96]	; (80030e0 <TIM_Base_SetConfig+0xc0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d108      	bne.n	8003094 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a07      	ldr	r2, [pc, #28]	; (80030d8 <TIM_Base_SetConfig+0xb8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d103      	bne.n	80030c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	615a      	str	r2, [r3, #20]
}
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr
 80030d8:	40012c00 	.word	0x40012c00
 80030dc:	40000400 	.word	0x40000400
 80030e0:	40000800 	.word	0x40000800

080030e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	f023 0201 	bic.w	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 0303 	bic.w	r3, r3, #3
 800311a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f023 0302 	bic.w	r3, r3, #2
 800312c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	4313      	orrs	r3, r2
 8003136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a1c      	ldr	r2, [pc, #112]	; (80031ac <TIM_OC1_SetConfig+0xc8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d10c      	bne.n	800315a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f023 0308 	bic.w	r3, r3, #8
 8003146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f023 0304 	bic.w	r3, r3, #4
 8003158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a13      	ldr	r2, [pc, #76]	; (80031ac <TIM_OC1_SetConfig+0xc8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d111      	bne.n	8003186 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	621a      	str	r2, [r3, #32]
}
 80031a0:	bf00      	nop
 80031a2:	371c      	adds	r7, #28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40012c00 	.word	0x40012c00

080031b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	f023 0210 	bic.w	r2, r3, #16
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	021b      	lsls	r3, r3, #8
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f023 0320 	bic.w	r3, r3, #32
 80031fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a1d      	ldr	r2, [pc, #116]	; (8003280 <TIM_OC2_SetConfig+0xd0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d10d      	bne.n	800322c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800322a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a14      	ldr	r2, [pc, #80]	; (8003280 <TIM_OC2_SetConfig+0xd0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d113      	bne.n	800325c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800323a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003242:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	621a      	str	r2, [r3, #32]
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr
 8003280:	40012c00 	.word	0x40012c00

08003284 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003284:	b480      	push	{r7}
 8003286:	b087      	sub	sp, #28
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0303 	bic.w	r3, r3, #3
 80032ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	021b      	lsls	r3, r3, #8
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a1d      	ldr	r2, [pc, #116]	; (8003354 <TIM_OC3_SetConfig+0xd0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d10d      	bne.n	80032fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	021b      	lsls	r3, r3, #8
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a14      	ldr	r2, [pc, #80]	; (8003354 <TIM_OC3_SetConfig+0xd0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d113      	bne.n	800332e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800330c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	621a      	str	r2, [r3, #32]
}
 8003348:	bf00      	nop
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40012c00 	.word	0x40012c00

08003358 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800338e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	021b      	lsls	r3, r3, #8
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	031b      	lsls	r3, r3, #12
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a0f      	ldr	r2, [pc, #60]	; (80033f0 <TIM_OC4_SetConfig+0x98>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d109      	bne.n	80033cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	019b      	lsls	r3, r3, #6
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	621a      	str	r2, [r3, #32]
}
 80033e6:	bf00      	nop
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr
 80033f0:	40012c00 	.word	0x40012c00

080033f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	f023 0201 	bic.w	r2, r3, #1
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800341e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f023 030a 	bic.w	r3, r3, #10
 8003430:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4313      	orrs	r3, r2
 8003438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	621a      	str	r2, [r3, #32]
}
 8003446:	bf00      	nop
 8003448:	371c      	adds	r7, #28
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr

08003450 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f023 0210 	bic.w	r2, r3, #16
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800347a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	031b      	lsls	r3, r3, #12
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800348c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	621a      	str	r2, [r3, #32]
}
 80034a4:	bf00      	nop
 80034a6:	371c      	adds	r7, #28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr

080034ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b085      	sub	sp, #20
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f043 0307 	orr.w	r3, r3, #7
 80034d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	609a      	str	r2, [r3, #8]
}
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr

080034e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b087      	sub	sp, #28
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	021a      	lsls	r2, r3, #8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	431a      	orrs	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4313      	orrs	r3, r2
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	609a      	str	r2, [r3, #8]
}
 8003516:	bf00      	nop
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr

08003520 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	2201      	movs	r2, #1
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a1a      	ldr	r2, [r3, #32]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	43db      	mvns	r3, r3
 8003542:	401a      	ands	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a1a      	ldr	r2, [r3, #32]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f003 031f 	and.w	r3, r3, #31
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	fa01 f303 	lsl.w	r3, r1, r3
 8003558:	431a      	orrs	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	621a      	str	r2, [r3, #32]
}
 800355e:	bf00      	nop
 8003560:	371c      	adds	r7, #28
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800357c:	2302      	movs	r3, #2
 800357e:	e046      	b.n	800360e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a16      	ldr	r2, [pc, #88]	; (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d00e      	beq.n	80035e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035cc:	d009      	beq.n	80035e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a12      	ldr	r2, [pc, #72]	; (800361c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d004      	beq.n	80035e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a10      	ldr	r2, [pc, #64]	; (8003620 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d10c      	bne.n	80035fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr
 8003618:	40012c00 	.word	0x40012c00
 800361c:	40000400 	.word	0x40000400
 8003620:	40000800 	.word	0x40000800

08003624 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800363c:	2302      	movs	r3, #2
 800363e:	e03d      	b.n	80036bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4313      	orrs	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr

080036c6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr

080036d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr

080036ea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e03f      	b.n	800377c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d106      	bne.n	8003716 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7fe f831 	bl	8001778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2224      	movs	r2, #36	; 0x24
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800372c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f904 	bl	800393c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003742:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695a      	ldr	r2, [r3, #20]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003752:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003762:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2220      	movs	r2, #32
 8003776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08a      	sub	sp, #40	; 0x28
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	4613      	mov	r3, r2
 8003792:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d17c      	bne.n	800389e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <HAL_UART_Transmit+0x2c>
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e075      	b.n	80038a0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_UART_Transmit+0x3e>
 80037be:	2302      	movs	r3, #2
 80037c0:	e06e      	b.n	80038a0 <HAL_UART_Transmit+0x11c>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2221      	movs	r2, #33	; 0x21
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037d8:	f7fe f90c 	bl	80019f4 <HAL_GetTick>
 80037dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	88fa      	ldrh	r2, [r7, #6]
 80037e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	88fa      	ldrh	r2, [r7, #6]
 80037e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f2:	d108      	bne.n	8003806 <HAL_UART_Transmit+0x82>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d104      	bne.n	8003806 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	61bb      	str	r3, [r7, #24]
 8003804:	e003      	b.n	800380e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800380a:	2300      	movs	r3, #0
 800380c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003816:	e02a      	b.n	800386e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	2200      	movs	r2, #0
 8003820:	2180      	movs	r1, #128	; 0x80
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f840 	bl	80038a8 <UART_WaitOnFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e036      	b.n	80038a0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10b      	bne.n	8003850 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003846:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	3302      	adds	r3, #2
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	e007      	b.n	8003860 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	781a      	ldrb	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	3301      	adds	r3, #1
 800385e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1cf      	bne.n	8003818 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2200      	movs	r2, #0
 8003880:	2140      	movs	r1, #64	; 0x40
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f810 	bl	80038a8 <UART_WaitOnFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e006      	b.n	80038a0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	e000      	b.n	80038a0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800389e:	2302      	movs	r3, #2
  }
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3720      	adds	r7, #32
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	4613      	mov	r3, r2
 80038b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b8:	e02c      	b.n	8003914 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c0:	d028      	beq.n	8003914 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80038c8:	f7fe f894 	bl	80019f4 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d21d      	bcs.n	8003914 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038e6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0201 	bic.w	r2, r2, #1
 80038f6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e00f      	b.n	8003934 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	4013      	ands	r3, r2
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	429a      	cmp	r2, r3
 8003922:	bf0c      	ite	eq
 8003924:	2301      	moveq	r3, #1
 8003926:	2300      	movne	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	461a      	mov	r2, r3
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	429a      	cmp	r2, r3
 8003930:	d0c3      	beq.n	80038ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003976:	f023 030c 	bic.w	r3, r3, #12
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6812      	ldr	r2, [r2, #0]
 800397e:	68b9      	ldr	r1, [r7, #8]
 8003980:	430b      	orrs	r3, r1
 8003982:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a2c      	ldr	r2, [pc, #176]	; (8003a50 <UART_SetConfig+0x114>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d103      	bne.n	80039ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039a4:	f7fe fecc 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	e002      	b.n	80039b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039ac:	f7fe feb4 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 80039b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	009a      	lsls	r2, r3, #2
 80039bc:	441a      	add	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	4a22      	ldr	r2, [pc, #136]	; (8003a54 <UART_SetConfig+0x118>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	095b      	lsrs	r3, r3, #5
 80039d0:	0119      	lsls	r1, r3, #4
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	009a      	lsls	r2, r3, #2
 80039dc:	441a      	add	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039e8:	4b1a      	ldr	r3, [pc, #104]	; (8003a54 <UART_SetConfig+0x118>)
 80039ea:	fba3 0302 	umull	r0, r3, r3, r2
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	2064      	movs	r0, #100	; 0x64
 80039f2:	fb00 f303 	mul.w	r3, r0, r3
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	3332      	adds	r3, #50	; 0x32
 80039fc:	4a15      	ldr	r2, [pc, #84]	; (8003a54 <UART_SetConfig+0x118>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a08:	4419      	add	r1, r3
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	009a      	lsls	r2, r3, #2
 8003a14:	441a      	add	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a20:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <UART_SetConfig+0x118>)
 8003a22:	fba3 0302 	umull	r0, r3, r3, r2
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	2064      	movs	r0, #100	; 0x64
 8003a2a:	fb00 f303 	mul.w	r3, r0, r3
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	3332      	adds	r3, #50	; 0x32
 8003a34:	4a07      	ldr	r2, [pc, #28]	; (8003a54 <UART_SetConfig+0x118>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	f003 020f 	and.w	r2, r3, #15
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	440a      	add	r2, r1
 8003a46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40013800 	.word	0x40013800
 8003a54:	51eb851f 	.word	0x51eb851f

08003a58 <__errno>:
 8003a58:	4b01      	ldr	r3, [pc, #4]	; (8003a60 <__errno+0x8>)
 8003a5a:	6818      	ldr	r0, [r3, #0]
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	2000001c 	.word	0x2000001c

08003a64 <__libc_init_array>:
 8003a64:	b570      	push	{r4, r5, r6, lr}
 8003a66:	2500      	movs	r5, #0
 8003a68:	4e0c      	ldr	r6, [pc, #48]	; (8003a9c <__libc_init_array+0x38>)
 8003a6a:	4c0d      	ldr	r4, [pc, #52]	; (8003aa0 <__libc_init_array+0x3c>)
 8003a6c:	1ba4      	subs	r4, r4, r6
 8003a6e:	10a4      	asrs	r4, r4, #2
 8003a70:	42a5      	cmp	r5, r4
 8003a72:	d109      	bne.n	8003a88 <__libc_init_array+0x24>
 8003a74:	f002 f85e 	bl	8005b34 <_init>
 8003a78:	2500      	movs	r5, #0
 8003a7a:	4e0a      	ldr	r6, [pc, #40]	; (8003aa4 <__libc_init_array+0x40>)
 8003a7c:	4c0a      	ldr	r4, [pc, #40]	; (8003aa8 <__libc_init_array+0x44>)
 8003a7e:	1ba4      	subs	r4, r4, r6
 8003a80:	10a4      	asrs	r4, r4, #2
 8003a82:	42a5      	cmp	r5, r4
 8003a84:	d105      	bne.n	8003a92 <__libc_init_array+0x2e>
 8003a86:	bd70      	pop	{r4, r5, r6, pc}
 8003a88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a8c:	4798      	blx	r3
 8003a8e:	3501      	adds	r5, #1
 8003a90:	e7ee      	b.n	8003a70 <__libc_init_array+0xc>
 8003a92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a96:	4798      	blx	r3
 8003a98:	3501      	adds	r5, #1
 8003a9a:	e7f2      	b.n	8003a82 <__libc_init_array+0x1e>
 8003a9c:	08005e00 	.word	0x08005e00
 8003aa0:	08005e00 	.word	0x08005e00
 8003aa4:	08005e00 	.word	0x08005e00
 8003aa8:	08005e04 	.word	0x08005e04

08003aac <memset>:
 8003aac:	4603      	mov	r3, r0
 8003aae:	4402      	add	r2, r0
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d100      	bne.n	8003ab6 <memset+0xa>
 8003ab4:	4770      	bx	lr
 8003ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aba:	e7f9      	b.n	8003ab0 <memset+0x4>

08003abc <__cvt>:
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac2:	461e      	mov	r6, r3
 8003ac4:	bfbb      	ittet	lt
 8003ac6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003aca:	461e      	movlt	r6, r3
 8003acc:	2300      	movge	r3, #0
 8003ace:	232d      	movlt	r3, #45	; 0x2d
 8003ad0:	b088      	sub	sp, #32
 8003ad2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003ad4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003ad8:	f027 0720 	bic.w	r7, r7, #32
 8003adc:	2f46      	cmp	r7, #70	; 0x46
 8003ade:	4614      	mov	r4, r2
 8003ae0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003ae2:	700b      	strb	r3, [r1, #0]
 8003ae4:	d004      	beq.n	8003af0 <__cvt+0x34>
 8003ae6:	2f45      	cmp	r7, #69	; 0x45
 8003ae8:	d100      	bne.n	8003aec <__cvt+0x30>
 8003aea:	3501      	adds	r5, #1
 8003aec:	2302      	movs	r3, #2
 8003aee:	e000      	b.n	8003af2 <__cvt+0x36>
 8003af0:	2303      	movs	r3, #3
 8003af2:	aa07      	add	r2, sp, #28
 8003af4:	9204      	str	r2, [sp, #16]
 8003af6:	aa06      	add	r2, sp, #24
 8003af8:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003afc:	e9cd 3500 	strd	r3, r5, [sp]
 8003b00:	4622      	mov	r2, r4
 8003b02:	4633      	mov	r3, r6
 8003b04:	f000 fcd8 	bl	80044b8 <_dtoa_r>
 8003b08:	2f47      	cmp	r7, #71	; 0x47
 8003b0a:	4680      	mov	r8, r0
 8003b0c:	d102      	bne.n	8003b14 <__cvt+0x58>
 8003b0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003b10:	07db      	lsls	r3, r3, #31
 8003b12:	d526      	bpl.n	8003b62 <__cvt+0xa6>
 8003b14:	2f46      	cmp	r7, #70	; 0x46
 8003b16:	eb08 0905 	add.w	r9, r8, r5
 8003b1a:	d111      	bne.n	8003b40 <__cvt+0x84>
 8003b1c:	f898 3000 	ldrb.w	r3, [r8]
 8003b20:	2b30      	cmp	r3, #48	; 0x30
 8003b22:	d10a      	bne.n	8003b3a <__cvt+0x7e>
 8003b24:	2200      	movs	r2, #0
 8003b26:	2300      	movs	r3, #0
 8003b28:	4620      	mov	r0, r4
 8003b2a:	4631      	mov	r1, r6
 8003b2c:	f7fc ff3c 	bl	80009a8 <__aeabi_dcmpeq>
 8003b30:	b918      	cbnz	r0, 8003b3a <__cvt+0x7e>
 8003b32:	f1c5 0501 	rsb	r5, r5, #1
 8003b36:	f8ca 5000 	str.w	r5, [sl]
 8003b3a:	f8da 3000 	ldr.w	r3, [sl]
 8003b3e:	4499      	add	r9, r3
 8003b40:	2200      	movs	r2, #0
 8003b42:	2300      	movs	r3, #0
 8003b44:	4620      	mov	r0, r4
 8003b46:	4631      	mov	r1, r6
 8003b48:	f7fc ff2e 	bl	80009a8 <__aeabi_dcmpeq>
 8003b4c:	b938      	cbnz	r0, 8003b5e <__cvt+0xa2>
 8003b4e:	2230      	movs	r2, #48	; 0x30
 8003b50:	9b07      	ldr	r3, [sp, #28]
 8003b52:	454b      	cmp	r3, r9
 8003b54:	d205      	bcs.n	8003b62 <__cvt+0xa6>
 8003b56:	1c59      	adds	r1, r3, #1
 8003b58:	9107      	str	r1, [sp, #28]
 8003b5a:	701a      	strb	r2, [r3, #0]
 8003b5c:	e7f8      	b.n	8003b50 <__cvt+0x94>
 8003b5e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003b62:	4640      	mov	r0, r8
 8003b64:	9b07      	ldr	r3, [sp, #28]
 8003b66:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003b68:	eba3 0308 	sub.w	r3, r3, r8
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	b008      	add	sp, #32
 8003b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003b74 <__exponent>:
 8003b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b76:	2900      	cmp	r1, #0
 8003b78:	bfb4      	ite	lt
 8003b7a:	232d      	movlt	r3, #45	; 0x2d
 8003b7c:	232b      	movge	r3, #43	; 0x2b
 8003b7e:	4604      	mov	r4, r0
 8003b80:	bfb8      	it	lt
 8003b82:	4249      	neglt	r1, r1
 8003b84:	2909      	cmp	r1, #9
 8003b86:	f804 2b02 	strb.w	r2, [r4], #2
 8003b8a:	7043      	strb	r3, [r0, #1]
 8003b8c:	dd21      	ble.n	8003bd2 <__exponent+0x5e>
 8003b8e:	f10d 0307 	add.w	r3, sp, #7
 8003b92:	461f      	mov	r7, r3
 8003b94:	260a      	movs	r6, #10
 8003b96:	fb91 f5f6 	sdiv	r5, r1, r6
 8003b9a:	fb06 1115 	mls	r1, r6, r5, r1
 8003b9e:	2d09      	cmp	r5, #9
 8003ba0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003ba4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003ba8:	f103 32ff 	add.w	r2, r3, #4294967295
 8003bac:	4629      	mov	r1, r5
 8003bae:	dc09      	bgt.n	8003bc4 <__exponent+0x50>
 8003bb0:	3130      	adds	r1, #48	; 0x30
 8003bb2:	3b02      	subs	r3, #2
 8003bb4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003bb8:	42bb      	cmp	r3, r7
 8003bba:	4622      	mov	r2, r4
 8003bbc:	d304      	bcc.n	8003bc8 <__exponent+0x54>
 8003bbe:	1a10      	subs	r0, r2, r0
 8003bc0:	b003      	add	sp, #12
 8003bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	e7e6      	b.n	8003b96 <__exponent+0x22>
 8003bc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bcc:	f804 2b01 	strb.w	r2, [r4], #1
 8003bd0:	e7f2      	b.n	8003bb8 <__exponent+0x44>
 8003bd2:	2330      	movs	r3, #48	; 0x30
 8003bd4:	4419      	add	r1, r3
 8003bd6:	7083      	strb	r3, [r0, #2]
 8003bd8:	1d02      	adds	r2, r0, #4
 8003bda:	70c1      	strb	r1, [r0, #3]
 8003bdc:	e7ef      	b.n	8003bbe <__exponent+0x4a>
	...

08003be0 <_printf_float>:
 8003be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be4:	b091      	sub	sp, #68	; 0x44
 8003be6:	460c      	mov	r4, r1
 8003be8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003bea:	4693      	mov	fp, r2
 8003bec:	461e      	mov	r6, r3
 8003bee:	4605      	mov	r5, r0
 8003bf0:	f001 fa16 	bl	8005020 <_localeconv_r>
 8003bf4:	6803      	ldr	r3, [r0, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8003bfa:	f7fc faa9 	bl	8000150 <strlen>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	930e      	str	r3, [sp, #56]	; 0x38
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	900a      	str	r0, [sp, #40]	; 0x28
 8003c06:	3307      	adds	r3, #7
 8003c08:	f023 0307 	bic.w	r3, r3, #7
 8003c0c:	f103 0208 	add.w	r2, r3, #8
 8003c10:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003c14:	f8d4 a000 	ldr.w	sl, [r4]
 8003c18:	603a      	str	r2, [r7, #0]
 8003c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003c22:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8003c26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003c2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c30:	4ba6      	ldr	r3, [pc, #664]	; (8003ecc <_printf_float+0x2ec>)
 8003c32:	4638      	mov	r0, r7
 8003c34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c36:	f7fc fee9 	bl	8000a0c <__aeabi_dcmpun>
 8003c3a:	bb68      	cbnz	r0, 8003c98 <_printf_float+0xb8>
 8003c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c40:	4ba2      	ldr	r3, [pc, #648]	; (8003ecc <_printf_float+0x2ec>)
 8003c42:	4638      	mov	r0, r7
 8003c44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c46:	f7fc fec3 	bl	80009d0 <__aeabi_dcmple>
 8003c4a:	bb28      	cbnz	r0, 8003c98 <_printf_float+0xb8>
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	2300      	movs	r3, #0
 8003c50:	4638      	mov	r0, r7
 8003c52:	4649      	mov	r1, r9
 8003c54:	f7fc feb2 	bl	80009bc <__aeabi_dcmplt>
 8003c58:	b110      	cbz	r0, 8003c60 <_printf_float+0x80>
 8003c5a:	232d      	movs	r3, #45	; 0x2d
 8003c5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c60:	4f9b      	ldr	r7, [pc, #620]	; (8003ed0 <_printf_float+0x2f0>)
 8003c62:	4b9c      	ldr	r3, [pc, #624]	; (8003ed4 <_printf_float+0x2f4>)
 8003c64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003c68:	bf98      	it	ls
 8003c6a:	461f      	movls	r7, r3
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	f04f 0900 	mov.w	r9, #0
 8003c72:	6123      	str	r3, [r4, #16]
 8003c74:	f02a 0304 	bic.w	r3, sl, #4
 8003c78:	6023      	str	r3, [r4, #0]
 8003c7a:	9600      	str	r6, [sp, #0]
 8003c7c:	465b      	mov	r3, fp
 8003c7e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003c80:	4621      	mov	r1, r4
 8003c82:	4628      	mov	r0, r5
 8003c84:	f000 f9e2 	bl	800404c <_printf_common>
 8003c88:	3001      	adds	r0, #1
 8003c8a:	f040 8090 	bne.w	8003dae <_printf_float+0x1ce>
 8003c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c92:	b011      	add	sp, #68	; 0x44
 8003c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c98:	463a      	mov	r2, r7
 8003c9a:	464b      	mov	r3, r9
 8003c9c:	4638      	mov	r0, r7
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	f7fc feb4 	bl	8000a0c <__aeabi_dcmpun>
 8003ca4:	b110      	cbz	r0, 8003cac <_printf_float+0xcc>
 8003ca6:	4f8c      	ldr	r7, [pc, #560]	; (8003ed8 <_printf_float+0x2f8>)
 8003ca8:	4b8c      	ldr	r3, [pc, #560]	; (8003edc <_printf_float+0x2fc>)
 8003caa:	e7db      	b.n	8003c64 <_printf_float+0x84>
 8003cac:	6863      	ldr	r3, [r4, #4]
 8003cae:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8003cb2:	1c59      	adds	r1, r3, #1
 8003cb4:	a80d      	add	r0, sp, #52	; 0x34
 8003cb6:	a90e      	add	r1, sp, #56	; 0x38
 8003cb8:	d140      	bne.n	8003d3c <_printf_float+0x15c>
 8003cba:	2306      	movs	r3, #6
 8003cbc:	6063      	str	r3, [r4, #4]
 8003cbe:	f04f 0c00 	mov.w	ip, #0
 8003cc2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8003cc6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003cca:	6863      	ldr	r3, [r4, #4]
 8003ccc:	6022      	str	r2, [r4, #0]
 8003cce:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	463a      	mov	r2, r7
 8003cd6:	464b      	mov	r3, r9
 8003cd8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003cdc:	4628      	mov	r0, r5
 8003cde:	f7ff feed 	bl	8003abc <__cvt>
 8003ce2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8003ce6:	2b47      	cmp	r3, #71	; 0x47
 8003ce8:	4607      	mov	r7, r0
 8003cea:	d109      	bne.n	8003d00 <_printf_float+0x120>
 8003cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cee:	1cd8      	adds	r0, r3, #3
 8003cf0:	db02      	blt.n	8003cf8 <_printf_float+0x118>
 8003cf2:	6862      	ldr	r2, [r4, #4]
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	dd47      	ble.n	8003d88 <_printf_float+0x1a8>
 8003cf8:	f1a8 0802 	sub.w	r8, r8, #2
 8003cfc:	fa5f f888 	uxtb.w	r8, r8
 8003d00:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003d04:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003d06:	d824      	bhi.n	8003d52 <_printf_float+0x172>
 8003d08:	3901      	subs	r1, #1
 8003d0a:	4642      	mov	r2, r8
 8003d0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003d10:	910d      	str	r1, [sp, #52]	; 0x34
 8003d12:	f7ff ff2f 	bl	8003b74 <__exponent>
 8003d16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d18:	4681      	mov	r9, r0
 8003d1a:	1813      	adds	r3, r2, r0
 8003d1c:	2a01      	cmp	r2, #1
 8003d1e:	6123      	str	r3, [r4, #16]
 8003d20:	dc02      	bgt.n	8003d28 <_printf_float+0x148>
 8003d22:	6822      	ldr	r2, [r4, #0]
 8003d24:	07d1      	lsls	r1, r2, #31
 8003d26:	d501      	bpl.n	8003d2c <_printf_float+0x14c>
 8003d28:	3301      	adds	r3, #1
 8003d2a:	6123      	str	r3, [r4, #16]
 8003d2c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0a2      	beq.n	8003c7a <_printf_float+0x9a>
 8003d34:	232d      	movs	r3, #45	; 0x2d
 8003d36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d3a:	e79e      	b.n	8003c7a <_printf_float+0x9a>
 8003d3c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003d40:	f000 816e 	beq.w	8004020 <_printf_float+0x440>
 8003d44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003d48:	d1b9      	bne.n	8003cbe <_printf_float+0xde>
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1b7      	bne.n	8003cbe <_printf_float+0xde>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e7b4      	b.n	8003cbc <_printf_float+0xdc>
 8003d52:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003d56:	d119      	bne.n	8003d8c <_printf_float+0x1ac>
 8003d58:	2900      	cmp	r1, #0
 8003d5a:	6863      	ldr	r3, [r4, #4]
 8003d5c:	dd0c      	ble.n	8003d78 <_printf_float+0x198>
 8003d5e:	6121      	str	r1, [r4, #16]
 8003d60:	b913      	cbnz	r3, 8003d68 <_printf_float+0x188>
 8003d62:	6822      	ldr	r2, [r4, #0]
 8003d64:	07d2      	lsls	r2, r2, #31
 8003d66:	d502      	bpl.n	8003d6e <_printf_float+0x18e>
 8003d68:	3301      	adds	r3, #1
 8003d6a:	440b      	add	r3, r1
 8003d6c:	6123      	str	r3, [r4, #16]
 8003d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d70:	f04f 0900 	mov.w	r9, #0
 8003d74:	65a3      	str	r3, [r4, #88]	; 0x58
 8003d76:	e7d9      	b.n	8003d2c <_printf_float+0x14c>
 8003d78:	b913      	cbnz	r3, 8003d80 <_printf_float+0x1a0>
 8003d7a:	6822      	ldr	r2, [r4, #0]
 8003d7c:	07d0      	lsls	r0, r2, #31
 8003d7e:	d501      	bpl.n	8003d84 <_printf_float+0x1a4>
 8003d80:	3302      	adds	r3, #2
 8003d82:	e7f3      	b.n	8003d6c <_printf_float+0x18c>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e7f1      	b.n	8003d6c <_printf_float+0x18c>
 8003d88:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003d8c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003d90:	4293      	cmp	r3, r2
 8003d92:	db05      	blt.n	8003da0 <_printf_float+0x1c0>
 8003d94:	6822      	ldr	r2, [r4, #0]
 8003d96:	6123      	str	r3, [r4, #16]
 8003d98:	07d1      	lsls	r1, r2, #31
 8003d9a:	d5e8      	bpl.n	8003d6e <_printf_float+0x18e>
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	e7e5      	b.n	8003d6c <_printf_float+0x18c>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	bfcc      	ite	gt
 8003da4:	2301      	movgt	r3, #1
 8003da6:	f1c3 0302 	rsble	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	e7de      	b.n	8003d6c <_printf_float+0x18c>
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	055a      	lsls	r2, r3, #21
 8003db2:	d407      	bmi.n	8003dc4 <_printf_float+0x1e4>
 8003db4:	6923      	ldr	r3, [r4, #16]
 8003db6:	463a      	mov	r2, r7
 8003db8:	4659      	mov	r1, fp
 8003dba:	4628      	mov	r0, r5
 8003dbc:	47b0      	blx	r6
 8003dbe:	3001      	adds	r0, #1
 8003dc0:	d129      	bne.n	8003e16 <_printf_float+0x236>
 8003dc2:	e764      	b.n	8003c8e <_printf_float+0xae>
 8003dc4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003dc8:	f240 80d7 	bls.w	8003f7a <_printf_float+0x39a>
 8003dcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f7fc fde8 	bl	80009a8 <__aeabi_dcmpeq>
 8003dd8:	b388      	cbz	r0, 8003e3e <_printf_float+0x25e>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	4a40      	ldr	r2, [pc, #256]	; (8003ee0 <_printf_float+0x300>)
 8003dde:	4659      	mov	r1, fp
 8003de0:	4628      	mov	r0, r5
 8003de2:	47b0      	blx	r6
 8003de4:	3001      	adds	r0, #1
 8003de6:	f43f af52 	beq.w	8003c8e <_printf_float+0xae>
 8003dea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003dee:	429a      	cmp	r2, r3
 8003df0:	db02      	blt.n	8003df8 <_printf_float+0x218>
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	07d8      	lsls	r0, r3, #31
 8003df6:	d50e      	bpl.n	8003e16 <_printf_float+0x236>
 8003df8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003dfc:	4659      	mov	r1, fp
 8003dfe:	4628      	mov	r0, r5
 8003e00:	47b0      	blx	r6
 8003e02:	3001      	adds	r0, #1
 8003e04:	f43f af43 	beq.w	8003c8e <_printf_float+0xae>
 8003e08:	2700      	movs	r7, #0
 8003e0a:	f104 081a 	add.w	r8, r4, #26
 8003e0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e10:	3b01      	subs	r3, #1
 8003e12:	42bb      	cmp	r3, r7
 8003e14:	dc09      	bgt.n	8003e2a <_printf_float+0x24a>
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	079f      	lsls	r7, r3, #30
 8003e1a:	f100 80fd 	bmi.w	8004018 <_printf_float+0x438>
 8003e1e:	68e0      	ldr	r0, [r4, #12]
 8003e20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003e22:	4298      	cmp	r0, r3
 8003e24:	bfb8      	it	lt
 8003e26:	4618      	movlt	r0, r3
 8003e28:	e733      	b.n	8003c92 <_printf_float+0xb2>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	4642      	mov	r2, r8
 8003e2e:	4659      	mov	r1, fp
 8003e30:	4628      	mov	r0, r5
 8003e32:	47b0      	blx	r6
 8003e34:	3001      	adds	r0, #1
 8003e36:	f43f af2a 	beq.w	8003c8e <_printf_float+0xae>
 8003e3a:	3701      	adds	r7, #1
 8003e3c:	e7e7      	b.n	8003e0e <_printf_float+0x22e>
 8003e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	dc2b      	bgt.n	8003e9c <_printf_float+0x2bc>
 8003e44:	2301      	movs	r3, #1
 8003e46:	4a26      	ldr	r2, [pc, #152]	; (8003ee0 <_printf_float+0x300>)
 8003e48:	4659      	mov	r1, fp
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	47b0      	blx	r6
 8003e4e:	3001      	adds	r0, #1
 8003e50:	f43f af1d 	beq.w	8003c8e <_printf_float+0xae>
 8003e54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e56:	b923      	cbnz	r3, 8003e62 <_printf_float+0x282>
 8003e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e5a:	b913      	cbnz	r3, 8003e62 <_printf_float+0x282>
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	07d9      	lsls	r1, r3, #31
 8003e60:	d5d9      	bpl.n	8003e16 <_printf_float+0x236>
 8003e62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e66:	4659      	mov	r1, fp
 8003e68:	4628      	mov	r0, r5
 8003e6a:	47b0      	blx	r6
 8003e6c:	3001      	adds	r0, #1
 8003e6e:	f43f af0e 	beq.w	8003c8e <_printf_float+0xae>
 8003e72:	f04f 0800 	mov.w	r8, #0
 8003e76:	f104 091a 	add.w	r9, r4, #26
 8003e7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e7c:	425b      	negs	r3, r3
 8003e7e:	4543      	cmp	r3, r8
 8003e80:	dc01      	bgt.n	8003e86 <_printf_float+0x2a6>
 8003e82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e84:	e797      	b.n	8003db6 <_printf_float+0x1d6>
 8003e86:	2301      	movs	r3, #1
 8003e88:	464a      	mov	r2, r9
 8003e8a:	4659      	mov	r1, fp
 8003e8c:	4628      	mov	r0, r5
 8003e8e:	47b0      	blx	r6
 8003e90:	3001      	adds	r0, #1
 8003e92:	f43f aefc 	beq.w	8003c8e <_printf_float+0xae>
 8003e96:	f108 0801 	add.w	r8, r8, #1
 8003e9a:	e7ee      	b.n	8003e7a <_printf_float+0x29a>
 8003e9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	bfa8      	it	ge
 8003ea4:	461a      	movge	r2, r3
 8003ea6:	2a00      	cmp	r2, #0
 8003ea8:	4690      	mov	r8, r2
 8003eaa:	dd07      	ble.n	8003ebc <_printf_float+0x2dc>
 8003eac:	4613      	mov	r3, r2
 8003eae:	4659      	mov	r1, fp
 8003eb0:	463a      	mov	r2, r7
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	47b0      	blx	r6
 8003eb6:	3001      	adds	r0, #1
 8003eb8:	f43f aee9 	beq.w	8003c8e <_printf_float+0xae>
 8003ebc:	f104 031a 	add.w	r3, r4, #26
 8003ec0:	f04f 0a00 	mov.w	sl, #0
 8003ec4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003ec8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003eca:	e015      	b.n	8003ef8 <_printf_float+0x318>
 8003ecc:	7fefffff 	.word	0x7fefffff
 8003ed0:	08005ba4 	.word	0x08005ba4
 8003ed4:	08005ba0 	.word	0x08005ba0
 8003ed8:	08005bac 	.word	0x08005bac
 8003edc:	08005ba8 	.word	0x08005ba8
 8003ee0:	08005bb0 	.word	0x08005bb0
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003ee8:	4659      	mov	r1, fp
 8003eea:	4628      	mov	r0, r5
 8003eec:	47b0      	blx	r6
 8003eee:	3001      	adds	r0, #1
 8003ef0:	f43f aecd 	beq.w	8003c8e <_printf_float+0xae>
 8003ef4:	f10a 0a01 	add.w	sl, sl, #1
 8003ef8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003efc:	eba9 0308 	sub.w	r3, r9, r8
 8003f00:	4553      	cmp	r3, sl
 8003f02:	dcef      	bgt.n	8003ee4 <_printf_float+0x304>
 8003f04:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	444f      	add	r7, r9
 8003f0c:	db14      	blt.n	8003f38 <_printf_float+0x358>
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	07da      	lsls	r2, r3, #31
 8003f12:	d411      	bmi.n	8003f38 <_printf_float+0x358>
 8003f14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f16:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003f18:	eba3 0209 	sub.w	r2, r3, r9
 8003f1c:	eba3 0901 	sub.w	r9, r3, r1
 8003f20:	4591      	cmp	r9, r2
 8003f22:	bfa8      	it	ge
 8003f24:	4691      	movge	r9, r2
 8003f26:	f1b9 0f00 	cmp.w	r9, #0
 8003f2a:	dc0d      	bgt.n	8003f48 <_printf_float+0x368>
 8003f2c:	2700      	movs	r7, #0
 8003f2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f32:	f104 081a 	add.w	r8, r4, #26
 8003f36:	e018      	b.n	8003f6a <_printf_float+0x38a>
 8003f38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f3c:	4659      	mov	r1, fp
 8003f3e:	4628      	mov	r0, r5
 8003f40:	47b0      	blx	r6
 8003f42:	3001      	adds	r0, #1
 8003f44:	d1e6      	bne.n	8003f14 <_printf_float+0x334>
 8003f46:	e6a2      	b.n	8003c8e <_printf_float+0xae>
 8003f48:	464b      	mov	r3, r9
 8003f4a:	463a      	mov	r2, r7
 8003f4c:	4659      	mov	r1, fp
 8003f4e:	4628      	mov	r0, r5
 8003f50:	47b0      	blx	r6
 8003f52:	3001      	adds	r0, #1
 8003f54:	d1ea      	bne.n	8003f2c <_printf_float+0x34c>
 8003f56:	e69a      	b.n	8003c8e <_printf_float+0xae>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	4642      	mov	r2, r8
 8003f5c:	4659      	mov	r1, fp
 8003f5e:	4628      	mov	r0, r5
 8003f60:	47b0      	blx	r6
 8003f62:	3001      	adds	r0, #1
 8003f64:	f43f ae93 	beq.w	8003c8e <_printf_float+0xae>
 8003f68:	3701      	adds	r7, #1
 8003f6a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003f6e:	1a9b      	subs	r3, r3, r2
 8003f70:	eba3 0309 	sub.w	r3, r3, r9
 8003f74:	42bb      	cmp	r3, r7
 8003f76:	dcef      	bgt.n	8003f58 <_printf_float+0x378>
 8003f78:	e74d      	b.n	8003e16 <_printf_float+0x236>
 8003f7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f7c:	2a01      	cmp	r2, #1
 8003f7e:	dc01      	bgt.n	8003f84 <_printf_float+0x3a4>
 8003f80:	07db      	lsls	r3, r3, #31
 8003f82:	d538      	bpl.n	8003ff6 <_printf_float+0x416>
 8003f84:	2301      	movs	r3, #1
 8003f86:	463a      	mov	r2, r7
 8003f88:	4659      	mov	r1, fp
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	47b0      	blx	r6
 8003f8e:	3001      	adds	r0, #1
 8003f90:	f43f ae7d 	beq.w	8003c8e <_printf_float+0xae>
 8003f94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f98:	4659      	mov	r1, fp
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	47b0      	blx	r6
 8003f9e:	3001      	adds	r0, #1
 8003fa0:	f107 0701 	add.w	r7, r7, #1
 8003fa4:	f43f ae73 	beq.w	8003c8e <_printf_float+0xae>
 8003fa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003fac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f103 38ff 	add.w	r8, r3, #4294967295
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f7fc fcf7 	bl	80009a8 <__aeabi_dcmpeq>
 8003fba:	b9c0      	cbnz	r0, 8003fee <_printf_float+0x40e>
 8003fbc:	4643      	mov	r3, r8
 8003fbe:	463a      	mov	r2, r7
 8003fc0:	4659      	mov	r1, fp
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	47b0      	blx	r6
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	d10d      	bne.n	8003fe6 <_printf_float+0x406>
 8003fca:	e660      	b.n	8003c8e <_printf_float+0xae>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	4642      	mov	r2, r8
 8003fd0:	4659      	mov	r1, fp
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	47b0      	blx	r6
 8003fd6:	3001      	adds	r0, #1
 8003fd8:	f43f ae59 	beq.w	8003c8e <_printf_float+0xae>
 8003fdc:	3701      	adds	r7, #1
 8003fde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	42bb      	cmp	r3, r7
 8003fe4:	dcf2      	bgt.n	8003fcc <_printf_float+0x3ec>
 8003fe6:	464b      	mov	r3, r9
 8003fe8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003fec:	e6e4      	b.n	8003db8 <_printf_float+0x1d8>
 8003fee:	2700      	movs	r7, #0
 8003ff0:	f104 081a 	add.w	r8, r4, #26
 8003ff4:	e7f3      	b.n	8003fde <_printf_float+0x3fe>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e7e1      	b.n	8003fbe <_printf_float+0x3de>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	4642      	mov	r2, r8
 8003ffe:	4659      	mov	r1, fp
 8004000:	4628      	mov	r0, r5
 8004002:	47b0      	blx	r6
 8004004:	3001      	adds	r0, #1
 8004006:	f43f ae42 	beq.w	8003c8e <_printf_float+0xae>
 800400a:	3701      	adds	r7, #1
 800400c:	68e3      	ldr	r3, [r4, #12]
 800400e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004010:	1a9b      	subs	r3, r3, r2
 8004012:	42bb      	cmp	r3, r7
 8004014:	dcf1      	bgt.n	8003ffa <_printf_float+0x41a>
 8004016:	e702      	b.n	8003e1e <_printf_float+0x23e>
 8004018:	2700      	movs	r7, #0
 800401a:	f104 0819 	add.w	r8, r4, #25
 800401e:	e7f5      	b.n	800400c <_printf_float+0x42c>
 8004020:	2b00      	cmp	r3, #0
 8004022:	f43f ae94 	beq.w	8003d4e <_printf_float+0x16e>
 8004026:	f04f 0c00 	mov.w	ip, #0
 800402a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800402e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004032:	6022      	str	r2, [r4, #0]
 8004034:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004038:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	463a      	mov	r2, r7
 8004040:	464b      	mov	r3, r9
 8004042:	4628      	mov	r0, r5
 8004044:	f7ff fd3a 	bl	8003abc <__cvt>
 8004048:	4607      	mov	r7, r0
 800404a:	e64f      	b.n	8003cec <_printf_float+0x10c>

0800404c <_printf_common>:
 800404c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004050:	4691      	mov	r9, r2
 8004052:	461f      	mov	r7, r3
 8004054:	688a      	ldr	r2, [r1, #8]
 8004056:	690b      	ldr	r3, [r1, #16]
 8004058:	4606      	mov	r6, r0
 800405a:	4293      	cmp	r3, r2
 800405c:	bfb8      	it	lt
 800405e:	4613      	movlt	r3, r2
 8004060:	f8c9 3000 	str.w	r3, [r9]
 8004064:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004068:	460c      	mov	r4, r1
 800406a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800406e:	b112      	cbz	r2, 8004076 <_printf_common+0x2a>
 8004070:	3301      	adds	r3, #1
 8004072:	f8c9 3000 	str.w	r3, [r9]
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	0699      	lsls	r1, r3, #26
 800407a:	bf42      	ittt	mi
 800407c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004080:	3302      	addmi	r3, #2
 8004082:	f8c9 3000 	strmi.w	r3, [r9]
 8004086:	6825      	ldr	r5, [r4, #0]
 8004088:	f015 0506 	ands.w	r5, r5, #6
 800408c:	d107      	bne.n	800409e <_printf_common+0x52>
 800408e:	f104 0a19 	add.w	sl, r4, #25
 8004092:	68e3      	ldr	r3, [r4, #12]
 8004094:	f8d9 2000 	ldr.w	r2, [r9]
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	42ab      	cmp	r3, r5
 800409c:	dc29      	bgt.n	80040f2 <_printf_common+0xa6>
 800409e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80040a2:	6822      	ldr	r2, [r4, #0]
 80040a4:	3300      	adds	r3, #0
 80040a6:	bf18      	it	ne
 80040a8:	2301      	movne	r3, #1
 80040aa:	0692      	lsls	r2, r2, #26
 80040ac:	d42e      	bmi.n	800410c <_printf_common+0xc0>
 80040ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040b2:	4639      	mov	r1, r7
 80040b4:	4630      	mov	r0, r6
 80040b6:	47c0      	blx	r8
 80040b8:	3001      	adds	r0, #1
 80040ba:	d021      	beq.n	8004100 <_printf_common+0xb4>
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	68e5      	ldr	r5, [r4, #12]
 80040c0:	f003 0306 	and.w	r3, r3, #6
 80040c4:	2b04      	cmp	r3, #4
 80040c6:	bf18      	it	ne
 80040c8:	2500      	movne	r5, #0
 80040ca:	f8d9 2000 	ldr.w	r2, [r9]
 80040ce:	f04f 0900 	mov.w	r9, #0
 80040d2:	bf08      	it	eq
 80040d4:	1aad      	subeq	r5, r5, r2
 80040d6:	68a3      	ldr	r3, [r4, #8]
 80040d8:	6922      	ldr	r2, [r4, #16]
 80040da:	bf08      	it	eq
 80040dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040e0:	4293      	cmp	r3, r2
 80040e2:	bfc4      	itt	gt
 80040e4:	1a9b      	subgt	r3, r3, r2
 80040e6:	18ed      	addgt	r5, r5, r3
 80040e8:	341a      	adds	r4, #26
 80040ea:	454d      	cmp	r5, r9
 80040ec:	d11a      	bne.n	8004124 <_printf_common+0xd8>
 80040ee:	2000      	movs	r0, #0
 80040f0:	e008      	b.n	8004104 <_printf_common+0xb8>
 80040f2:	2301      	movs	r3, #1
 80040f4:	4652      	mov	r2, sl
 80040f6:	4639      	mov	r1, r7
 80040f8:	4630      	mov	r0, r6
 80040fa:	47c0      	blx	r8
 80040fc:	3001      	adds	r0, #1
 80040fe:	d103      	bne.n	8004108 <_printf_common+0xbc>
 8004100:	f04f 30ff 	mov.w	r0, #4294967295
 8004104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004108:	3501      	adds	r5, #1
 800410a:	e7c2      	b.n	8004092 <_printf_common+0x46>
 800410c:	2030      	movs	r0, #48	; 0x30
 800410e:	18e1      	adds	r1, r4, r3
 8004110:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800411a:	4422      	add	r2, r4
 800411c:	3302      	adds	r3, #2
 800411e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004122:	e7c4      	b.n	80040ae <_printf_common+0x62>
 8004124:	2301      	movs	r3, #1
 8004126:	4622      	mov	r2, r4
 8004128:	4639      	mov	r1, r7
 800412a:	4630      	mov	r0, r6
 800412c:	47c0      	blx	r8
 800412e:	3001      	adds	r0, #1
 8004130:	d0e6      	beq.n	8004100 <_printf_common+0xb4>
 8004132:	f109 0901 	add.w	r9, r9, #1
 8004136:	e7d8      	b.n	80040ea <_printf_common+0x9e>

08004138 <_printf_i>:
 8004138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800413c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004140:	460c      	mov	r4, r1
 8004142:	7e09      	ldrb	r1, [r1, #24]
 8004144:	b085      	sub	sp, #20
 8004146:	296e      	cmp	r1, #110	; 0x6e
 8004148:	4617      	mov	r7, r2
 800414a:	4606      	mov	r6, r0
 800414c:	4698      	mov	r8, r3
 800414e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004150:	f000 80b3 	beq.w	80042ba <_printf_i+0x182>
 8004154:	d822      	bhi.n	800419c <_printf_i+0x64>
 8004156:	2963      	cmp	r1, #99	; 0x63
 8004158:	d036      	beq.n	80041c8 <_printf_i+0x90>
 800415a:	d80a      	bhi.n	8004172 <_printf_i+0x3a>
 800415c:	2900      	cmp	r1, #0
 800415e:	f000 80b9 	beq.w	80042d4 <_printf_i+0x19c>
 8004162:	2958      	cmp	r1, #88	; 0x58
 8004164:	f000 8083 	beq.w	800426e <_printf_i+0x136>
 8004168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800416c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004170:	e032      	b.n	80041d8 <_printf_i+0xa0>
 8004172:	2964      	cmp	r1, #100	; 0x64
 8004174:	d001      	beq.n	800417a <_printf_i+0x42>
 8004176:	2969      	cmp	r1, #105	; 0x69
 8004178:	d1f6      	bne.n	8004168 <_printf_i+0x30>
 800417a:	6820      	ldr	r0, [r4, #0]
 800417c:	6813      	ldr	r3, [r2, #0]
 800417e:	0605      	lsls	r5, r0, #24
 8004180:	f103 0104 	add.w	r1, r3, #4
 8004184:	d52a      	bpl.n	80041dc <_printf_i+0xa4>
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6011      	str	r1, [r2, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	da03      	bge.n	8004196 <_printf_i+0x5e>
 800418e:	222d      	movs	r2, #45	; 0x2d
 8004190:	425b      	negs	r3, r3
 8004192:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004196:	486f      	ldr	r0, [pc, #444]	; (8004354 <_printf_i+0x21c>)
 8004198:	220a      	movs	r2, #10
 800419a:	e039      	b.n	8004210 <_printf_i+0xd8>
 800419c:	2973      	cmp	r1, #115	; 0x73
 800419e:	f000 809d 	beq.w	80042dc <_printf_i+0x1a4>
 80041a2:	d808      	bhi.n	80041b6 <_printf_i+0x7e>
 80041a4:	296f      	cmp	r1, #111	; 0x6f
 80041a6:	d020      	beq.n	80041ea <_printf_i+0xb2>
 80041a8:	2970      	cmp	r1, #112	; 0x70
 80041aa:	d1dd      	bne.n	8004168 <_printf_i+0x30>
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	f043 0320 	orr.w	r3, r3, #32
 80041b2:	6023      	str	r3, [r4, #0]
 80041b4:	e003      	b.n	80041be <_printf_i+0x86>
 80041b6:	2975      	cmp	r1, #117	; 0x75
 80041b8:	d017      	beq.n	80041ea <_printf_i+0xb2>
 80041ba:	2978      	cmp	r1, #120	; 0x78
 80041bc:	d1d4      	bne.n	8004168 <_printf_i+0x30>
 80041be:	2378      	movs	r3, #120	; 0x78
 80041c0:	4865      	ldr	r0, [pc, #404]	; (8004358 <_printf_i+0x220>)
 80041c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041c6:	e055      	b.n	8004274 <_printf_i+0x13c>
 80041c8:	6813      	ldr	r3, [r2, #0]
 80041ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041ce:	1d19      	adds	r1, r3, #4
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6011      	str	r1, [r2, #0]
 80041d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041d8:	2301      	movs	r3, #1
 80041da:	e08c      	b.n	80042f6 <_printf_i+0x1be>
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041e2:	6011      	str	r1, [r2, #0]
 80041e4:	bf18      	it	ne
 80041e6:	b21b      	sxthne	r3, r3
 80041e8:	e7cf      	b.n	800418a <_printf_i+0x52>
 80041ea:	6813      	ldr	r3, [r2, #0]
 80041ec:	6825      	ldr	r5, [r4, #0]
 80041ee:	1d18      	adds	r0, r3, #4
 80041f0:	6010      	str	r0, [r2, #0]
 80041f2:	0628      	lsls	r0, r5, #24
 80041f4:	d501      	bpl.n	80041fa <_printf_i+0xc2>
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	e002      	b.n	8004200 <_printf_i+0xc8>
 80041fa:	0668      	lsls	r0, r5, #25
 80041fc:	d5fb      	bpl.n	80041f6 <_printf_i+0xbe>
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	296f      	cmp	r1, #111	; 0x6f
 8004202:	bf14      	ite	ne
 8004204:	220a      	movne	r2, #10
 8004206:	2208      	moveq	r2, #8
 8004208:	4852      	ldr	r0, [pc, #328]	; (8004354 <_printf_i+0x21c>)
 800420a:	2100      	movs	r1, #0
 800420c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004210:	6865      	ldr	r5, [r4, #4]
 8004212:	2d00      	cmp	r5, #0
 8004214:	60a5      	str	r5, [r4, #8]
 8004216:	f2c0 8095 	blt.w	8004344 <_printf_i+0x20c>
 800421a:	6821      	ldr	r1, [r4, #0]
 800421c:	f021 0104 	bic.w	r1, r1, #4
 8004220:	6021      	str	r1, [r4, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d13d      	bne.n	80042a2 <_printf_i+0x16a>
 8004226:	2d00      	cmp	r5, #0
 8004228:	f040 808e 	bne.w	8004348 <_printf_i+0x210>
 800422c:	4665      	mov	r5, ip
 800422e:	2a08      	cmp	r2, #8
 8004230:	d10b      	bne.n	800424a <_printf_i+0x112>
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	07db      	lsls	r3, r3, #31
 8004236:	d508      	bpl.n	800424a <_printf_i+0x112>
 8004238:	6923      	ldr	r3, [r4, #16]
 800423a:	6862      	ldr	r2, [r4, #4]
 800423c:	429a      	cmp	r2, r3
 800423e:	bfde      	ittt	le
 8004240:	2330      	movle	r3, #48	; 0x30
 8004242:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004246:	f105 35ff 	addle.w	r5, r5, #4294967295
 800424a:	ebac 0305 	sub.w	r3, ip, r5
 800424e:	6123      	str	r3, [r4, #16]
 8004250:	f8cd 8000 	str.w	r8, [sp]
 8004254:	463b      	mov	r3, r7
 8004256:	aa03      	add	r2, sp, #12
 8004258:	4621      	mov	r1, r4
 800425a:	4630      	mov	r0, r6
 800425c:	f7ff fef6 	bl	800404c <_printf_common>
 8004260:	3001      	adds	r0, #1
 8004262:	d14d      	bne.n	8004300 <_printf_i+0x1c8>
 8004264:	f04f 30ff 	mov.w	r0, #4294967295
 8004268:	b005      	add	sp, #20
 800426a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800426e:	4839      	ldr	r0, [pc, #228]	; (8004354 <_printf_i+0x21c>)
 8004270:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004274:	6813      	ldr	r3, [r2, #0]
 8004276:	6821      	ldr	r1, [r4, #0]
 8004278:	1d1d      	adds	r5, r3, #4
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6015      	str	r5, [r2, #0]
 800427e:	060a      	lsls	r2, r1, #24
 8004280:	d50b      	bpl.n	800429a <_printf_i+0x162>
 8004282:	07ca      	lsls	r2, r1, #31
 8004284:	bf44      	itt	mi
 8004286:	f041 0120 	orrmi.w	r1, r1, #32
 800428a:	6021      	strmi	r1, [r4, #0]
 800428c:	b91b      	cbnz	r3, 8004296 <_printf_i+0x15e>
 800428e:	6822      	ldr	r2, [r4, #0]
 8004290:	f022 0220 	bic.w	r2, r2, #32
 8004294:	6022      	str	r2, [r4, #0]
 8004296:	2210      	movs	r2, #16
 8004298:	e7b7      	b.n	800420a <_printf_i+0xd2>
 800429a:	064d      	lsls	r5, r1, #25
 800429c:	bf48      	it	mi
 800429e:	b29b      	uxthmi	r3, r3
 80042a0:	e7ef      	b.n	8004282 <_printf_i+0x14a>
 80042a2:	4665      	mov	r5, ip
 80042a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80042a8:	fb02 3311 	mls	r3, r2, r1, r3
 80042ac:	5cc3      	ldrb	r3, [r0, r3]
 80042ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80042b2:	460b      	mov	r3, r1
 80042b4:	2900      	cmp	r1, #0
 80042b6:	d1f5      	bne.n	80042a4 <_printf_i+0x16c>
 80042b8:	e7b9      	b.n	800422e <_printf_i+0xf6>
 80042ba:	6813      	ldr	r3, [r2, #0]
 80042bc:	6825      	ldr	r5, [r4, #0]
 80042be:	1d18      	adds	r0, r3, #4
 80042c0:	6961      	ldr	r1, [r4, #20]
 80042c2:	6010      	str	r0, [r2, #0]
 80042c4:	0628      	lsls	r0, r5, #24
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	d501      	bpl.n	80042ce <_printf_i+0x196>
 80042ca:	6019      	str	r1, [r3, #0]
 80042cc:	e002      	b.n	80042d4 <_printf_i+0x19c>
 80042ce:	066a      	lsls	r2, r5, #25
 80042d0:	d5fb      	bpl.n	80042ca <_printf_i+0x192>
 80042d2:	8019      	strh	r1, [r3, #0]
 80042d4:	2300      	movs	r3, #0
 80042d6:	4665      	mov	r5, ip
 80042d8:	6123      	str	r3, [r4, #16]
 80042da:	e7b9      	b.n	8004250 <_printf_i+0x118>
 80042dc:	6813      	ldr	r3, [r2, #0]
 80042de:	1d19      	adds	r1, r3, #4
 80042e0:	6011      	str	r1, [r2, #0]
 80042e2:	681d      	ldr	r5, [r3, #0]
 80042e4:	6862      	ldr	r2, [r4, #4]
 80042e6:	2100      	movs	r1, #0
 80042e8:	4628      	mov	r0, r5
 80042ea:	f000 feaf 	bl	800504c <memchr>
 80042ee:	b108      	cbz	r0, 80042f4 <_printf_i+0x1bc>
 80042f0:	1b40      	subs	r0, r0, r5
 80042f2:	6060      	str	r0, [r4, #4]
 80042f4:	6863      	ldr	r3, [r4, #4]
 80042f6:	6123      	str	r3, [r4, #16]
 80042f8:	2300      	movs	r3, #0
 80042fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042fe:	e7a7      	b.n	8004250 <_printf_i+0x118>
 8004300:	6923      	ldr	r3, [r4, #16]
 8004302:	462a      	mov	r2, r5
 8004304:	4639      	mov	r1, r7
 8004306:	4630      	mov	r0, r6
 8004308:	47c0      	blx	r8
 800430a:	3001      	adds	r0, #1
 800430c:	d0aa      	beq.n	8004264 <_printf_i+0x12c>
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	079b      	lsls	r3, r3, #30
 8004312:	d413      	bmi.n	800433c <_printf_i+0x204>
 8004314:	68e0      	ldr	r0, [r4, #12]
 8004316:	9b03      	ldr	r3, [sp, #12]
 8004318:	4298      	cmp	r0, r3
 800431a:	bfb8      	it	lt
 800431c:	4618      	movlt	r0, r3
 800431e:	e7a3      	b.n	8004268 <_printf_i+0x130>
 8004320:	2301      	movs	r3, #1
 8004322:	464a      	mov	r2, r9
 8004324:	4639      	mov	r1, r7
 8004326:	4630      	mov	r0, r6
 8004328:	47c0      	blx	r8
 800432a:	3001      	adds	r0, #1
 800432c:	d09a      	beq.n	8004264 <_printf_i+0x12c>
 800432e:	3501      	adds	r5, #1
 8004330:	68e3      	ldr	r3, [r4, #12]
 8004332:	9a03      	ldr	r2, [sp, #12]
 8004334:	1a9b      	subs	r3, r3, r2
 8004336:	42ab      	cmp	r3, r5
 8004338:	dcf2      	bgt.n	8004320 <_printf_i+0x1e8>
 800433a:	e7eb      	b.n	8004314 <_printf_i+0x1dc>
 800433c:	2500      	movs	r5, #0
 800433e:	f104 0919 	add.w	r9, r4, #25
 8004342:	e7f5      	b.n	8004330 <_printf_i+0x1f8>
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1ac      	bne.n	80042a2 <_printf_i+0x16a>
 8004348:	7803      	ldrb	r3, [r0, #0]
 800434a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800434e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004352:	e76c      	b.n	800422e <_printf_i+0xf6>
 8004354:	08005bb2 	.word	0x08005bb2
 8004358:	08005bc3 	.word	0x08005bc3

0800435c <siprintf>:
 800435c:	b40e      	push	{r1, r2, r3}
 800435e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004362:	b500      	push	{lr}
 8004364:	b09c      	sub	sp, #112	; 0x70
 8004366:	ab1d      	add	r3, sp, #116	; 0x74
 8004368:	9002      	str	r0, [sp, #8]
 800436a:	9006      	str	r0, [sp, #24]
 800436c:	9107      	str	r1, [sp, #28]
 800436e:	9104      	str	r1, [sp, #16]
 8004370:	4808      	ldr	r0, [pc, #32]	; (8004394 <siprintf+0x38>)
 8004372:	4909      	ldr	r1, [pc, #36]	; (8004398 <siprintf+0x3c>)
 8004374:	f853 2b04 	ldr.w	r2, [r3], #4
 8004378:	9105      	str	r1, [sp, #20]
 800437a:	6800      	ldr	r0, [r0, #0]
 800437c:	a902      	add	r1, sp, #8
 800437e:	9301      	str	r3, [sp, #4]
 8004380:	f001 fa68 	bl	8005854 <_svfiprintf_r>
 8004384:	2200      	movs	r2, #0
 8004386:	9b02      	ldr	r3, [sp, #8]
 8004388:	701a      	strb	r2, [r3, #0]
 800438a:	b01c      	add	sp, #112	; 0x70
 800438c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004390:	b003      	add	sp, #12
 8004392:	4770      	bx	lr
 8004394:	2000001c 	.word	0x2000001c
 8004398:	ffff0208 	.word	0xffff0208

0800439c <quorem>:
 800439c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a0:	6903      	ldr	r3, [r0, #16]
 80043a2:	690c      	ldr	r4, [r1, #16]
 80043a4:	4680      	mov	r8, r0
 80043a6:	42a3      	cmp	r3, r4
 80043a8:	f2c0 8084 	blt.w	80044b4 <quorem+0x118>
 80043ac:	3c01      	subs	r4, #1
 80043ae:	f101 0714 	add.w	r7, r1, #20
 80043b2:	f100 0614 	add.w	r6, r0, #20
 80043b6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80043ba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80043be:	3501      	adds	r5, #1
 80043c0:	fbb0 f5f5 	udiv	r5, r0, r5
 80043c4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80043c8:	eb06 030c 	add.w	r3, r6, ip
 80043cc:	eb07 090c 	add.w	r9, r7, ip
 80043d0:	9301      	str	r3, [sp, #4]
 80043d2:	b39d      	cbz	r5, 800443c <quorem+0xa0>
 80043d4:	f04f 0a00 	mov.w	sl, #0
 80043d8:	4638      	mov	r0, r7
 80043da:	46b6      	mov	lr, r6
 80043dc:	46d3      	mov	fp, sl
 80043de:	f850 2b04 	ldr.w	r2, [r0], #4
 80043e2:	b293      	uxth	r3, r2
 80043e4:	fb05 a303 	mla	r3, r5, r3, sl
 80043e8:	0c12      	lsrs	r2, r2, #16
 80043ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80043ee:	fb05 a202 	mla	r2, r5, r2, sl
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	ebab 0303 	sub.w	r3, fp, r3
 80043f8:	f8de b000 	ldr.w	fp, [lr]
 80043fc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004400:	fa1f fb8b 	uxth.w	fp, fp
 8004404:	445b      	add	r3, fp
 8004406:	fa1f fb82 	uxth.w	fp, r2
 800440a:	f8de 2000 	ldr.w	r2, [lr]
 800440e:	4581      	cmp	r9, r0
 8004410:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004414:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004418:	b29b      	uxth	r3, r3
 800441a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800441e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004422:	f84e 3b04 	str.w	r3, [lr], #4
 8004426:	d2da      	bcs.n	80043de <quorem+0x42>
 8004428:	f856 300c 	ldr.w	r3, [r6, ip]
 800442c:	b933      	cbnz	r3, 800443c <quorem+0xa0>
 800442e:	9b01      	ldr	r3, [sp, #4]
 8004430:	3b04      	subs	r3, #4
 8004432:	429e      	cmp	r6, r3
 8004434:	461a      	mov	r2, r3
 8004436:	d331      	bcc.n	800449c <quorem+0x100>
 8004438:	f8c8 4010 	str.w	r4, [r8, #16]
 800443c:	4640      	mov	r0, r8
 800443e:	f001 f833 	bl	80054a8 <__mcmp>
 8004442:	2800      	cmp	r0, #0
 8004444:	db26      	blt.n	8004494 <quorem+0xf8>
 8004446:	4630      	mov	r0, r6
 8004448:	f04f 0c00 	mov.w	ip, #0
 800444c:	3501      	adds	r5, #1
 800444e:	f857 1b04 	ldr.w	r1, [r7], #4
 8004452:	f8d0 e000 	ldr.w	lr, [r0]
 8004456:	b28b      	uxth	r3, r1
 8004458:	ebac 0303 	sub.w	r3, ip, r3
 800445c:	fa1f f28e 	uxth.w	r2, lr
 8004460:	4413      	add	r3, r2
 8004462:	0c0a      	lsrs	r2, r1, #16
 8004464:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004468:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800446c:	b29b      	uxth	r3, r3
 800446e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004472:	45b9      	cmp	r9, r7
 8004474:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004478:	f840 3b04 	str.w	r3, [r0], #4
 800447c:	d2e7      	bcs.n	800444e <quorem+0xb2>
 800447e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004482:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004486:	b92a      	cbnz	r2, 8004494 <quorem+0xf8>
 8004488:	3b04      	subs	r3, #4
 800448a:	429e      	cmp	r6, r3
 800448c:	461a      	mov	r2, r3
 800448e:	d30b      	bcc.n	80044a8 <quorem+0x10c>
 8004490:	f8c8 4010 	str.w	r4, [r8, #16]
 8004494:	4628      	mov	r0, r5
 8004496:	b003      	add	sp, #12
 8004498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800449c:	6812      	ldr	r2, [r2, #0]
 800449e:	3b04      	subs	r3, #4
 80044a0:	2a00      	cmp	r2, #0
 80044a2:	d1c9      	bne.n	8004438 <quorem+0x9c>
 80044a4:	3c01      	subs	r4, #1
 80044a6:	e7c4      	b.n	8004432 <quorem+0x96>
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	3b04      	subs	r3, #4
 80044ac:	2a00      	cmp	r2, #0
 80044ae:	d1ef      	bne.n	8004490 <quorem+0xf4>
 80044b0:	3c01      	subs	r4, #1
 80044b2:	e7ea      	b.n	800448a <quorem+0xee>
 80044b4:	2000      	movs	r0, #0
 80044b6:	e7ee      	b.n	8004496 <quorem+0xfa>

080044b8 <_dtoa_r>:
 80044b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044bc:	4616      	mov	r6, r2
 80044be:	461f      	mov	r7, r3
 80044c0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80044c2:	b095      	sub	sp, #84	; 0x54
 80044c4:	4604      	mov	r4, r0
 80044c6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80044ca:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80044ce:	b93d      	cbnz	r5, 80044e0 <_dtoa_r+0x28>
 80044d0:	2010      	movs	r0, #16
 80044d2:	f000 fdb3 	bl	800503c <malloc>
 80044d6:	6260      	str	r0, [r4, #36]	; 0x24
 80044d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80044dc:	6005      	str	r5, [r0, #0]
 80044de:	60c5      	str	r5, [r0, #12]
 80044e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044e2:	6819      	ldr	r1, [r3, #0]
 80044e4:	b151      	cbz	r1, 80044fc <_dtoa_r+0x44>
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	2301      	movs	r3, #1
 80044ea:	4093      	lsls	r3, r2
 80044ec:	604a      	str	r2, [r1, #4]
 80044ee:	608b      	str	r3, [r1, #8]
 80044f0:	4620      	mov	r0, r4
 80044f2:	f000 fdf8 	bl	80050e6 <_Bfree>
 80044f6:	2200      	movs	r2, #0
 80044f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	1e3b      	subs	r3, r7, #0
 80044fe:	bfaf      	iteee	ge
 8004500:	2300      	movge	r3, #0
 8004502:	2201      	movlt	r2, #1
 8004504:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004508:	9303      	strlt	r3, [sp, #12]
 800450a:	bfac      	ite	ge
 800450c:	f8c8 3000 	strge.w	r3, [r8]
 8004510:	f8c8 2000 	strlt.w	r2, [r8]
 8004514:	4bae      	ldr	r3, [pc, #696]	; (80047d0 <_dtoa_r+0x318>)
 8004516:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800451a:	ea33 0308 	bics.w	r3, r3, r8
 800451e:	d11b      	bne.n	8004558 <_dtoa_r+0xa0>
 8004520:	f242 730f 	movw	r3, #9999	; 0x270f
 8004524:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	9b02      	ldr	r3, [sp, #8]
 800452a:	b923      	cbnz	r3, 8004536 <_dtoa_r+0x7e>
 800452c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004530:	2800      	cmp	r0, #0
 8004532:	f000 8545 	beq.w	8004fc0 <_dtoa_r+0xb08>
 8004536:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004538:	b953      	cbnz	r3, 8004550 <_dtoa_r+0x98>
 800453a:	4ba6      	ldr	r3, [pc, #664]	; (80047d4 <_dtoa_r+0x31c>)
 800453c:	e021      	b.n	8004582 <_dtoa_r+0xca>
 800453e:	4ba6      	ldr	r3, [pc, #664]	; (80047d8 <_dtoa_r+0x320>)
 8004540:	9306      	str	r3, [sp, #24]
 8004542:	3308      	adds	r3, #8
 8004544:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	9806      	ldr	r0, [sp, #24]
 800454a:	b015      	add	sp, #84	; 0x54
 800454c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004550:	4ba0      	ldr	r3, [pc, #640]	; (80047d4 <_dtoa_r+0x31c>)
 8004552:	9306      	str	r3, [sp, #24]
 8004554:	3303      	adds	r3, #3
 8004556:	e7f5      	b.n	8004544 <_dtoa_r+0x8c>
 8004558:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800455c:	2200      	movs	r2, #0
 800455e:	2300      	movs	r3, #0
 8004560:	4630      	mov	r0, r6
 8004562:	4639      	mov	r1, r7
 8004564:	f7fc fa20 	bl	80009a8 <__aeabi_dcmpeq>
 8004568:	4682      	mov	sl, r0
 800456a:	b160      	cbz	r0, 8004586 <_dtoa_r+0xce>
 800456c:	2301      	movs	r3, #1
 800456e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 8520 	beq.w	8004fba <_dtoa_r+0xb02>
 800457a:	4b98      	ldr	r3, [pc, #608]	; (80047dc <_dtoa_r+0x324>)
 800457c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	3b01      	subs	r3, #1
 8004582:	9306      	str	r3, [sp, #24]
 8004584:	e7e0      	b.n	8004548 <_dtoa_r+0x90>
 8004586:	ab12      	add	r3, sp, #72	; 0x48
 8004588:	9301      	str	r3, [sp, #4]
 800458a:	ab13      	add	r3, sp, #76	; 0x4c
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	4632      	mov	r2, r6
 8004590:	463b      	mov	r3, r7
 8004592:	4620      	mov	r0, r4
 8004594:	f001 f800 	bl	8005598 <__d2b>
 8004598:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800459c:	4683      	mov	fp, r0
 800459e:	2d00      	cmp	r5, #0
 80045a0:	d07d      	beq.n	800469e <_dtoa_r+0x1e6>
 80045a2:	46b0      	mov	r8, r6
 80045a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80045a8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80045ac:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80045b0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80045b4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80045b8:	2200      	movs	r2, #0
 80045ba:	4b89      	ldr	r3, [pc, #548]	; (80047e0 <_dtoa_r+0x328>)
 80045bc:	4640      	mov	r0, r8
 80045be:	4649      	mov	r1, r9
 80045c0:	f7fb fdd2 	bl	8000168 <__aeabi_dsub>
 80045c4:	a37c      	add	r3, pc, #496	; (adr r3, 80047b8 <_dtoa_r+0x300>)
 80045c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ca:	f7fb ff85 	bl	80004d8 <__aeabi_dmul>
 80045ce:	a37c      	add	r3, pc, #496	; (adr r3, 80047c0 <_dtoa_r+0x308>)
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	f7fb fdca 	bl	800016c <__adddf3>
 80045d8:	4606      	mov	r6, r0
 80045da:	4628      	mov	r0, r5
 80045dc:	460f      	mov	r7, r1
 80045de:	f7fb ff11 	bl	8000404 <__aeabi_i2d>
 80045e2:	a379      	add	r3, pc, #484	; (adr r3, 80047c8 <_dtoa_r+0x310>)
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	f7fb ff76 	bl	80004d8 <__aeabi_dmul>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4630      	mov	r0, r6
 80045f2:	4639      	mov	r1, r7
 80045f4:	f7fb fdba 	bl	800016c <__adddf3>
 80045f8:	4606      	mov	r6, r0
 80045fa:	460f      	mov	r7, r1
 80045fc:	f7fc fa1c 	bl	8000a38 <__aeabi_d2iz>
 8004600:	2200      	movs	r2, #0
 8004602:	4682      	mov	sl, r0
 8004604:	2300      	movs	r3, #0
 8004606:	4630      	mov	r0, r6
 8004608:	4639      	mov	r1, r7
 800460a:	f7fc f9d7 	bl	80009bc <__aeabi_dcmplt>
 800460e:	b148      	cbz	r0, 8004624 <_dtoa_r+0x16c>
 8004610:	4650      	mov	r0, sl
 8004612:	f7fb fef7 	bl	8000404 <__aeabi_i2d>
 8004616:	4632      	mov	r2, r6
 8004618:	463b      	mov	r3, r7
 800461a:	f7fc f9c5 	bl	80009a8 <__aeabi_dcmpeq>
 800461e:	b908      	cbnz	r0, 8004624 <_dtoa_r+0x16c>
 8004620:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004624:	f1ba 0f16 	cmp.w	sl, #22
 8004628:	d85a      	bhi.n	80046e0 <_dtoa_r+0x228>
 800462a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800462e:	496d      	ldr	r1, [pc, #436]	; (80047e4 <_dtoa_r+0x32c>)
 8004630:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004634:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004638:	f7fc f9de 	bl	80009f8 <__aeabi_dcmpgt>
 800463c:	2800      	cmp	r0, #0
 800463e:	d051      	beq.n	80046e4 <_dtoa_r+0x22c>
 8004640:	2300      	movs	r3, #0
 8004642:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004646:	930d      	str	r3, [sp, #52]	; 0x34
 8004648:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800464a:	1b5d      	subs	r5, r3, r5
 800464c:	1e6b      	subs	r3, r5, #1
 800464e:	9307      	str	r3, [sp, #28]
 8004650:	bf43      	ittte	mi
 8004652:	2300      	movmi	r3, #0
 8004654:	f1c5 0901 	rsbmi	r9, r5, #1
 8004658:	9307      	strmi	r3, [sp, #28]
 800465a:	f04f 0900 	movpl.w	r9, #0
 800465e:	f1ba 0f00 	cmp.w	sl, #0
 8004662:	db41      	blt.n	80046e8 <_dtoa_r+0x230>
 8004664:	9b07      	ldr	r3, [sp, #28]
 8004666:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800466a:	4453      	add	r3, sl
 800466c:	9307      	str	r3, [sp, #28]
 800466e:	2300      	movs	r3, #0
 8004670:	9308      	str	r3, [sp, #32]
 8004672:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004674:	2b09      	cmp	r3, #9
 8004676:	f200 808f 	bhi.w	8004798 <_dtoa_r+0x2e0>
 800467a:	2b05      	cmp	r3, #5
 800467c:	bfc4      	itt	gt
 800467e:	3b04      	subgt	r3, #4
 8004680:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004682:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004684:	bfc8      	it	gt
 8004686:	2500      	movgt	r5, #0
 8004688:	f1a3 0302 	sub.w	r3, r3, #2
 800468c:	bfd8      	it	le
 800468e:	2501      	movle	r5, #1
 8004690:	2b03      	cmp	r3, #3
 8004692:	f200 808d 	bhi.w	80047b0 <_dtoa_r+0x2f8>
 8004696:	e8df f003 	tbb	[pc, r3]
 800469a:	7d7b      	.short	0x7d7b
 800469c:	6f2f      	.short	0x6f2f
 800469e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80046a2:	441d      	add	r5, r3
 80046a4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80046a8:	2820      	cmp	r0, #32
 80046aa:	dd13      	ble.n	80046d4 <_dtoa_r+0x21c>
 80046ac:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80046b0:	9b02      	ldr	r3, [sp, #8]
 80046b2:	fa08 f800 	lsl.w	r8, r8, r0
 80046b6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80046ba:	fa23 f000 	lsr.w	r0, r3, r0
 80046be:	ea48 0000 	orr.w	r0, r8, r0
 80046c2:	f7fb fe8f 	bl	80003e4 <__aeabi_ui2d>
 80046c6:	2301      	movs	r3, #1
 80046c8:	4680      	mov	r8, r0
 80046ca:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80046ce:	3d01      	subs	r5, #1
 80046d0:	9310      	str	r3, [sp, #64]	; 0x40
 80046d2:	e771      	b.n	80045b8 <_dtoa_r+0x100>
 80046d4:	9b02      	ldr	r3, [sp, #8]
 80046d6:	f1c0 0020 	rsb	r0, r0, #32
 80046da:	fa03 f000 	lsl.w	r0, r3, r0
 80046de:	e7f0      	b.n	80046c2 <_dtoa_r+0x20a>
 80046e0:	2301      	movs	r3, #1
 80046e2:	e7b0      	b.n	8004646 <_dtoa_r+0x18e>
 80046e4:	900d      	str	r0, [sp, #52]	; 0x34
 80046e6:	e7af      	b.n	8004648 <_dtoa_r+0x190>
 80046e8:	f1ca 0300 	rsb	r3, sl, #0
 80046ec:	9308      	str	r3, [sp, #32]
 80046ee:	2300      	movs	r3, #0
 80046f0:	eba9 090a 	sub.w	r9, r9, sl
 80046f4:	930c      	str	r3, [sp, #48]	; 0x30
 80046f6:	e7bc      	b.n	8004672 <_dtoa_r+0x1ba>
 80046f8:	2301      	movs	r3, #1
 80046fa:	9309      	str	r3, [sp, #36]	; 0x24
 80046fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80046fe:	2b00      	cmp	r3, #0
 8004700:	dd74      	ble.n	80047ec <_dtoa_r+0x334>
 8004702:	4698      	mov	r8, r3
 8004704:	9304      	str	r3, [sp, #16]
 8004706:	2200      	movs	r2, #0
 8004708:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800470a:	6072      	str	r2, [r6, #4]
 800470c:	2204      	movs	r2, #4
 800470e:	f102 0014 	add.w	r0, r2, #20
 8004712:	4298      	cmp	r0, r3
 8004714:	6871      	ldr	r1, [r6, #4]
 8004716:	d96e      	bls.n	80047f6 <_dtoa_r+0x33e>
 8004718:	4620      	mov	r0, r4
 800471a:	f000 fcb0 	bl	800507e <_Balloc>
 800471e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004720:	6030      	str	r0, [r6, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f1b8 0f0e 	cmp.w	r8, #14
 8004728:	9306      	str	r3, [sp, #24]
 800472a:	f200 80ed 	bhi.w	8004908 <_dtoa_r+0x450>
 800472e:	2d00      	cmp	r5, #0
 8004730:	f000 80ea 	beq.w	8004908 <_dtoa_r+0x450>
 8004734:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004738:	f1ba 0f00 	cmp.w	sl, #0
 800473c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004740:	dd77      	ble.n	8004832 <_dtoa_r+0x37a>
 8004742:	4a28      	ldr	r2, [pc, #160]	; (80047e4 <_dtoa_r+0x32c>)
 8004744:	f00a 030f 	and.w	r3, sl, #15
 8004748:	ea4f 162a 	mov.w	r6, sl, asr #4
 800474c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004750:	06f0      	lsls	r0, r6, #27
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800475a:	d568      	bpl.n	800482e <_dtoa_r+0x376>
 800475c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004760:	4b21      	ldr	r3, [pc, #132]	; (80047e8 <_dtoa_r+0x330>)
 8004762:	2503      	movs	r5, #3
 8004764:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004768:	f7fb ffe0 	bl	800072c <__aeabi_ddiv>
 800476c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004770:	f006 060f 	and.w	r6, r6, #15
 8004774:	4f1c      	ldr	r7, [pc, #112]	; (80047e8 <_dtoa_r+0x330>)
 8004776:	e04f      	b.n	8004818 <_dtoa_r+0x360>
 8004778:	2301      	movs	r3, #1
 800477a:	9309      	str	r3, [sp, #36]	; 0x24
 800477c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800477e:	4453      	add	r3, sl
 8004780:	f103 0801 	add.w	r8, r3, #1
 8004784:	9304      	str	r3, [sp, #16]
 8004786:	4643      	mov	r3, r8
 8004788:	2b01      	cmp	r3, #1
 800478a:	bfb8      	it	lt
 800478c:	2301      	movlt	r3, #1
 800478e:	e7ba      	b.n	8004706 <_dtoa_r+0x24e>
 8004790:	2300      	movs	r3, #0
 8004792:	e7b2      	b.n	80046fa <_dtoa_r+0x242>
 8004794:	2300      	movs	r3, #0
 8004796:	e7f0      	b.n	800477a <_dtoa_r+0x2c2>
 8004798:	2501      	movs	r5, #1
 800479a:	2300      	movs	r3, #0
 800479c:	9509      	str	r5, [sp, #36]	; 0x24
 800479e:	931e      	str	r3, [sp, #120]	; 0x78
 80047a0:	f04f 33ff 	mov.w	r3, #4294967295
 80047a4:	2200      	movs	r2, #0
 80047a6:	9304      	str	r3, [sp, #16]
 80047a8:	4698      	mov	r8, r3
 80047aa:	2312      	movs	r3, #18
 80047ac:	921f      	str	r2, [sp, #124]	; 0x7c
 80047ae:	e7aa      	b.n	8004706 <_dtoa_r+0x24e>
 80047b0:	2301      	movs	r3, #1
 80047b2:	9309      	str	r3, [sp, #36]	; 0x24
 80047b4:	e7f4      	b.n	80047a0 <_dtoa_r+0x2e8>
 80047b6:	bf00      	nop
 80047b8:	636f4361 	.word	0x636f4361
 80047bc:	3fd287a7 	.word	0x3fd287a7
 80047c0:	8b60c8b3 	.word	0x8b60c8b3
 80047c4:	3fc68a28 	.word	0x3fc68a28
 80047c8:	509f79fb 	.word	0x509f79fb
 80047cc:	3fd34413 	.word	0x3fd34413
 80047d0:	7ff00000 	.word	0x7ff00000
 80047d4:	08005bdd 	.word	0x08005bdd
 80047d8:	08005bd4 	.word	0x08005bd4
 80047dc:	08005bb1 	.word	0x08005bb1
 80047e0:	3ff80000 	.word	0x3ff80000
 80047e4:	08005c10 	.word	0x08005c10
 80047e8:	08005be8 	.word	0x08005be8
 80047ec:	2301      	movs	r3, #1
 80047ee:	9304      	str	r3, [sp, #16]
 80047f0:	4698      	mov	r8, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	e7da      	b.n	80047ac <_dtoa_r+0x2f4>
 80047f6:	3101      	adds	r1, #1
 80047f8:	6071      	str	r1, [r6, #4]
 80047fa:	0052      	lsls	r2, r2, #1
 80047fc:	e787      	b.n	800470e <_dtoa_r+0x256>
 80047fe:	07f1      	lsls	r1, r6, #31
 8004800:	d508      	bpl.n	8004814 <_dtoa_r+0x35c>
 8004802:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004806:	e9d7 2300 	ldrd	r2, r3, [r7]
 800480a:	f7fb fe65 	bl	80004d8 <__aeabi_dmul>
 800480e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004812:	3501      	adds	r5, #1
 8004814:	1076      	asrs	r6, r6, #1
 8004816:	3708      	adds	r7, #8
 8004818:	2e00      	cmp	r6, #0
 800481a:	d1f0      	bne.n	80047fe <_dtoa_r+0x346>
 800481c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004820:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004824:	f7fb ff82 	bl	800072c <__aeabi_ddiv>
 8004828:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800482c:	e01b      	b.n	8004866 <_dtoa_r+0x3ae>
 800482e:	2502      	movs	r5, #2
 8004830:	e7a0      	b.n	8004774 <_dtoa_r+0x2bc>
 8004832:	f000 80a4 	beq.w	800497e <_dtoa_r+0x4c6>
 8004836:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800483a:	f1ca 0600 	rsb	r6, sl, #0
 800483e:	4ba0      	ldr	r3, [pc, #640]	; (8004ac0 <_dtoa_r+0x608>)
 8004840:	f006 020f 	and.w	r2, r6, #15
 8004844:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	f7fb fe44 	bl	80004d8 <__aeabi_dmul>
 8004850:	2502      	movs	r5, #2
 8004852:	2300      	movs	r3, #0
 8004854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004858:	4f9a      	ldr	r7, [pc, #616]	; (8004ac4 <_dtoa_r+0x60c>)
 800485a:	1136      	asrs	r6, r6, #4
 800485c:	2e00      	cmp	r6, #0
 800485e:	f040 8083 	bne.w	8004968 <_dtoa_r+0x4b0>
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1e0      	bne.n	8004828 <_dtoa_r+0x370>
 8004866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 808a 	beq.w	8004982 <_dtoa_r+0x4ca>
 800486e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004872:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004876:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800487a:	2200      	movs	r2, #0
 800487c:	4b92      	ldr	r3, [pc, #584]	; (8004ac8 <_dtoa_r+0x610>)
 800487e:	f7fc f89d 	bl	80009bc <__aeabi_dcmplt>
 8004882:	2800      	cmp	r0, #0
 8004884:	d07d      	beq.n	8004982 <_dtoa_r+0x4ca>
 8004886:	f1b8 0f00 	cmp.w	r8, #0
 800488a:	d07a      	beq.n	8004982 <_dtoa_r+0x4ca>
 800488c:	9b04      	ldr	r3, [sp, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	dd36      	ble.n	8004900 <_dtoa_r+0x448>
 8004892:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004896:	2200      	movs	r2, #0
 8004898:	4b8c      	ldr	r3, [pc, #560]	; (8004acc <_dtoa_r+0x614>)
 800489a:	f7fb fe1d 	bl	80004d8 <__aeabi_dmul>
 800489e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048a2:	9e04      	ldr	r6, [sp, #16]
 80048a4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80048a8:	3501      	adds	r5, #1
 80048aa:	4628      	mov	r0, r5
 80048ac:	f7fb fdaa 	bl	8000404 <__aeabi_i2d>
 80048b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048b4:	f7fb fe10 	bl	80004d8 <__aeabi_dmul>
 80048b8:	2200      	movs	r2, #0
 80048ba:	4b85      	ldr	r3, [pc, #532]	; (8004ad0 <_dtoa_r+0x618>)
 80048bc:	f7fb fc56 	bl	800016c <__adddf3>
 80048c0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80048c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80048c8:	950b      	str	r5, [sp, #44]	; 0x2c
 80048ca:	2e00      	cmp	r6, #0
 80048cc:	d15c      	bne.n	8004988 <_dtoa_r+0x4d0>
 80048ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048d2:	2200      	movs	r2, #0
 80048d4:	4b7f      	ldr	r3, [pc, #508]	; (8004ad4 <_dtoa_r+0x61c>)
 80048d6:	f7fb fc47 	bl	8000168 <__aeabi_dsub>
 80048da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048dc:	462b      	mov	r3, r5
 80048de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048e2:	f7fc f889 	bl	80009f8 <__aeabi_dcmpgt>
 80048e6:	2800      	cmp	r0, #0
 80048e8:	f040 8281 	bne.w	8004dee <_dtoa_r+0x936>
 80048ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048f2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80048f6:	f7fc f861 	bl	80009bc <__aeabi_dcmplt>
 80048fa:	2800      	cmp	r0, #0
 80048fc:	f040 8275 	bne.w	8004dea <_dtoa_r+0x932>
 8004900:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004904:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004908:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800490a:	2b00      	cmp	r3, #0
 800490c:	f2c0 814b 	blt.w	8004ba6 <_dtoa_r+0x6ee>
 8004910:	f1ba 0f0e 	cmp.w	sl, #14
 8004914:	f300 8147 	bgt.w	8004ba6 <_dtoa_r+0x6ee>
 8004918:	4b69      	ldr	r3, [pc, #420]	; (8004ac0 <_dtoa_r+0x608>)
 800491a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800491e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004922:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004926:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004928:	2b00      	cmp	r3, #0
 800492a:	f280 80d7 	bge.w	8004adc <_dtoa_r+0x624>
 800492e:	f1b8 0f00 	cmp.w	r8, #0
 8004932:	f300 80d3 	bgt.w	8004adc <_dtoa_r+0x624>
 8004936:	f040 8257 	bne.w	8004de8 <_dtoa_r+0x930>
 800493a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800493e:	2200      	movs	r2, #0
 8004940:	4b64      	ldr	r3, [pc, #400]	; (8004ad4 <_dtoa_r+0x61c>)
 8004942:	f7fb fdc9 	bl	80004d8 <__aeabi_dmul>
 8004946:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800494a:	f7fc f84b 	bl	80009e4 <__aeabi_dcmpge>
 800494e:	4646      	mov	r6, r8
 8004950:	4647      	mov	r7, r8
 8004952:	2800      	cmp	r0, #0
 8004954:	f040 822d 	bne.w	8004db2 <_dtoa_r+0x8fa>
 8004958:	9b06      	ldr	r3, [sp, #24]
 800495a:	9a06      	ldr	r2, [sp, #24]
 800495c:	1c5d      	adds	r5, r3, #1
 800495e:	2331      	movs	r3, #49	; 0x31
 8004960:	f10a 0a01 	add.w	sl, sl, #1
 8004964:	7013      	strb	r3, [r2, #0]
 8004966:	e228      	b.n	8004dba <_dtoa_r+0x902>
 8004968:	07f2      	lsls	r2, r6, #31
 800496a:	d505      	bpl.n	8004978 <_dtoa_r+0x4c0>
 800496c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004970:	f7fb fdb2 	bl	80004d8 <__aeabi_dmul>
 8004974:	2301      	movs	r3, #1
 8004976:	3501      	adds	r5, #1
 8004978:	1076      	asrs	r6, r6, #1
 800497a:	3708      	adds	r7, #8
 800497c:	e76e      	b.n	800485c <_dtoa_r+0x3a4>
 800497e:	2502      	movs	r5, #2
 8004980:	e771      	b.n	8004866 <_dtoa_r+0x3ae>
 8004982:	4657      	mov	r7, sl
 8004984:	4646      	mov	r6, r8
 8004986:	e790      	b.n	80048aa <_dtoa_r+0x3f2>
 8004988:	4b4d      	ldr	r3, [pc, #308]	; (8004ac0 <_dtoa_r+0x608>)
 800498a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800498e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004994:	2b00      	cmp	r3, #0
 8004996:	d048      	beq.n	8004a2a <_dtoa_r+0x572>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	2000      	movs	r0, #0
 800499e:	494e      	ldr	r1, [pc, #312]	; (8004ad8 <_dtoa_r+0x620>)
 80049a0:	f7fb fec4 	bl	800072c <__aeabi_ddiv>
 80049a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80049a8:	f7fb fbde 	bl	8000168 <__aeabi_dsub>
 80049ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80049b0:	9d06      	ldr	r5, [sp, #24]
 80049b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049b6:	f7fc f83f 	bl	8000a38 <__aeabi_d2iz>
 80049ba:	9011      	str	r0, [sp, #68]	; 0x44
 80049bc:	f7fb fd22 	bl	8000404 <__aeabi_i2d>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049c8:	f7fb fbce 	bl	8000168 <__aeabi_dsub>
 80049cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80049ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049d2:	3330      	adds	r3, #48	; 0x30
 80049d4:	f805 3b01 	strb.w	r3, [r5], #1
 80049d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80049dc:	f7fb ffee 	bl	80009bc <__aeabi_dcmplt>
 80049e0:	2800      	cmp	r0, #0
 80049e2:	d163      	bne.n	8004aac <_dtoa_r+0x5f4>
 80049e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049e8:	2000      	movs	r0, #0
 80049ea:	4937      	ldr	r1, [pc, #220]	; (8004ac8 <_dtoa_r+0x610>)
 80049ec:	f7fb fbbc 	bl	8000168 <__aeabi_dsub>
 80049f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80049f4:	f7fb ffe2 	bl	80009bc <__aeabi_dcmplt>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	f040 80b5 	bne.w	8004b68 <_dtoa_r+0x6b0>
 80049fe:	9b06      	ldr	r3, [sp, #24]
 8004a00:	1aeb      	subs	r3, r5, r3
 8004a02:	429e      	cmp	r6, r3
 8004a04:	f77f af7c 	ble.w	8004900 <_dtoa_r+0x448>
 8004a08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	4b2f      	ldr	r3, [pc, #188]	; (8004acc <_dtoa_r+0x614>)
 8004a10:	f7fb fd62 	bl	80004d8 <__aeabi_dmul>
 8004a14:	2200      	movs	r2, #0
 8004a16:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004a1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a1e:	4b2b      	ldr	r3, [pc, #172]	; (8004acc <_dtoa_r+0x614>)
 8004a20:	f7fb fd5a 	bl	80004d8 <__aeabi_dmul>
 8004a24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a28:	e7c3      	b.n	80049b2 <_dtoa_r+0x4fa>
 8004a2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004a2e:	f7fb fd53 	bl	80004d8 <__aeabi_dmul>
 8004a32:	9b06      	ldr	r3, [sp, #24]
 8004a34:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004a38:	199d      	adds	r5, r3, r6
 8004a3a:	461e      	mov	r6, r3
 8004a3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a40:	f7fb fffa 	bl	8000a38 <__aeabi_d2iz>
 8004a44:	9011      	str	r0, [sp, #68]	; 0x44
 8004a46:	f7fb fcdd 	bl	8000404 <__aeabi_i2d>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a52:	f7fb fb89 	bl	8000168 <__aeabi_dsub>
 8004a56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a5c:	3330      	adds	r3, #48	; 0x30
 8004a5e:	f806 3b01 	strb.w	r3, [r6], #1
 8004a62:	42ae      	cmp	r6, r5
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	d124      	bne.n	8004ab4 <_dtoa_r+0x5fc>
 8004a6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004a6e:	4b1a      	ldr	r3, [pc, #104]	; (8004ad8 <_dtoa_r+0x620>)
 8004a70:	f7fb fb7c 	bl	800016c <__adddf3>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a7c:	f7fb ffbc 	bl	80009f8 <__aeabi_dcmpgt>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d171      	bne.n	8004b68 <_dtoa_r+0x6b0>
 8004a84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004a88:	2000      	movs	r0, #0
 8004a8a:	4913      	ldr	r1, [pc, #76]	; (8004ad8 <_dtoa_r+0x620>)
 8004a8c:	f7fb fb6c 	bl	8000168 <__aeabi_dsub>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a98:	f7fb ff90 	bl	80009bc <__aeabi_dcmplt>
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	f43f af2f 	beq.w	8004900 <_dtoa_r+0x448>
 8004aa2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004aa6:	1e6a      	subs	r2, r5, #1
 8004aa8:	2b30      	cmp	r3, #48	; 0x30
 8004aaa:	d001      	beq.n	8004ab0 <_dtoa_r+0x5f8>
 8004aac:	46ba      	mov	sl, r7
 8004aae:	e04a      	b.n	8004b46 <_dtoa_r+0x68e>
 8004ab0:	4615      	mov	r5, r2
 8004ab2:	e7f6      	b.n	8004aa2 <_dtoa_r+0x5ea>
 8004ab4:	4b05      	ldr	r3, [pc, #20]	; (8004acc <_dtoa_r+0x614>)
 8004ab6:	f7fb fd0f 	bl	80004d8 <__aeabi_dmul>
 8004aba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004abe:	e7bd      	b.n	8004a3c <_dtoa_r+0x584>
 8004ac0:	08005c10 	.word	0x08005c10
 8004ac4:	08005be8 	.word	0x08005be8
 8004ac8:	3ff00000 	.word	0x3ff00000
 8004acc:	40240000 	.word	0x40240000
 8004ad0:	401c0000 	.word	0x401c0000
 8004ad4:	40140000 	.word	0x40140000
 8004ad8:	3fe00000 	.word	0x3fe00000
 8004adc:	9d06      	ldr	r5, [sp, #24]
 8004ade:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004ae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ae6:	4630      	mov	r0, r6
 8004ae8:	4639      	mov	r1, r7
 8004aea:	f7fb fe1f 	bl	800072c <__aeabi_ddiv>
 8004aee:	f7fb ffa3 	bl	8000a38 <__aeabi_d2iz>
 8004af2:	4681      	mov	r9, r0
 8004af4:	f7fb fc86 	bl	8000404 <__aeabi_i2d>
 8004af8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004afc:	f7fb fcec 	bl	80004d8 <__aeabi_dmul>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4630      	mov	r0, r6
 8004b06:	4639      	mov	r1, r7
 8004b08:	f7fb fb2e 	bl	8000168 <__aeabi_dsub>
 8004b0c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004b10:	f805 6b01 	strb.w	r6, [r5], #1
 8004b14:	9e06      	ldr	r6, [sp, #24]
 8004b16:	4602      	mov	r2, r0
 8004b18:	1bae      	subs	r6, r5, r6
 8004b1a:	45b0      	cmp	r8, r6
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	d135      	bne.n	8004b8c <_dtoa_r+0x6d4>
 8004b20:	f7fb fb24 	bl	800016c <__adddf3>
 8004b24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b28:	4606      	mov	r6, r0
 8004b2a:	460f      	mov	r7, r1
 8004b2c:	f7fb ff64 	bl	80009f8 <__aeabi_dcmpgt>
 8004b30:	b9c8      	cbnz	r0, 8004b66 <_dtoa_r+0x6ae>
 8004b32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b36:	4630      	mov	r0, r6
 8004b38:	4639      	mov	r1, r7
 8004b3a:	f7fb ff35 	bl	80009a8 <__aeabi_dcmpeq>
 8004b3e:	b110      	cbz	r0, 8004b46 <_dtoa_r+0x68e>
 8004b40:	f019 0f01 	tst.w	r9, #1
 8004b44:	d10f      	bne.n	8004b66 <_dtoa_r+0x6ae>
 8004b46:	4659      	mov	r1, fp
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f000 facc 	bl	80050e6 <_Bfree>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b52:	702b      	strb	r3, [r5, #0]
 8004b54:	f10a 0301 	add.w	r3, sl, #1
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f43f acf3 	beq.w	8004548 <_dtoa_r+0x90>
 8004b62:	601d      	str	r5, [r3, #0]
 8004b64:	e4f0      	b.n	8004548 <_dtoa_r+0x90>
 8004b66:	4657      	mov	r7, sl
 8004b68:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004b6c:	1e6b      	subs	r3, r5, #1
 8004b6e:	2a39      	cmp	r2, #57	; 0x39
 8004b70:	d106      	bne.n	8004b80 <_dtoa_r+0x6c8>
 8004b72:	9a06      	ldr	r2, [sp, #24]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d107      	bne.n	8004b88 <_dtoa_r+0x6d0>
 8004b78:	2330      	movs	r3, #48	; 0x30
 8004b7a:	7013      	strb	r3, [r2, #0]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	3701      	adds	r7, #1
 8004b80:	781a      	ldrb	r2, [r3, #0]
 8004b82:	3201      	adds	r2, #1
 8004b84:	701a      	strb	r2, [r3, #0]
 8004b86:	e791      	b.n	8004aac <_dtoa_r+0x5f4>
 8004b88:	461d      	mov	r5, r3
 8004b8a:	e7ed      	b.n	8004b68 <_dtoa_r+0x6b0>
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	4b99      	ldr	r3, [pc, #612]	; (8004df4 <_dtoa_r+0x93c>)
 8004b90:	f7fb fca2 	bl	80004d8 <__aeabi_dmul>
 8004b94:	2200      	movs	r2, #0
 8004b96:	2300      	movs	r3, #0
 8004b98:	4606      	mov	r6, r0
 8004b9a:	460f      	mov	r7, r1
 8004b9c:	f7fb ff04 	bl	80009a8 <__aeabi_dcmpeq>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	d09e      	beq.n	8004ae2 <_dtoa_r+0x62a>
 8004ba4:	e7cf      	b.n	8004b46 <_dtoa_r+0x68e>
 8004ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ba8:	2a00      	cmp	r2, #0
 8004baa:	f000 8088 	beq.w	8004cbe <_dtoa_r+0x806>
 8004bae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004bb0:	2a01      	cmp	r2, #1
 8004bb2:	dc6d      	bgt.n	8004c90 <_dtoa_r+0x7d8>
 8004bb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004bb6:	2a00      	cmp	r2, #0
 8004bb8:	d066      	beq.n	8004c88 <_dtoa_r+0x7d0>
 8004bba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004bbe:	464d      	mov	r5, r9
 8004bc0:	9e08      	ldr	r6, [sp, #32]
 8004bc2:	9a07      	ldr	r2, [sp, #28]
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	441a      	add	r2, r3
 8004bc8:	4620      	mov	r0, r4
 8004bca:	4499      	add	r9, r3
 8004bcc:	9207      	str	r2, [sp, #28]
 8004bce:	f000 fb2a 	bl	8005226 <__i2b>
 8004bd2:	4607      	mov	r7, r0
 8004bd4:	2d00      	cmp	r5, #0
 8004bd6:	dd0b      	ble.n	8004bf0 <_dtoa_r+0x738>
 8004bd8:	9b07      	ldr	r3, [sp, #28]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	dd08      	ble.n	8004bf0 <_dtoa_r+0x738>
 8004bde:	42ab      	cmp	r3, r5
 8004be0:	bfa8      	it	ge
 8004be2:	462b      	movge	r3, r5
 8004be4:	9a07      	ldr	r2, [sp, #28]
 8004be6:	eba9 0903 	sub.w	r9, r9, r3
 8004bea:	1aed      	subs	r5, r5, r3
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	9307      	str	r3, [sp, #28]
 8004bf0:	9b08      	ldr	r3, [sp, #32]
 8004bf2:	b1eb      	cbz	r3, 8004c30 <_dtoa_r+0x778>
 8004bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d065      	beq.n	8004cc6 <_dtoa_r+0x80e>
 8004bfa:	b18e      	cbz	r6, 8004c20 <_dtoa_r+0x768>
 8004bfc:	4639      	mov	r1, r7
 8004bfe:	4632      	mov	r2, r6
 8004c00:	4620      	mov	r0, r4
 8004c02:	f000 fbaf 	bl	8005364 <__pow5mult>
 8004c06:	465a      	mov	r2, fp
 8004c08:	4601      	mov	r1, r0
 8004c0a:	4607      	mov	r7, r0
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	f000 fb13 	bl	8005238 <__multiply>
 8004c12:	4659      	mov	r1, fp
 8004c14:	900a      	str	r0, [sp, #40]	; 0x28
 8004c16:	4620      	mov	r0, r4
 8004c18:	f000 fa65 	bl	80050e6 <_Bfree>
 8004c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c1e:	469b      	mov	fp, r3
 8004c20:	9b08      	ldr	r3, [sp, #32]
 8004c22:	1b9a      	subs	r2, r3, r6
 8004c24:	d004      	beq.n	8004c30 <_dtoa_r+0x778>
 8004c26:	4659      	mov	r1, fp
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f000 fb9b 	bl	8005364 <__pow5mult>
 8004c2e:	4683      	mov	fp, r0
 8004c30:	2101      	movs	r1, #1
 8004c32:	4620      	mov	r0, r4
 8004c34:	f000 faf7 	bl	8005226 <__i2b>
 8004c38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c3a:	4606      	mov	r6, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 81c6 	beq.w	8004fce <_dtoa_r+0xb16>
 8004c42:	461a      	mov	r2, r3
 8004c44:	4601      	mov	r1, r0
 8004c46:	4620      	mov	r0, r4
 8004c48:	f000 fb8c 	bl	8005364 <__pow5mult>
 8004c4c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004c4e:	4606      	mov	r6, r0
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	dc3e      	bgt.n	8004cd2 <_dtoa_r+0x81a>
 8004c54:	9b02      	ldr	r3, [sp, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d137      	bne.n	8004cca <_dtoa_r+0x812>
 8004c5a:	9b03      	ldr	r3, [sp, #12]
 8004c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d134      	bne.n	8004cce <_dtoa_r+0x816>
 8004c64:	9b03      	ldr	r3, [sp, #12]
 8004c66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c6a:	0d1b      	lsrs	r3, r3, #20
 8004c6c:	051b      	lsls	r3, r3, #20
 8004c6e:	b12b      	cbz	r3, 8004c7c <_dtoa_r+0x7c4>
 8004c70:	9b07      	ldr	r3, [sp, #28]
 8004c72:	f109 0901 	add.w	r9, r9, #1
 8004c76:	3301      	adds	r3, #1
 8004c78:	9307      	str	r3, [sp, #28]
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	9308      	str	r3, [sp, #32]
 8004c7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d128      	bne.n	8004cd6 <_dtoa_r+0x81e>
 8004c84:	2001      	movs	r0, #1
 8004c86:	e02e      	b.n	8004ce6 <_dtoa_r+0x82e>
 8004c88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c8a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004c8e:	e796      	b.n	8004bbe <_dtoa_r+0x706>
 8004c90:	9b08      	ldr	r3, [sp, #32]
 8004c92:	f108 36ff 	add.w	r6, r8, #4294967295
 8004c96:	42b3      	cmp	r3, r6
 8004c98:	bfb7      	itett	lt
 8004c9a:	9b08      	ldrlt	r3, [sp, #32]
 8004c9c:	1b9e      	subge	r6, r3, r6
 8004c9e:	1af2      	sublt	r2, r6, r3
 8004ca0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004ca2:	bfbf      	itttt	lt
 8004ca4:	9608      	strlt	r6, [sp, #32]
 8004ca6:	189b      	addlt	r3, r3, r2
 8004ca8:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004caa:	2600      	movlt	r6, #0
 8004cac:	f1b8 0f00 	cmp.w	r8, #0
 8004cb0:	bfb9      	ittee	lt
 8004cb2:	eba9 0508 	sublt.w	r5, r9, r8
 8004cb6:	2300      	movlt	r3, #0
 8004cb8:	464d      	movge	r5, r9
 8004cba:	4643      	movge	r3, r8
 8004cbc:	e781      	b.n	8004bc2 <_dtoa_r+0x70a>
 8004cbe:	9e08      	ldr	r6, [sp, #32]
 8004cc0:	464d      	mov	r5, r9
 8004cc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004cc4:	e786      	b.n	8004bd4 <_dtoa_r+0x71c>
 8004cc6:	9a08      	ldr	r2, [sp, #32]
 8004cc8:	e7ad      	b.n	8004c26 <_dtoa_r+0x76e>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	e7d6      	b.n	8004c7c <_dtoa_r+0x7c4>
 8004cce:	9b02      	ldr	r3, [sp, #8]
 8004cd0:	e7d4      	b.n	8004c7c <_dtoa_r+0x7c4>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	9308      	str	r3, [sp, #32]
 8004cd6:	6933      	ldr	r3, [r6, #16]
 8004cd8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004cdc:	6918      	ldr	r0, [r3, #16]
 8004cde:	f000 fa54 	bl	800518a <__hi0bits>
 8004ce2:	f1c0 0020 	rsb	r0, r0, #32
 8004ce6:	9b07      	ldr	r3, [sp, #28]
 8004ce8:	4418      	add	r0, r3
 8004cea:	f010 001f 	ands.w	r0, r0, #31
 8004cee:	d047      	beq.n	8004d80 <_dtoa_r+0x8c8>
 8004cf0:	f1c0 0320 	rsb	r3, r0, #32
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	dd3b      	ble.n	8004d70 <_dtoa_r+0x8b8>
 8004cf8:	9b07      	ldr	r3, [sp, #28]
 8004cfa:	f1c0 001c 	rsb	r0, r0, #28
 8004cfe:	4481      	add	r9, r0
 8004d00:	4405      	add	r5, r0
 8004d02:	4403      	add	r3, r0
 8004d04:	9307      	str	r3, [sp, #28]
 8004d06:	f1b9 0f00 	cmp.w	r9, #0
 8004d0a:	dd05      	ble.n	8004d18 <_dtoa_r+0x860>
 8004d0c:	4659      	mov	r1, fp
 8004d0e:	464a      	mov	r2, r9
 8004d10:	4620      	mov	r0, r4
 8004d12:	f000 fb75 	bl	8005400 <__lshift>
 8004d16:	4683      	mov	fp, r0
 8004d18:	9b07      	ldr	r3, [sp, #28]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	dd05      	ble.n	8004d2a <_dtoa_r+0x872>
 8004d1e:	4631      	mov	r1, r6
 8004d20:	461a      	mov	r2, r3
 8004d22:	4620      	mov	r0, r4
 8004d24:	f000 fb6c 	bl	8005400 <__lshift>
 8004d28:	4606      	mov	r6, r0
 8004d2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d2c:	b353      	cbz	r3, 8004d84 <_dtoa_r+0x8cc>
 8004d2e:	4631      	mov	r1, r6
 8004d30:	4658      	mov	r0, fp
 8004d32:	f000 fbb9 	bl	80054a8 <__mcmp>
 8004d36:	2800      	cmp	r0, #0
 8004d38:	da24      	bge.n	8004d84 <_dtoa_r+0x8cc>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	4659      	mov	r1, fp
 8004d3e:	220a      	movs	r2, #10
 8004d40:	4620      	mov	r0, r4
 8004d42:	f000 f9e7 	bl	8005114 <__multadd>
 8004d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d48:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d4c:	4683      	mov	fp, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 8144 	beq.w	8004fdc <_dtoa_r+0xb24>
 8004d54:	2300      	movs	r3, #0
 8004d56:	4639      	mov	r1, r7
 8004d58:	220a      	movs	r2, #10
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	f000 f9da 	bl	8005114 <__multadd>
 8004d60:	9b04      	ldr	r3, [sp, #16]
 8004d62:	4607      	mov	r7, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	dc4d      	bgt.n	8004e04 <_dtoa_r+0x94c>
 8004d68:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	dd4a      	ble.n	8004e04 <_dtoa_r+0x94c>
 8004d6e:	e011      	b.n	8004d94 <_dtoa_r+0x8dc>
 8004d70:	d0c9      	beq.n	8004d06 <_dtoa_r+0x84e>
 8004d72:	9a07      	ldr	r2, [sp, #28]
 8004d74:	331c      	adds	r3, #28
 8004d76:	441a      	add	r2, r3
 8004d78:	4499      	add	r9, r3
 8004d7a:	441d      	add	r5, r3
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	e7c1      	b.n	8004d04 <_dtoa_r+0x84c>
 8004d80:	4603      	mov	r3, r0
 8004d82:	e7f6      	b.n	8004d72 <_dtoa_r+0x8ba>
 8004d84:	f1b8 0f00 	cmp.w	r8, #0
 8004d88:	dc36      	bgt.n	8004df8 <_dtoa_r+0x940>
 8004d8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	dd33      	ble.n	8004df8 <_dtoa_r+0x940>
 8004d90:	f8cd 8010 	str.w	r8, [sp, #16]
 8004d94:	9b04      	ldr	r3, [sp, #16]
 8004d96:	b963      	cbnz	r3, 8004db2 <_dtoa_r+0x8fa>
 8004d98:	4631      	mov	r1, r6
 8004d9a:	2205      	movs	r2, #5
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	f000 f9b9 	bl	8005114 <__multadd>
 8004da2:	4601      	mov	r1, r0
 8004da4:	4606      	mov	r6, r0
 8004da6:	4658      	mov	r0, fp
 8004da8:	f000 fb7e 	bl	80054a8 <__mcmp>
 8004dac:	2800      	cmp	r0, #0
 8004dae:	f73f add3 	bgt.w	8004958 <_dtoa_r+0x4a0>
 8004db2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004db4:	9d06      	ldr	r5, [sp, #24]
 8004db6:	ea6f 0a03 	mvn.w	sl, r3
 8004dba:	f04f 0900 	mov.w	r9, #0
 8004dbe:	4631      	mov	r1, r6
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	f000 f990 	bl	80050e6 <_Bfree>
 8004dc6:	2f00      	cmp	r7, #0
 8004dc8:	f43f aebd 	beq.w	8004b46 <_dtoa_r+0x68e>
 8004dcc:	f1b9 0f00 	cmp.w	r9, #0
 8004dd0:	d005      	beq.n	8004dde <_dtoa_r+0x926>
 8004dd2:	45b9      	cmp	r9, r7
 8004dd4:	d003      	beq.n	8004dde <_dtoa_r+0x926>
 8004dd6:	4649      	mov	r1, r9
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f000 f984 	bl	80050e6 <_Bfree>
 8004dde:	4639      	mov	r1, r7
 8004de0:	4620      	mov	r0, r4
 8004de2:	f000 f980 	bl	80050e6 <_Bfree>
 8004de6:	e6ae      	b.n	8004b46 <_dtoa_r+0x68e>
 8004de8:	2600      	movs	r6, #0
 8004dea:	4637      	mov	r7, r6
 8004dec:	e7e1      	b.n	8004db2 <_dtoa_r+0x8fa>
 8004dee:	46ba      	mov	sl, r7
 8004df0:	4637      	mov	r7, r6
 8004df2:	e5b1      	b.n	8004958 <_dtoa_r+0x4a0>
 8004df4:	40240000 	.word	0x40240000
 8004df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dfa:	f8cd 8010 	str.w	r8, [sp, #16]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 80f3 	beq.w	8004fea <_dtoa_r+0xb32>
 8004e04:	2d00      	cmp	r5, #0
 8004e06:	dd05      	ble.n	8004e14 <_dtoa_r+0x95c>
 8004e08:	4639      	mov	r1, r7
 8004e0a:	462a      	mov	r2, r5
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	f000 faf7 	bl	8005400 <__lshift>
 8004e12:	4607      	mov	r7, r0
 8004e14:	9b08      	ldr	r3, [sp, #32]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d04c      	beq.n	8004eb4 <_dtoa_r+0x9fc>
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	f000 f92e 	bl	800507e <_Balloc>
 8004e22:	4605      	mov	r5, r0
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	f107 010c 	add.w	r1, r7, #12
 8004e2a:	3202      	adds	r2, #2
 8004e2c:	0092      	lsls	r2, r2, #2
 8004e2e:	300c      	adds	r0, #12
 8004e30:	f000 f91a 	bl	8005068 <memcpy>
 8004e34:	2201      	movs	r2, #1
 8004e36:	4629      	mov	r1, r5
 8004e38:	4620      	mov	r0, r4
 8004e3a:	f000 fae1 	bl	8005400 <__lshift>
 8004e3e:	46b9      	mov	r9, r7
 8004e40:	4607      	mov	r7, r0
 8004e42:	9b06      	ldr	r3, [sp, #24]
 8004e44:	9307      	str	r3, [sp, #28]
 8004e46:	9b02      	ldr	r3, [sp, #8]
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	9308      	str	r3, [sp, #32]
 8004e4e:	4631      	mov	r1, r6
 8004e50:	4658      	mov	r0, fp
 8004e52:	f7ff faa3 	bl	800439c <quorem>
 8004e56:	4649      	mov	r1, r9
 8004e58:	4605      	mov	r5, r0
 8004e5a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004e5e:	4658      	mov	r0, fp
 8004e60:	f000 fb22 	bl	80054a8 <__mcmp>
 8004e64:	463a      	mov	r2, r7
 8004e66:	9002      	str	r0, [sp, #8]
 8004e68:	4631      	mov	r1, r6
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	f000 fb36 	bl	80054dc <__mdiff>
 8004e70:	68c3      	ldr	r3, [r0, #12]
 8004e72:	4602      	mov	r2, r0
 8004e74:	bb03      	cbnz	r3, 8004eb8 <_dtoa_r+0xa00>
 8004e76:	4601      	mov	r1, r0
 8004e78:	9009      	str	r0, [sp, #36]	; 0x24
 8004e7a:	4658      	mov	r0, fp
 8004e7c:	f000 fb14 	bl	80054a8 <__mcmp>
 8004e80:	4603      	mov	r3, r0
 8004e82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e84:	4611      	mov	r1, r2
 8004e86:	4620      	mov	r0, r4
 8004e88:	9309      	str	r3, [sp, #36]	; 0x24
 8004e8a:	f000 f92c 	bl	80050e6 <_Bfree>
 8004e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e90:	b9a3      	cbnz	r3, 8004ebc <_dtoa_r+0xa04>
 8004e92:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004e94:	b992      	cbnz	r2, 8004ebc <_dtoa_r+0xa04>
 8004e96:	9a08      	ldr	r2, [sp, #32]
 8004e98:	b982      	cbnz	r2, 8004ebc <_dtoa_r+0xa04>
 8004e9a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004e9e:	d029      	beq.n	8004ef4 <_dtoa_r+0xa3c>
 8004ea0:	9b02      	ldr	r3, [sp, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	dd01      	ble.n	8004eaa <_dtoa_r+0x9f2>
 8004ea6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004eaa:	9b07      	ldr	r3, [sp, #28]
 8004eac:	1c5d      	adds	r5, r3, #1
 8004eae:	f883 8000 	strb.w	r8, [r3]
 8004eb2:	e784      	b.n	8004dbe <_dtoa_r+0x906>
 8004eb4:	4638      	mov	r0, r7
 8004eb6:	e7c2      	b.n	8004e3e <_dtoa_r+0x986>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e7e3      	b.n	8004e84 <_dtoa_r+0x9cc>
 8004ebc:	9a02      	ldr	r2, [sp, #8]
 8004ebe:	2a00      	cmp	r2, #0
 8004ec0:	db04      	blt.n	8004ecc <_dtoa_r+0xa14>
 8004ec2:	d123      	bne.n	8004f0c <_dtoa_r+0xa54>
 8004ec4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004ec6:	bb0a      	cbnz	r2, 8004f0c <_dtoa_r+0xa54>
 8004ec8:	9a08      	ldr	r2, [sp, #32]
 8004eca:	b9fa      	cbnz	r2, 8004f0c <_dtoa_r+0xa54>
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	ddec      	ble.n	8004eaa <_dtoa_r+0x9f2>
 8004ed0:	4659      	mov	r1, fp
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	f000 fa93 	bl	8005400 <__lshift>
 8004eda:	4631      	mov	r1, r6
 8004edc:	4683      	mov	fp, r0
 8004ede:	f000 fae3 	bl	80054a8 <__mcmp>
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	dc03      	bgt.n	8004eee <_dtoa_r+0xa36>
 8004ee6:	d1e0      	bne.n	8004eaa <_dtoa_r+0x9f2>
 8004ee8:	f018 0f01 	tst.w	r8, #1
 8004eec:	d0dd      	beq.n	8004eaa <_dtoa_r+0x9f2>
 8004eee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004ef2:	d1d8      	bne.n	8004ea6 <_dtoa_r+0x9ee>
 8004ef4:	9b07      	ldr	r3, [sp, #28]
 8004ef6:	9a07      	ldr	r2, [sp, #28]
 8004ef8:	1c5d      	adds	r5, r3, #1
 8004efa:	2339      	movs	r3, #57	; 0x39
 8004efc:	7013      	strb	r3, [r2, #0]
 8004efe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004f02:	1e6a      	subs	r2, r5, #1
 8004f04:	2b39      	cmp	r3, #57	; 0x39
 8004f06:	d04d      	beq.n	8004fa4 <_dtoa_r+0xaec>
 8004f08:	3301      	adds	r3, #1
 8004f0a:	e052      	b.n	8004fb2 <_dtoa_r+0xafa>
 8004f0c:	9a07      	ldr	r2, [sp, #28]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f102 0501 	add.w	r5, r2, #1
 8004f14:	dd06      	ble.n	8004f24 <_dtoa_r+0xa6c>
 8004f16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004f1a:	d0eb      	beq.n	8004ef4 <_dtoa_r+0xa3c>
 8004f1c:	f108 0801 	add.w	r8, r8, #1
 8004f20:	9b07      	ldr	r3, [sp, #28]
 8004f22:	e7c4      	b.n	8004eae <_dtoa_r+0x9f6>
 8004f24:	9b06      	ldr	r3, [sp, #24]
 8004f26:	9a04      	ldr	r2, [sp, #16]
 8004f28:	1aeb      	subs	r3, r5, r3
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004f30:	d021      	beq.n	8004f76 <_dtoa_r+0xabe>
 8004f32:	4659      	mov	r1, fp
 8004f34:	2300      	movs	r3, #0
 8004f36:	220a      	movs	r2, #10
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f000 f8eb 	bl	8005114 <__multadd>
 8004f3e:	45b9      	cmp	r9, r7
 8004f40:	4683      	mov	fp, r0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	f04f 020a 	mov.w	r2, #10
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	d105      	bne.n	8004f5c <_dtoa_r+0xaa4>
 8004f50:	f000 f8e0 	bl	8005114 <__multadd>
 8004f54:	4681      	mov	r9, r0
 8004f56:	4607      	mov	r7, r0
 8004f58:	9507      	str	r5, [sp, #28]
 8004f5a:	e778      	b.n	8004e4e <_dtoa_r+0x996>
 8004f5c:	f000 f8da 	bl	8005114 <__multadd>
 8004f60:	4639      	mov	r1, r7
 8004f62:	4681      	mov	r9, r0
 8004f64:	2300      	movs	r3, #0
 8004f66:	220a      	movs	r2, #10
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f000 f8d3 	bl	8005114 <__multadd>
 8004f6e:	4607      	mov	r7, r0
 8004f70:	e7f2      	b.n	8004f58 <_dtoa_r+0xaa0>
 8004f72:	f04f 0900 	mov.w	r9, #0
 8004f76:	4659      	mov	r1, fp
 8004f78:	2201      	movs	r2, #1
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f000 fa40 	bl	8005400 <__lshift>
 8004f80:	4631      	mov	r1, r6
 8004f82:	4683      	mov	fp, r0
 8004f84:	f000 fa90 	bl	80054a8 <__mcmp>
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	dcb8      	bgt.n	8004efe <_dtoa_r+0xa46>
 8004f8c:	d102      	bne.n	8004f94 <_dtoa_r+0xadc>
 8004f8e:	f018 0f01 	tst.w	r8, #1
 8004f92:	d1b4      	bne.n	8004efe <_dtoa_r+0xa46>
 8004f94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004f98:	1e6a      	subs	r2, r5, #1
 8004f9a:	2b30      	cmp	r3, #48	; 0x30
 8004f9c:	f47f af0f 	bne.w	8004dbe <_dtoa_r+0x906>
 8004fa0:	4615      	mov	r5, r2
 8004fa2:	e7f7      	b.n	8004f94 <_dtoa_r+0xadc>
 8004fa4:	9b06      	ldr	r3, [sp, #24]
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d105      	bne.n	8004fb6 <_dtoa_r+0xafe>
 8004faa:	2331      	movs	r3, #49	; 0x31
 8004fac:	9a06      	ldr	r2, [sp, #24]
 8004fae:	f10a 0a01 	add.w	sl, sl, #1
 8004fb2:	7013      	strb	r3, [r2, #0]
 8004fb4:	e703      	b.n	8004dbe <_dtoa_r+0x906>
 8004fb6:	4615      	mov	r5, r2
 8004fb8:	e7a1      	b.n	8004efe <_dtoa_r+0xa46>
 8004fba:	4b17      	ldr	r3, [pc, #92]	; (8005018 <_dtoa_r+0xb60>)
 8004fbc:	f7ff bae1 	b.w	8004582 <_dtoa_r+0xca>
 8004fc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f47f aabb 	bne.w	800453e <_dtoa_r+0x86>
 8004fc8:	4b14      	ldr	r3, [pc, #80]	; (800501c <_dtoa_r+0xb64>)
 8004fca:	f7ff bada 	b.w	8004582 <_dtoa_r+0xca>
 8004fce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	f77f ae3f 	ble.w	8004c54 <_dtoa_r+0x79c>
 8004fd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fd8:	9308      	str	r3, [sp, #32]
 8004fda:	e653      	b.n	8004c84 <_dtoa_r+0x7cc>
 8004fdc:	9b04      	ldr	r3, [sp, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	dc03      	bgt.n	8004fea <_dtoa_r+0xb32>
 8004fe2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	f73f aed5 	bgt.w	8004d94 <_dtoa_r+0x8dc>
 8004fea:	9d06      	ldr	r5, [sp, #24]
 8004fec:	4631      	mov	r1, r6
 8004fee:	4658      	mov	r0, fp
 8004ff0:	f7ff f9d4 	bl	800439c <quorem>
 8004ff4:	9b06      	ldr	r3, [sp, #24]
 8004ff6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004ffa:	f805 8b01 	strb.w	r8, [r5], #1
 8004ffe:	9a04      	ldr	r2, [sp, #16]
 8005000:	1aeb      	subs	r3, r5, r3
 8005002:	429a      	cmp	r2, r3
 8005004:	ddb5      	ble.n	8004f72 <_dtoa_r+0xaba>
 8005006:	4659      	mov	r1, fp
 8005008:	2300      	movs	r3, #0
 800500a:	220a      	movs	r2, #10
 800500c:	4620      	mov	r0, r4
 800500e:	f000 f881 	bl	8005114 <__multadd>
 8005012:	4683      	mov	fp, r0
 8005014:	e7ea      	b.n	8004fec <_dtoa_r+0xb34>
 8005016:	bf00      	nop
 8005018:	08005bb0 	.word	0x08005bb0
 800501c:	08005bd4 	.word	0x08005bd4

08005020 <_localeconv_r>:
 8005020:	4b04      	ldr	r3, [pc, #16]	; (8005034 <_localeconv_r+0x14>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6a18      	ldr	r0, [r3, #32]
 8005026:	4b04      	ldr	r3, [pc, #16]	; (8005038 <_localeconv_r+0x18>)
 8005028:	2800      	cmp	r0, #0
 800502a:	bf08      	it	eq
 800502c:	4618      	moveq	r0, r3
 800502e:	30f0      	adds	r0, #240	; 0xf0
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	2000001c 	.word	0x2000001c
 8005038:	20000080 	.word	0x20000080

0800503c <malloc>:
 800503c:	4b02      	ldr	r3, [pc, #8]	; (8005048 <malloc+0xc>)
 800503e:	4601      	mov	r1, r0
 8005040:	6818      	ldr	r0, [r3, #0]
 8005042:	f000 bb53 	b.w	80056ec <_malloc_r>
 8005046:	bf00      	nop
 8005048:	2000001c 	.word	0x2000001c

0800504c <memchr>:
 800504c:	b510      	push	{r4, lr}
 800504e:	b2c9      	uxtb	r1, r1
 8005050:	4402      	add	r2, r0
 8005052:	4290      	cmp	r0, r2
 8005054:	4603      	mov	r3, r0
 8005056:	d101      	bne.n	800505c <memchr+0x10>
 8005058:	2300      	movs	r3, #0
 800505a:	e003      	b.n	8005064 <memchr+0x18>
 800505c:	781c      	ldrb	r4, [r3, #0]
 800505e:	3001      	adds	r0, #1
 8005060:	428c      	cmp	r4, r1
 8005062:	d1f6      	bne.n	8005052 <memchr+0x6>
 8005064:	4618      	mov	r0, r3
 8005066:	bd10      	pop	{r4, pc}

08005068 <memcpy>:
 8005068:	b510      	push	{r4, lr}
 800506a:	1e43      	subs	r3, r0, #1
 800506c:	440a      	add	r2, r1
 800506e:	4291      	cmp	r1, r2
 8005070:	d100      	bne.n	8005074 <memcpy+0xc>
 8005072:	bd10      	pop	{r4, pc}
 8005074:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005078:	f803 4f01 	strb.w	r4, [r3, #1]!
 800507c:	e7f7      	b.n	800506e <memcpy+0x6>

0800507e <_Balloc>:
 800507e:	b570      	push	{r4, r5, r6, lr}
 8005080:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005082:	4604      	mov	r4, r0
 8005084:	460e      	mov	r6, r1
 8005086:	b93d      	cbnz	r5, 8005098 <_Balloc+0x1a>
 8005088:	2010      	movs	r0, #16
 800508a:	f7ff ffd7 	bl	800503c <malloc>
 800508e:	6260      	str	r0, [r4, #36]	; 0x24
 8005090:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005094:	6005      	str	r5, [r0, #0]
 8005096:	60c5      	str	r5, [r0, #12]
 8005098:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800509a:	68eb      	ldr	r3, [r5, #12]
 800509c:	b183      	cbz	r3, 80050c0 <_Balloc+0x42>
 800509e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80050a6:	b9b8      	cbnz	r0, 80050d8 <_Balloc+0x5a>
 80050a8:	2101      	movs	r1, #1
 80050aa:	fa01 f506 	lsl.w	r5, r1, r6
 80050ae:	1d6a      	adds	r2, r5, #5
 80050b0:	0092      	lsls	r2, r2, #2
 80050b2:	4620      	mov	r0, r4
 80050b4:	f000 fabf 	bl	8005636 <_calloc_r>
 80050b8:	b160      	cbz	r0, 80050d4 <_Balloc+0x56>
 80050ba:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80050be:	e00e      	b.n	80050de <_Balloc+0x60>
 80050c0:	2221      	movs	r2, #33	; 0x21
 80050c2:	2104      	movs	r1, #4
 80050c4:	4620      	mov	r0, r4
 80050c6:	f000 fab6 	bl	8005636 <_calloc_r>
 80050ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050cc:	60e8      	str	r0, [r5, #12]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1e4      	bne.n	800509e <_Balloc+0x20>
 80050d4:	2000      	movs	r0, #0
 80050d6:	bd70      	pop	{r4, r5, r6, pc}
 80050d8:	6802      	ldr	r2, [r0, #0]
 80050da:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80050de:	2300      	movs	r3, #0
 80050e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80050e4:	e7f7      	b.n	80050d6 <_Balloc+0x58>

080050e6 <_Bfree>:
 80050e6:	b570      	push	{r4, r5, r6, lr}
 80050e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80050ea:	4606      	mov	r6, r0
 80050ec:	460d      	mov	r5, r1
 80050ee:	b93c      	cbnz	r4, 8005100 <_Bfree+0x1a>
 80050f0:	2010      	movs	r0, #16
 80050f2:	f7ff ffa3 	bl	800503c <malloc>
 80050f6:	6270      	str	r0, [r6, #36]	; 0x24
 80050f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80050fc:	6004      	str	r4, [r0, #0]
 80050fe:	60c4      	str	r4, [r0, #12]
 8005100:	b13d      	cbz	r5, 8005112 <_Bfree+0x2c>
 8005102:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005104:	686a      	ldr	r2, [r5, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800510c:	6029      	str	r1, [r5, #0]
 800510e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005112:	bd70      	pop	{r4, r5, r6, pc}

08005114 <__multadd>:
 8005114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005118:	461f      	mov	r7, r3
 800511a:	4606      	mov	r6, r0
 800511c:	460c      	mov	r4, r1
 800511e:	2300      	movs	r3, #0
 8005120:	690d      	ldr	r5, [r1, #16]
 8005122:	f101 0c14 	add.w	ip, r1, #20
 8005126:	f8dc 0000 	ldr.w	r0, [ip]
 800512a:	3301      	adds	r3, #1
 800512c:	b281      	uxth	r1, r0
 800512e:	fb02 7101 	mla	r1, r2, r1, r7
 8005132:	0c00      	lsrs	r0, r0, #16
 8005134:	0c0f      	lsrs	r7, r1, #16
 8005136:	fb02 7000 	mla	r0, r2, r0, r7
 800513a:	b289      	uxth	r1, r1
 800513c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005140:	429d      	cmp	r5, r3
 8005142:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005146:	f84c 1b04 	str.w	r1, [ip], #4
 800514a:	dcec      	bgt.n	8005126 <__multadd+0x12>
 800514c:	b1d7      	cbz	r7, 8005184 <__multadd+0x70>
 800514e:	68a3      	ldr	r3, [r4, #8]
 8005150:	42ab      	cmp	r3, r5
 8005152:	dc12      	bgt.n	800517a <__multadd+0x66>
 8005154:	6861      	ldr	r1, [r4, #4]
 8005156:	4630      	mov	r0, r6
 8005158:	3101      	adds	r1, #1
 800515a:	f7ff ff90 	bl	800507e <_Balloc>
 800515e:	4680      	mov	r8, r0
 8005160:	6922      	ldr	r2, [r4, #16]
 8005162:	f104 010c 	add.w	r1, r4, #12
 8005166:	3202      	adds	r2, #2
 8005168:	0092      	lsls	r2, r2, #2
 800516a:	300c      	adds	r0, #12
 800516c:	f7ff ff7c 	bl	8005068 <memcpy>
 8005170:	4621      	mov	r1, r4
 8005172:	4630      	mov	r0, r6
 8005174:	f7ff ffb7 	bl	80050e6 <_Bfree>
 8005178:	4644      	mov	r4, r8
 800517a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800517e:	3501      	adds	r5, #1
 8005180:	615f      	str	r7, [r3, #20]
 8005182:	6125      	str	r5, [r4, #16]
 8005184:	4620      	mov	r0, r4
 8005186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800518a <__hi0bits>:
 800518a:	0c02      	lsrs	r2, r0, #16
 800518c:	0412      	lsls	r2, r2, #16
 800518e:	4603      	mov	r3, r0
 8005190:	b9b2      	cbnz	r2, 80051c0 <__hi0bits+0x36>
 8005192:	0403      	lsls	r3, r0, #16
 8005194:	2010      	movs	r0, #16
 8005196:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800519a:	bf04      	itt	eq
 800519c:	021b      	lsleq	r3, r3, #8
 800519e:	3008      	addeq	r0, #8
 80051a0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80051a4:	bf04      	itt	eq
 80051a6:	011b      	lsleq	r3, r3, #4
 80051a8:	3004      	addeq	r0, #4
 80051aa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80051ae:	bf04      	itt	eq
 80051b0:	009b      	lsleq	r3, r3, #2
 80051b2:	3002      	addeq	r0, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	db06      	blt.n	80051c6 <__hi0bits+0x3c>
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	d503      	bpl.n	80051c4 <__hi0bits+0x3a>
 80051bc:	3001      	adds	r0, #1
 80051be:	4770      	bx	lr
 80051c0:	2000      	movs	r0, #0
 80051c2:	e7e8      	b.n	8005196 <__hi0bits+0xc>
 80051c4:	2020      	movs	r0, #32
 80051c6:	4770      	bx	lr

080051c8 <__lo0bits>:
 80051c8:	6803      	ldr	r3, [r0, #0]
 80051ca:	4601      	mov	r1, r0
 80051cc:	f013 0207 	ands.w	r2, r3, #7
 80051d0:	d00b      	beq.n	80051ea <__lo0bits+0x22>
 80051d2:	07da      	lsls	r2, r3, #31
 80051d4:	d423      	bmi.n	800521e <__lo0bits+0x56>
 80051d6:	0798      	lsls	r0, r3, #30
 80051d8:	bf49      	itett	mi
 80051da:	085b      	lsrmi	r3, r3, #1
 80051dc:	089b      	lsrpl	r3, r3, #2
 80051de:	2001      	movmi	r0, #1
 80051e0:	600b      	strmi	r3, [r1, #0]
 80051e2:	bf5c      	itt	pl
 80051e4:	600b      	strpl	r3, [r1, #0]
 80051e6:	2002      	movpl	r0, #2
 80051e8:	4770      	bx	lr
 80051ea:	b298      	uxth	r0, r3
 80051ec:	b9a8      	cbnz	r0, 800521a <__lo0bits+0x52>
 80051ee:	2010      	movs	r0, #16
 80051f0:	0c1b      	lsrs	r3, r3, #16
 80051f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80051f6:	bf04      	itt	eq
 80051f8:	0a1b      	lsreq	r3, r3, #8
 80051fa:	3008      	addeq	r0, #8
 80051fc:	071a      	lsls	r2, r3, #28
 80051fe:	bf04      	itt	eq
 8005200:	091b      	lsreq	r3, r3, #4
 8005202:	3004      	addeq	r0, #4
 8005204:	079a      	lsls	r2, r3, #30
 8005206:	bf04      	itt	eq
 8005208:	089b      	lsreq	r3, r3, #2
 800520a:	3002      	addeq	r0, #2
 800520c:	07da      	lsls	r2, r3, #31
 800520e:	d402      	bmi.n	8005216 <__lo0bits+0x4e>
 8005210:	085b      	lsrs	r3, r3, #1
 8005212:	d006      	beq.n	8005222 <__lo0bits+0x5a>
 8005214:	3001      	adds	r0, #1
 8005216:	600b      	str	r3, [r1, #0]
 8005218:	4770      	bx	lr
 800521a:	4610      	mov	r0, r2
 800521c:	e7e9      	b.n	80051f2 <__lo0bits+0x2a>
 800521e:	2000      	movs	r0, #0
 8005220:	4770      	bx	lr
 8005222:	2020      	movs	r0, #32
 8005224:	4770      	bx	lr

08005226 <__i2b>:
 8005226:	b510      	push	{r4, lr}
 8005228:	460c      	mov	r4, r1
 800522a:	2101      	movs	r1, #1
 800522c:	f7ff ff27 	bl	800507e <_Balloc>
 8005230:	2201      	movs	r2, #1
 8005232:	6144      	str	r4, [r0, #20]
 8005234:	6102      	str	r2, [r0, #16]
 8005236:	bd10      	pop	{r4, pc}

08005238 <__multiply>:
 8005238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523c:	4614      	mov	r4, r2
 800523e:	690a      	ldr	r2, [r1, #16]
 8005240:	6923      	ldr	r3, [r4, #16]
 8005242:	4688      	mov	r8, r1
 8005244:	429a      	cmp	r2, r3
 8005246:	bfbe      	ittt	lt
 8005248:	460b      	movlt	r3, r1
 800524a:	46a0      	movlt	r8, r4
 800524c:	461c      	movlt	r4, r3
 800524e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005252:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005256:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800525a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800525e:	eb07 0609 	add.w	r6, r7, r9
 8005262:	42b3      	cmp	r3, r6
 8005264:	bfb8      	it	lt
 8005266:	3101      	addlt	r1, #1
 8005268:	f7ff ff09 	bl	800507e <_Balloc>
 800526c:	f100 0514 	add.w	r5, r0, #20
 8005270:	462b      	mov	r3, r5
 8005272:	2200      	movs	r2, #0
 8005274:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005278:	4573      	cmp	r3, lr
 800527a:	d316      	bcc.n	80052aa <__multiply+0x72>
 800527c:	f104 0214 	add.w	r2, r4, #20
 8005280:	f108 0114 	add.w	r1, r8, #20
 8005284:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005288:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	9b00      	ldr	r3, [sp, #0]
 8005290:	9201      	str	r2, [sp, #4]
 8005292:	4293      	cmp	r3, r2
 8005294:	d80c      	bhi.n	80052b0 <__multiply+0x78>
 8005296:	2e00      	cmp	r6, #0
 8005298:	dd03      	ble.n	80052a2 <__multiply+0x6a>
 800529a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d05d      	beq.n	800535e <__multiply+0x126>
 80052a2:	6106      	str	r6, [r0, #16]
 80052a4:	b003      	add	sp, #12
 80052a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052aa:	f843 2b04 	str.w	r2, [r3], #4
 80052ae:	e7e3      	b.n	8005278 <__multiply+0x40>
 80052b0:	f8b2 b000 	ldrh.w	fp, [r2]
 80052b4:	f1bb 0f00 	cmp.w	fp, #0
 80052b8:	d023      	beq.n	8005302 <__multiply+0xca>
 80052ba:	4689      	mov	r9, r1
 80052bc:	46ac      	mov	ip, r5
 80052be:	f04f 0800 	mov.w	r8, #0
 80052c2:	f859 4b04 	ldr.w	r4, [r9], #4
 80052c6:	f8dc a000 	ldr.w	sl, [ip]
 80052ca:	b2a3      	uxth	r3, r4
 80052cc:	fa1f fa8a 	uxth.w	sl, sl
 80052d0:	fb0b a303 	mla	r3, fp, r3, sl
 80052d4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80052d8:	f8dc 4000 	ldr.w	r4, [ip]
 80052dc:	4443      	add	r3, r8
 80052de:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80052e2:	fb0b 840a 	mla	r4, fp, sl, r8
 80052e6:	46e2      	mov	sl, ip
 80052e8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80052f2:	454f      	cmp	r7, r9
 80052f4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80052f8:	f84a 3b04 	str.w	r3, [sl], #4
 80052fc:	d82b      	bhi.n	8005356 <__multiply+0x11e>
 80052fe:	f8cc 8004 	str.w	r8, [ip, #4]
 8005302:	9b01      	ldr	r3, [sp, #4]
 8005304:	3204      	adds	r2, #4
 8005306:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800530a:	f1ba 0f00 	cmp.w	sl, #0
 800530e:	d020      	beq.n	8005352 <__multiply+0x11a>
 8005310:	4689      	mov	r9, r1
 8005312:	46a8      	mov	r8, r5
 8005314:	f04f 0b00 	mov.w	fp, #0
 8005318:	682b      	ldr	r3, [r5, #0]
 800531a:	f8b9 c000 	ldrh.w	ip, [r9]
 800531e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005322:	b29b      	uxth	r3, r3
 8005324:	fb0a 440c 	mla	r4, sl, ip, r4
 8005328:	46c4      	mov	ip, r8
 800532a:	445c      	add	r4, fp
 800532c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005330:	f84c 3b04 	str.w	r3, [ip], #4
 8005334:	f859 3b04 	ldr.w	r3, [r9], #4
 8005338:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800533c:	0c1b      	lsrs	r3, r3, #16
 800533e:	fb0a b303 	mla	r3, sl, r3, fp
 8005342:	454f      	cmp	r7, r9
 8005344:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005348:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800534c:	d805      	bhi.n	800535a <__multiply+0x122>
 800534e:	f8c8 3004 	str.w	r3, [r8, #4]
 8005352:	3504      	adds	r5, #4
 8005354:	e79b      	b.n	800528e <__multiply+0x56>
 8005356:	46d4      	mov	ip, sl
 8005358:	e7b3      	b.n	80052c2 <__multiply+0x8a>
 800535a:	46e0      	mov	r8, ip
 800535c:	e7dd      	b.n	800531a <__multiply+0xe2>
 800535e:	3e01      	subs	r6, #1
 8005360:	e799      	b.n	8005296 <__multiply+0x5e>
	...

08005364 <__pow5mult>:
 8005364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005368:	4615      	mov	r5, r2
 800536a:	f012 0203 	ands.w	r2, r2, #3
 800536e:	4606      	mov	r6, r0
 8005370:	460f      	mov	r7, r1
 8005372:	d007      	beq.n	8005384 <__pow5mult+0x20>
 8005374:	4c21      	ldr	r4, [pc, #132]	; (80053fc <__pow5mult+0x98>)
 8005376:	3a01      	subs	r2, #1
 8005378:	2300      	movs	r3, #0
 800537a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800537e:	f7ff fec9 	bl	8005114 <__multadd>
 8005382:	4607      	mov	r7, r0
 8005384:	10ad      	asrs	r5, r5, #2
 8005386:	d035      	beq.n	80053f4 <__pow5mult+0x90>
 8005388:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800538a:	b93c      	cbnz	r4, 800539c <__pow5mult+0x38>
 800538c:	2010      	movs	r0, #16
 800538e:	f7ff fe55 	bl	800503c <malloc>
 8005392:	6270      	str	r0, [r6, #36]	; 0x24
 8005394:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005398:	6004      	str	r4, [r0, #0]
 800539a:	60c4      	str	r4, [r0, #12]
 800539c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80053a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80053a4:	b94c      	cbnz	r4, 80053ba <__pow5mult+0x56>
 80053a6:	f240 2171 	movw	r1, #625	; 0x271
 80053aa:	4630      	mov	r0, r6
 80053ac:	f7ff ff3b 	bl	8005226 <__i2b>
 80053b0:	2300      	movs	r3, #0
 80053b2:	4604      	mov	r4, r0
 80053b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80053b8:	6003      	str	r3, [r0, #0]
 80053ba:	f04f 0800 	mov.w	r8, #0
 80053be:	07eb      	lsls	r3, r5, #31
 80053c0:	d50a      	bpl.n	80053d8 <__pow5mult+0x74>
 80053c2:	4639      	mov	r1, r7
 80053c4:	4622      	mov	r2, r4
 80053c6:	4630      	mov	r0, r6
 80053c8:	f7ff ff36 	bl	8005238 <__multiply>
 80053cc:	4681      	mov	r9, r0
 80053ce:	4639      	mov	r1, r7
 80053d0:	4630      	mov	r0, r6
 80053d2:	f7ff fe88 	bl	80050e6 <_Bfree>
 80053d6:	464f      	mov	r7, r9
 80053d8:	106d      	asrs	r5, r5, #1
 80053da:	d00b      	beq.n	80053f4 <__pow5mult+0x90>
 80053dc:	6820      	ldr	r0, [r4, #0]
 80053de:	b938      	cbnz	r0, 80053f0 <__pow5mult+0x8c>
 80053e0:	4622      	mov	r2, r4
 80053e2:	4621      	mov	r1, r4
 80053e4:	4630      	mov	r0, r6
 80053e6:	f7ff ff27 	bl	8005238 <__multiply>
 80053ea:	6020      	str	r0, [r4, #0]
 80053ec:	f8c0 8000 	str.w	r8, [r0]
 80053f0:	4604      	mov	r4, r0
 80053f2:	e7e4      	b.n	80053be <__pow5mult+0x5a>
 80053f4:	4638      	mov	r0, r7
 80053f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053fa:	bf00      	nop
 80053fc:	08005cd8 	.word	0x08005cd8

08005400 <__lshift>:
 8005400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005404:	460c      	mov	r4, r1
 8005406:	4607      	mov	r7, r0
 8005408:	4616      	mov	r6, r2
 800540a:	6923      	ldr	r3, [r4, #16]
 800540c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005410:	eb0a 0903 	add.w	r9, sl, r3
 8005414:	6849      	ldr	r1, [r1, #4]
 8005416:	68a3      	ldr	r3, [r4, #8]
 8005418:	f109 0501 	add.w	r5, r9, #1
 800541c:	42ab      	cmp	r3, r5
 800541e:	db32      	blt.n	8005486 <__lshift+0x86>
 8005420:	4638      	mov	r0, r7
 8005422:	f7ff fe2c 	bl	800507e <_Balloc>
 8005426:	2300      	movs	r3, #0
 8005428:	4680      	mov	r8, r0
 800542a:	461a      	mov	r2, r3
 800542c:	f100 0114 	add.w	r1, r0, #20
 8005430:	4553      	cmp	r3, sl
 8005432:	db2b      	blt.n	800548c <__lshift+0x8c>
 8005434:	6920      	ldr	r0, [r4, #16]
 8005436:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800543a:	f104 0314 	add.w	r3, r4, #20
 800543e:	f016 021f 	ands.w	r2, r6, #31
 8005442:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005446:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800544a:	d025      	beq.n	8005498 <__lshift+0x98>
 800544c:	2000      	movs	r0, #0
 800544e:	f1c2 0e20 	rsb	lr, r2, #32
 8005452:	468a      	mov	sl, r1
 8005454:	681e      	ldr	r6, [r3, #0]
 8005456:	4096      	lsls	r6, r2
 8005458:	4330      	orrs	r0, r6
 800545a:	f84a 0b04 	str.w	r0, [sl], #4
 800545e:	f853 0b04 	ldr.w	r0, [r3], #4
 8005462:	459c      	cmp	ip, r3
 8005464:	fa20 f00e 	lsr.w	r0, r0, lr
 8005468:	d814      	bhi.n	8005494 <__lshift+0x94>
 800546a:	6048      	str	r0, [r1, #4]
 800546c:	b108      	cbz	r0, 8005472 <__lshift+0x72>
 800546e:	f109 0502 	add.w	r5, r9, #2
 8005472:	3d01      	subs	r5, #1
 8005474:	4638      	mov	r0, r7
 8005476:	f8c8 5010 	str.w	r5, [r8, #16]
 800547a:	4621      	mov	r1, r4
 800547c:	f7ff fe33 	bl	80050e6 <_Bfree>
 8005480:	4640      	mov	r0, r8
 8005482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005486:	3101      	adds	r1, #1
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	e7c7      	b.n	800541c <__lshift+0x1c>
 800548c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005490:	3301      	adds	r3, #1
 8005492:	e7cd      	b.n	8005430 <__lshift+0x30>
 8005494:	4651      	mov	r1, sl
 8005496:	e7dc      	b.n	8005452 <__lshift+0x52>
 8005498:	3904      	subs	r1, #4
 800549a:	f853 2b04 	ldr.w	r2, [r3], #4
 800549e:	459c      	cmp	ip, r3
 80054a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80054a4:	d8f9      	bhi.n	800549a <__lshift+0x9a>
 80054a6:	e7e4      	b.n	8005472 <__lshift+0x72>

080054a8 <__mcmp>:
 80054a8:	6903      	ldr	r3, [r0, #16]
 80054aa:	690a      	ldr	r2, [r1, #16]
 80054ac:	b530      	push	{r4, r5, lr}
 80054ae:	1a9b      	subs	r3, r3, r2
 80054b0:	d10c      	bne.n	80054cc <__mcmp+0x24>
 80054b2:	0092      	lsls	r2, r2, #2
 80054b4:	3014      	adds	r0, #20
 80054b6:	3114      	adds	r1, #20
 80054b8:	1884      	adds	r4, r0, r2
 80054ba:	4411      	add	r1, r2
 80054bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80054c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80054c4:	4295      	cmp	r5, r2
 80054c6:	d003      	beq.n	80054d0 <__mcmp+0x28>
 80054c8:	d305      	bcc.n	80054d6 <__mcmp+0x2e>
 80054ca:	2301      	movs	r3, #1
 80054cc:	4618      	mov	r0, r3
 80054ce:	bd30      	pop	{r4, r5, pc}
 80054d0:	42a0      	cmp	r0, r4
 80054d2:	d3f3      	bcc.n	80054bc <__mcmp+0x14>
 80054d4:	e7fa      	b.n	80054cc <__mcmp+0x24>
 80054d6:	f04f 33ff 	mov.w	r3, #4294967295
 80054da:	e7f7      	b.n	80054cc <__mcmp+0x24>

080054dc <__mdiff>:
 80054dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054e0:	460d      	mov	r5, r1
 80054e2:	4607      	mov	r7, r0
 80054e4:	4611      	mov	r1, r2
 80054e6:	4628      	mov	r0, r5
 80054e8:	4614      	mov	r4, r2
 80054ea:	f7ff ffdd 	bl	80054a8 <__mcmp>
 80054ee:	1e06      	subs	r6, r0, #0
 80054f0:	d108      	bne.n	8005504 <__mdiff+0x28>
 80054f2:	4631      	mov	r1, r6
 80054f4:	4638      	mov	r0, r7
 80054f6:	f7ff fdc2 	bl	800507e <_Balloc>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005504:	bfa4      	itt	ge
 8005506:	4623      	movge	r3, r4
 8005508:	462c      	movge	r4, r5
 800550a:	4638      	mov	r0, r7
 800550c:	6861      	ldr	r1, [r4, #4]
 800550e:	bfa6      	itte	ge
 8005510:	461d      	movge	r5, r3
 8005512:	2600      	movge	r6, #0
 8005514:	2601      	movlt	r6, #1
 8005516:	f7ff fdb2 	bl	800507e <_Balloc>
 800551a:	f04f 0e00 	mov.w	lr, #0
 800551e:	60c6      	str	r6, [r0, #12]
 8005520:	692b      	ldr	r3, [r5, #16]
 8005522:	6926      	ldr	r6, [r4, #16]
 8005524:	f104 0214 	add.w	r2, r4, #20
 8005528:	f105 0914 	add.w	r9, r5, #20
 800552c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005530:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005534:	f100 0114 	add.w	r1, r0, #20
 8005538:	f852 ab04 	ldr.w	sl, [r2], #4
 800553c:	f859 5b04 	ldr.w	r5, [r9], #4
 8005540:	fa1f f38a 	uxth.w	r3, sl
 8005544:	4473      	add	r3, lr
 8005546:	b2ac      	uxth	r4, r5
 8005548:	1b1b      	subs	r3, r3, r4
 800554a:	0c2c      	lsrs	r4, r5, #16
 800554c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005550:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005554:	b29b      	uxth	r3, r3
 8005556:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800555a:	45c8      	cmp	r8, r9
 800555c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005560:	4694      	mov	ip, r2
 8005562:	f841 4b04 	str.w	r4, [r1], #4
 8005566:	d8e7      	bhi.n	8005538 <__mdiff+0x5c>
 8005568:	45bc      	cmp	ip, r7
 800556a:	d304      	bcc.n	8005576 <__mdiff+0x9a>
 800556c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005570:	b183      	cbz	r3, 8005594 <__mdiff+0xb8>
 8005572:	6106      	str	r6, [r0, #16]
 8005574:	e7c4      	b.n	8005500 <__mdiff+0x24>
 8005576:	f85c 4b04 	ldr.w	r4, [ip], #4
 800557a:	b2a2      	uxth	r2, r4
 800557c:	4472      	add	r2, lr
 800557e:	1413      	asrs	r3, r2, #16
 8005580:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005584:	b292      	uxth	r2, r2
 8005586:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800558a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800558e:	f841 2b04 	str.w	r2, [r1], #4
 8005592:	e7e9      	b.n	8005568 <__mdiff+0x8c>
 8005594:	3e01      	subs	r6, #1
 8005596:	e7e9      	b.n	800556c <__mdiff+0x90>

08005598 <__d2b>:
 8005598:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800559c:	461c      	mov	r4, r3
 800559e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80055a2:	2101      	movs	r1, #1
 80055a4:	4690      	mov	r8, r2
 80055a6:	f7ff fd6a 	bl	800507e <_Balloc>
 80055aa:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80055ae:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80055b2:	4607      	mov	r7, r0
 80055b4:	bb34      	cbnz	r4, 8005604 <__d2b+0x6c>
 80055b6:	9201      	str	r2, [sp, #4]
 80055b8:	f1b8 0200 	subs.w	r2, r8, #0
 80055bc:	d027      	beq.n	800560e <__d2b+0x76>
 80055be:	a802      	add	r0, sp, #8
 80055c0:	f840 2d08 	str.w	r2, [r0, #-8]!
 80055c4:	f7ff fe00 	bl	80051c8 <__lo0bits>
 80055c8:	9900      	ldr	r1, [sp, #0]
 80055ca:	b1f0      	cbz	r0, 800560a <__d2b+0x72>
 80055cc:	9a01      	ldr	r2, [sp, #4]
 80055ce:	f1c0 0320 	rsb	r3, r0, #32
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	430b      	orrs	r3, r1
 80055d8:	40c2      	lsrs	r2, r0
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	9201      	str	r2, [sp, #4]
 80055de:	9b01      	ldr	r3, [sp, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	bf14      	ite	ne
 80055e4:	2102      	movne	r1, #2
 80055e6:	2101      	moveq	r1, #1
 80055e8:	61bb      	str	r3, [r7, #24]
 80055ea:	6139      	str	r1, [r7, #16]
 80055ec:	b1c4      	cbz	r4, 8005620 <__d2b+0x88>
 80055ee:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80055f2:	4404      	add	r4, r0
 80055f4:	6034      	str	r4, [r6, #0]
 80055f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80055fa:	6028      	str	r0, [r5, #0]
 80055fc:	4638      	mov	r0, r7
 80055fe:	b002      	add	sp, #8
 8005600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005604:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005608:	e7d5      	b.n	80055b6 <__d2b+0x1e>
 800560a:	6179      	str	r1, [r7, #20]
 800560c:	e7e7      	b.n	80055de <__d2b+0x46>
 800560e:	a801      	add	r0, sp, #4
 8005610:	f7ff fdda 	bl	80051c8 <__lo0bits>
 8005614:	2101      	movs	r1, #1
 8005616:	9b01      	ldr	r3, [sp, #4]
 8005618:	6139      	str	r1, [r7, #16]
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	3020      	adds	r0, #32
 800561e:	e7e5      	b.n	80055ec <__d2b+0x54>
 8005620:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005624:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005628:	6030      	str	r0, [r6, #0]
 800562a:	6918      	ldr	r0, [r3, #16]
 800562c:	f7ff fdad 	bl	800518a <__hi0bits>
 8005630:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005634:	e7e1      	b.n	80055fa <__d2b+0x62>

08005636 <_calloc_r>:
 8005636:	b538      	push	{r3, r4, r5, lr}
 8005638:	fb02 f401 	mul.w	r4, r2, r1
 800563c:	4621      	mov	r1, r4
 800563e:	f000 f855 	bl	80056ec <_malloc_r>
 8005642:	4605      	mov	r5, r0
 8005644:	b118      	cbz	r0, 800564e <_calloc_r+0x18>
 8005646:	4622      	mov	r2, r4
 8005648:	2100      	movs	r1, #0
 800564a:	f7fe fa2f 	bl	8003aac <memset>
 800564e:	4628      	mov	r0, r5
 8005650:	bd38      	pop	{r3, r4, r5, pc}
	...

08005654 <_free_r>:
 8005654:	b538      	push	{r3, r4, r5, lr}
 8005656:	4605      	mov	r5, r0
 8005658:	2900      	cmp	r1, #0
 800565a:	d043      	beq.n	80056e4 <_free_r+0x90>
 800565c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005660:	1f0c      	subs	r4, r1, #4
 8005662:	2b00      	cmp	r3, #0
 8005664:	bfb8      	it	lt
 8005666:	18e4      	addlt	r4, r4, r3
 8005668:	f000 fa27 	bl	8005aba <__malloc_lock>
 800566c:	4a1e      	ldr	r2, [pc, #120]	; (80056e8 <_free_r+0x94>)
 800566e:	6813      	ldr	r3, [r2, #0]
 8005670:	4610      	mov	r0, r2
 8005672:	b933      	cbnz	r3, 8005682 <_free_r+0x2e>
 8005674:	6063      	str	r3, [r4, #4]
 8005676:	6014      	str	r4, [r2, #0]
 8005678:	4628      	mov	r0, r5
 800567a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800567e:	f000 ba1d 	b.w	8005abc <__malloc_unlock>
 8005682:	42a3      	cmp	r3, r4
 8005684:	d90b      	bls.n	800569e <_free_r+0x4a>
 8005686:	6821      	ldr	r1, [r4, #0]
 8005688:	1862      	adds	r2, r4, r1
 800568a:	4293      	cmp	r3, r2
 800568c:	bf01      	itttt	eq
 800568e:	681a      	ldreq	r2, [r3, #0]
 8005690:	685b      	ldreq	r3, [r3, #4]
 8005692:	1852      	addeq	r2, r2, r1
 8005694:	6022      	streq	r2, [r4, #0]
 8005696:	6063      	str	r3, [r4, #4]
 8005698:	6004      	str	r4, [r0, #0]
 800569a:	e7ed      	b.n	8005678 <_free_r+0x24>
 800569c:	4613      	mov	r3, r2
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	b10a      	cbz	r2, 80056a6 <_free_r+0x52>
 80056a2:	42a2      	cmp	r2, r4
 80056a4:	d9fa      	bls.n	800569c <_free_r+0x48>
 80056a6:	6819      	ldr	r1, [r3, #0]
 80056a8:	1858      	adds	r0, r3, r1
 80056aa:	42a0      	cmp	r0, r4
 80056ac:	d10b      	bne.n	80056c6 <_free_r+0x72>
 80056ae:	6820      	ldr	r0, [r4, #0]
 80056b0:	4401      	add	r1, r0
 80056b2:	1858      	adds	r0, r3, r1
 80056b4:	4282      	cmp	r2, r0
 80056b6:	6019      	str	r1, [r3, #0]
 80056b8:	d1de      	bne.n	8005678 <_free_r+0x24>
 80056ba:	6810      	ldr	r0, [r2, #0]
 80056bc:	6852      	ldr	r2, [r2, #4]
 80056be:	4401      	add	r1, r0
 80056c0:	6019      	str	r1, [r3, #0]
 80056c2:	605a      	str	r2, [r3, #4]
 80056c4:	e7d8      	b.n	8005678 <_free_r+0x24>
 80056c6:	d902      	bls.n	80056ce <_free_r+0x7a>
 80056c8:	230c      	movs	r3, #12
 80056ca:	602b      	str	r3, [r5, #0]
 80056cc:	e7d4      	b.n	8005678 <_free_r+0x24>
 80056ce:	6820      	ldr	r0, [r4, #0]
 80056d0:	1821      	adds	r1, r4, r0
 80056d2:	428a      	cmp	r2, r1
 80056d4:	bf01      	itttt	eq
 80056d6:	6811      	ldreq	r1, [r2, #0]
 80056d8:	6852      	ldreq	r2, [r2, #4]
 80056da:	1809      	addeq	r1, r1, r0
 80056dc:	6021      	streq	r1, [r4, #0]
 80056de:	6062      	str	r2, [r4, #4]
 80056e0:	605c      	str	r4, [r3, #4]
 80056e2:	e7c9      	b.n	8005678 <_free_r+0x24>
 80056e4:	bd38      	pop	{r3, r4, r5, pc}
 80056e6:	bf00      	nop
 80056e8:	2000021c 	.word	0x2000021c

080056ec <_malloc_r>:
 80056ec:	b570      	push	{r4, r5, r6, lr}
 80056ee:	1ccd      	adds	r5, r1, #3
 80056f0:	f025 0503 	bic.w	r5, r5, #3
 80056f4:	3508      	adds	r5, #8
 80056f6:	2d0c      	cmp	r5, #12
 80056f8:	bf38      	it	cc
 80056fa:	250c      	movcc	r5, #12
 80056fc:	2d00      	cmp	r5, #0
 80056fe:	4606      	mov	r6, r0
 8005700:	db01      	blt.n	8005706 <_malloc_r+0x1a>
 8005702:	42a9      	cmp	r1, r5
 8005704:	d903      	bls.n	800570e <_malloc_r+0x22>
 8005706:	230c      	movs	r3, #12
 8005708:	6033      	str	r3, [r6, #0]
 800570a:	2000      	movs	r0, #0
 800570c:	bd70      	pop	{r4, r5, r6, pc}
 800570e:	f000 f9d4 	bl	8005aba <__malloc_lock>
 8005712:	4a21      	ldr	r2, [pc, #132]	; (8005798 <_malloc_r+0xac>)
 8005714:	6814      	ldr	r4, [r2, #0]
 8005716:	4621      	mov	r1, r4
 8005718:	b991      	cbnz	r1, 8005740 <_malloc_r+0x54>
 800571a:	4c20      	ldr	r4, [pc, #128]	; (800579c <_malloc_r+0xb0>)
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	b91b      	cbnz	r3, 8005728 <_malloc_r+0x3c>
 8005720:	4630      	mov	r0, r6
 8005722:	f000 f98f 	bl	8005a44 <_sbrk_r>
 8005726:	6020      	str	r0, [r4, #0]
 8005728:	4629      	mov	r1, r5
 800572a:	4630      	mov	r0, r6
 800572c:	f000 f98a 	bl	8005a44 <_sbrk_r>
 8005730:	1c43      	adds	r3, r0, #1
 8005732:	d124      	bne.n	800577e <_malloc_r+0x92>
 8005734:	230c      	movs	r3, #12
 8005736:	4630      	mov	r0, r6
 8005738:	6033      	str	r3, [r6, #0]
 800573a:	f000 f9bf 	bl	8005abc <__malloc_unlock>
 800573e:	e7e4      	b.n	800570a <_malloc_r+0x1e>
 8005740:	680b      	ldr	r3, [r1, #0]
 8005742:	1b5b      	subs	r3, r3, r5
 8005744:	d418      	bmi.n	8005778 <_malloc_r+0x8c>
 8005746:	2b0b      	cmp	r3, #11
 8005748:	d90f      	bls.n	800576a <_malloc_r+0x7e>
 800574a:	600b      	str	r3, [r1, #0]
 800574c:	18cc      	adds	r4, r1, r3
 800574e:	50cd      	str	r5, [r1, r3]
 8005750:	4630      	mov	r0, r6
 8005752:	f000 f9b3 	bl	8005abc <__malloc_unlock>
 8005756:	f104 000b 	add.w	r0, r4, #11
 800575a:	1d23      	adds	r3, r4, #4
 800575c:	f020 0007 	bic.w	r0, r0, #7
 8005760:	1ac3      	subs	r3, r0, r3
 8005762:	d0d3      	beq.n	800570c <_malloc_r+0x20>
 8005764:	425a      	negs	r2, r3
 8005766:	50e2      	str	r2, [r4, r3]
 8005768:	e7d0      	b.n	800570c <_malloc_r+0x20>
 800576a:	684b      	ldr	r3, [r1, #4]
 800576c:	428c      	cmp	r4, r1
 800576e:	bf16      	itet	ne
 8005770:	6063      	strne	r3, [r4, #4]
 8005772:	6013      	streq	r3, [r2, #0]
 8005774:	460c      	movne	r4, r1
 8005776:	e7eb      	b.n	8005750 <_malloc_r+0x64>
 8005778:	460c      	mov	r4, r1
 800577a:	6849      	ldr	r1, [r1, #4]
 800577c:	e7cc      	b.n	8005718 <_malloc_r+0x2c>
 800577e:	1cc4      	adds	r4, r0, #3
 8005780:	f024 0403 	bic.w	r4, r4, #3
 8005784:	42a0      	cmp	r0, r4
 8005786:	d005      	beq.n	8005794 <_malloc_r+0xa8>
 8005788:	1a21      	subs	r1, r4, r0
 800578a:	4630      	mov	r0, r6
 800578c:	f000 f95a 	bl	8005a44 <_sbrk_r>
 8005790:	3001      	adds	r0, #1
 8005792:	d0cf      	beq.n	8005734 <_malloc_r+0x48>
 8005794:	6025      	str	r5, [r4, #0]
 8005796:	e7db      	b.n	8005750 <_malloc_r+0x64>
 8005798:	2000021c 	.word	0x2000021c
 800579c:	20000220 	.word	0x20000220

080057a0 <__ssputs_r>:
 80057a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a4:	688e      	ldr	r6, [r1, #8]
 80057a6:	4682      	mov	sl, r0
 80057a8:	429e      	cmp	r6, r3
 80057aa:	460c      	mov	r4, r1
 80057ac:	4690      	mov	r8, r2
 80057ae:	4699      	mov	r9, r3
 80057b0:	d837      	bhi.n	8005822 <__ssputs_r+0x82>
 80057b2:	898a      	ldrh	r2, [r1, #12]
 80057b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057b8:	d031      	beq.n	800581e <__ssputs_r+0x7e>
 80057ba:	2302      	movs	r3, #2
 80057bc:	6825      	ldr	r5, [r4, #0]
 80057be:	6909      	ldr	r1, [r1, #16]
 80057c0:	1a6f      	subs	r7, r5, r1
 80057c2:	6965      	ldr	r5, [r4, #20]
 80057c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80057cc:	f109 0301 	add.w	r3, r9, #1
 80057d0:	443b      	add	r3, r7
 80057d2:	429d      	cmp	r5, r3
 80057d4:	bf38      	it	cc
 80057d6:	461d      	movcc	r5, r3
 80057d8:	0553      	lsls	r3, r2, #21
 80057da:	d530      	bpl.n	800583e <__ssputs_r+0x9e>
 80057dc:	4629      	mov	r1, r5
 80057de:	f7ff ff85 	bl	80056ec <_malloc_r>
 80057e2:	4606      	mov	r6, r0
 80057e4:	b950      	cbnz	r0, 80057fc <__ssputs_r+0x5c>
 80057e6:	230c      	movs	r3, #12
 80057e8:	f04f 30ff 	mov.w	r0, #4294967295
 80057ec:	f8ca 3000 	str.w	r3, [sl]
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f6:	81a3      	strh	r3, [r4, #12]
 80057f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057fc:	463a      	mov	r2, r7
 80057fe:	6921      	ldr	r1, [r4, #16]
 8005800:	f7ff fc32 	bl	8005068 <memcpy>
 8005804:	89a3      	ldrh	r3, [r4, #12]
 8005806:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800580a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800580e:	81a3      	strh	r3, [r4, #12]
 8005810:	6126      	str	r6, [r4, #16]
 8005812:	443e      	add	r6, r7
 8005814:	6026      	str	r6, [r4, #0]
 8005816:	464e      	mov	r6, r9
 8005818:	6165      	str	r5, [r4, #20]
 800581a:	1bed      	subs	r5, r5, r7
 800581c:	60a5      	str	r5, [r4, #8]
 800581e:	454e      	cmp	r6, r9
 8005820:	d900      	bls.n	8005824 <__ssputs_r+0x84>
 8005822:	464e      	mov	r6, r9
 8005824:	4632      	mov	r2, r6
 8005826:	4641      	mov	r1, r8
 8005828:	6820      	ldr	r0, [r4, #0]
 800582a:	f000 f92d 	bl	8005a88 <memmove>
 800582e:	68a3      	ldr	r3, [r4, #8]
 8005830:	2000      	movs	r0, #0
 8005832:	1b9b      	subs	r3, r3, r6
 8005834:	60a3      	str	r3, [r4, #8]
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	441e      	add	r6, r3
 800583a:	6026      	str	r6, [r4, #0]
 800583c:	e7dc      	b.n	80057f8 <__ssputs_r+0x58>
 800583e:	462a      	mov	r2, r5
 8005840:	f000 f93d 	bl	8005abe <_realloc_r>
 8005844:	4606      	mov	r6, r0
 8005846:	2800      	cmp	r0, #0
 8005848:	d1e2      	bne.n	8005810 <__ssputs_r+0x70>
 800584a:	6921      	ldr	r1, [r4, #16]
 800584c:	4650      	mov	r0, sl
 800584e:	f7ff ff01 	bl	8005654 <_free_r>
 8005852:	e7c8      	b.n	80057e6 <__ssputs_r+0x46>

08005854 <_svfiprintf_r>:
 8005854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005858:	461d      	mov	r5, r3
 800585a:	898b      	ldrh	r3, [r1, #12]
 800585c:	b09d      	sub	sp, #116	; 0x74
 800585e:	061f      	lsls	r7, r3, #24
 8005860:	4680      	mov	r8, r0
 8005862:	460c      	mov	r4, r1
 8005864:	4616      	mov	r6, r2
 8005866:	d50f      	bpl.n	8005888 <_svfiprintf_r+0x34>
 8005868:	690b      	ldr	r3, [r1, #16]
 800586a:	b96b      	cbnz	r3, 8005888 <_svfiprintf_r+0x34>
 800586c:	2140      	movs	r1, #64	; 0x40
 800586e:	f7ff ff3d 	bl	80056ec <_malloc_r>
 8005872:	6020      	str	r0, [r4, #0]
 8005874:	6120      	str	r0, [r4, #16]
 8005876:	b928      	cbnz	r0, 8005884 <_svfiprintf_r+0x30>
 8005878:	230c      	movs	r3, #12
 800587a:	f8c8 3000 	str.w	r3, [r8]
 800587e:	f04f 30ff 	mov.w	r0, #4294967295
 8005882:	e0c8      	b.n	8005a16 <_svfiprintf_r+0x1c2>
 8005884:	2340      	movs	r3, #64	; 0x40
 8005886:	6163      	str	r3, [r4, #20]
 8005888:	2300      	movs	r3, #0
 800588a:	9309      	str	r3, [sp, #36]	; 0x24
 800588c:	2320      	movs	r3, #32
 800588e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005892:	2330      	movs	r3, #48	; 0x30
 8005894:	f04f 0b01 	mov.w	fp, #1
 8005898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800589c:	9503      	str	r5, [sp, #12]
 800589e:	4637      	mov	r7, r6
 80058a0:	463d      	mov	r5, r7
 80058a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80058a6:	b10b      	cbz	r3, 80058ac <_svfiprintf_r+0x58>
 80058a8:	2b25      	cmp	r3, #37	; 0x25
 80058aa:	d13e      	bne.n	800592a <_svfiprintf_r+0xd6>
 80058ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80058b0:	d00b      	beq.n	80058ca <_svfiprintf_r+0x76>
 80058b2:	4653      	mov	r3, sl
 80058b4:	4632      	mov	r2, r6
 80058b6:	4621      	mov	r1, r4
 80058b8:	4640      	mov	r0, r8
 80058ba:	f7ff ff71 	bl	80057a0 <__ssputs_r>
 80058be:	3001      	adds	r0, #1
 80058c0:	f000 80a4 	beq.w	8005a0c <_svfiprintf_r+0x1b8>
 80058c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c6:	4453      	add	r3, sl
 80058c8:	9309      	str	r3, [sp, #36]	; 0x24
 80058ca:	783b      	ldrb	r3, [r7, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 809d 	beq.w	8005a0c <_svfiprintf_r+0x1b8>
 80058d2:	2300      	movs	r3, #0
 80058d4:	f04f 32ff 	mov.w	r2, #4294967295
 80058d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058dc:	9304      	str	r3, [sp, #16]
 80058de:	9307      	str	r3, [sp, #28]
 80058e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058e4:	931a      	str	r3, [sp, #104]	; 0x68
 80058e6:	462f      	mov	r7, r5
 80058e8:	2205      	movs	r2, #5
 80058ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 80058ee:	4850      	ldr	r0, [pc, #320]	; (8005a30 <_svfiprintf_r+0x1dc>)
 80058f0:	f7ff fbac 	bl	800504c <memchr>
 80058f4:	9b04      	ldr	r3, [sp, #16]
 80058f6:	b9d0      	cbnz	r0, 800592e <_svfiprintf_r+0xda>
 80058f8:	06d9      	lsls	r1, r3, #27
 80058fa:	bf44      	itt	mi
 80058fc:	2220      	movmi	r2, #32
 80058fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005902:	071a      	lsls	r2, r3, #28
 8005904:	bf44      	itt	mi
 8005906:	222b      	movmi	r2, #43	; 0x2b
 8005908:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800590c:	782a      	ldrb	r2, [r5, #0]
 800590e:	2a2a      	cmp	r2, #42	; 0x2a
 8005910:	d015      	beq.n	800593e <_svfiprintf_r+0xea>
 8005912:	462f      	mov	r7, r5
 8005914:	2000      	movs	r0, #0
 8005916:	250a      	movs	r5, #10
 8005918:	9a07      	ldr	r2, [sp, #28]
 800591a:	4639      	mov	r1, r7
 800591c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005920:	3b30      	subs	r3, #48	; 0x30
 8005922:	2b09      	cmp	r3, #9
 8005924:	d94d      	bls.n	80059c2 <_svfiprintf_r+0x16e>
 8005926:	b1b8      	cbz	r0, 8005958 <_svfiprintf_r+0x104>
 8005928:	e00f      	b.n	800594a <_svfiprintf_r+0xf6>
 800592a:	462f      	mov	r7, r5
 800592c:	e7b8      	b.n	80058a0 <_svfiprintf_r+0x4c>
 800592e:	4a40      	ldr	r2, [pc, #256]	; (8005a30 <_svfiprintf_r+0x1dc>)
 8005930:	463d      	mov	r5, r7
 8005932:	1a80      	subs	r0, r0, r2
 8005934:	fa0b f000 	lsl.w	r0, fp, r0
 8005938:	4318      	orrs	r0, r3
 800593a:	9004      	str	r0, [sp, #16]
 800593c:	e7d3      	b.n	80058e6 <_svfiprintf_r+0x92>
 800593e:	9a03      	ldr	r2, [sp, #12]
 8005940:	1d11      	adds	r1, r2, #4
 8005942:	6812      	ldr	r2, [r2, #0]
 8005944:	9103      	str	r1, [sp, #12]
 8005946:	2a00      	cmp	r2, #0
 8005948:	db01      	blt.n	800594e <_svfiprintf_r+0xfa>
 800594a:	9207      	str	r2, [sp, #28]
 800594c:	e004      	b.n	8005958 <_svfiprintf_r+0x104>
 800594e:	4252      	negs	r2, r2
 8005950:	f043 0302 	orr.w	r3, r3, #2
 8005954:	9207      	str	r2, [sp, #28]
 8005956:	9304      	str	r3, [sp, #16]
 8005958:	783b      	ldrb	r3, [r7, #0]
 800595a:	2b2e      	cmp	r3, #46	; 0x2e
 800595c:	d10c      	bne.n	8005978 <_svfiprintf_r+0x124>
 800595e:	787b      	ldrb	r3, [r7, #1]
 8005960:	2b2a      	cmp	r3, #42	; 0x2a
 8005962:	d133      	bne.n	80059cc <_svfiprintf_r+0x178>
 8005964:	9b03      	ldr	r3, [sp, #12]
 8005966:	3702      	adds	r7, #2
 8005968:	1d1a      	adds	r2, r3, #4
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	9203      	str	r2, [sp, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	bfb8      	it	lt
 8005972:	f04f 33ff 	movlt.w	r3, #4294967295
 8005976:	9305      	str	r3, [sp, #20]
 8005978:	4d2e      	ldr	r5, [pc, #184]	; (8005a34 <_svfiprintf_r+0x1e0>)
 800597a:	2203      	movs	r2, #3
 800597c:	7839      	ldrb	r1, [r7, #0]
 800597e:	4628      	mov	r0, r5
 8005980:	f7ff fb64 	bl	800504c <memchr>
 8005984:	b138      	cbz	r0, 8005996 <_svfiprintf_r+0x142>
 8005986:	2340      	movs	r3, #64	; 0x40
 8005988:	1b40      	subs	r0, r0, r5
 800598a:	fa03 f000 	lsl.w	r0, r3, r0
 800598e:	9b04      	ldr	r3, [sp, #16]
 8005990:	3701      	adds	r7, #1
 8005992:	4303      	orrs	r3, r0
 8005994:	9304      	str	r3, [sp, #16]
 8005996:	7839      	ldrb	r1, [r7, #0]
 8005998:	2206      	movs	r2, #6
 800599a:	4827      	ldr	r0, [pc, #156]	; (8005a38 <_svfiprintf_r+0x1e4>)
 800599c:	1c7e      	adds	r6, r7, #1
 800599e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059a2:	f7ff fb53 	bl	800504c <memchr>
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d038      	beq.n	8005a1c <_svfiprintf_r+0x1c8>
 80059aa:	4b24      	ldr	r3, [pc, #144]	; (8005a3c <_svfiprintf_r+0x1e8>)
 80059ac:	bb13      	cbnz	r3, 80059f4 <_svfiprintf_r+0x1a0>
 80059ae:	9b03      	ldr	r3, [sp, #12]
 80059b0:	3307      	adds	r3, #7
 80059b2:	f023 0307 	bic.w	r3, r3, #7
 80059b6:	3308      	adds	r3, #8
 80059b8:	9303      	str	r3, [sp, #12]
 80059ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059bc:	444b      	add	r3, r9
 80059be:	9309      	str	r3, [sp, #36]	; 0x24
 80059c0:	e76d      	b.n	800589e <_svfiprintf_r+0x4a>
 80059c2:	fb05 3202 	mla	r2, r5, r2, r3
 80059c6:	2001      	movs	r0, #1
 80059c8:	460f      	mov	r7, r1
 80059ca:	e7a6      	b.n	800591a <_svfiprintf_r+0xc6>
 80059cc:	2300      	movs	r3, #0
 80059ce:	250a      	movs	r5, #10
 80059d0:	4619      	mov	r1, r3
 80059d2:	3701      	adds	r7, #1
 80059d4:	9305      	str	r3, [sp, #20]
 80059d6:	4638      	mov	r0, r7
 80059d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059dc:	3a30      	subs	r2, #48	; 0x30
 80059de:	2a09      	cmp	r2, #9
 80059e0:	d903      	bls.n	80059ea <_svfiprintf_r+0x196>
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0c8      	beq.n	8005978 <_svfiprintf_r+0x124>
 80059e6:	9105      	str	r1, [sp, #20]
 80059e8:	e7c6      	b.n	8005978 <_svfiprintf_r+0x124>
 80059ea:	fb05 2101 	mla	r1, r5, r1, r2
 80059ee:	2301      	movs	r3, #1
 80059f0:	4607      	mov	r7, r0
 80059f2:	e7f0      	b.n	80059d6 <_svfiprintf_r+0x182>
 80059f4:	ab03      	add	r3, sp, #12
 80059f6:	9300      	str	r3, [sp, #0]
 80059f8:	4622      	mov	r2, r4
 80059fa:	4b11      	ldr	r3, [pc, #68]	; (8005a40 <_svfiprintf_r+0x1ec>)
 80059fc:	a904      	add	r1, sp, #16
 80059fe:	4640      	mov	r0, r8
 8005a00:	f7fe f8ee 	bl	8003be0 <_printf_float>
 8005a04:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005a08:	4681      	mov	r9, r0
 8005a0a:	d1d6      	bne.n	80059ba <_svfiprintf_r+0x166>
 8005a0c:	89a3      	ldrh	r3, [r4, #12]
 8005a0e:	065b      	lsls	r3, r3, #25
 8005a10:	f53f af35 	bmi.w	800587e <_svfiprintf_r+0x2a>
 8005a14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a16:	b01d      	add	sp, #116	; 0x74
 8005a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a1c:	ab03      	add	r3, sp, #12
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	4622      	mov	r2, r4
 8005a22:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <_svfiprintf_r+0x1ec>)
 8005a24:	a904      	add	r1, sp, #16
 8005a26:	4640      	mov	r0, r8
 8005a28:	f7fe fb86 	bl	8004138 <_printf_i>
 8005a2c:	e7ea      	b.n	8005a04 <_svfiprintf_r+0x1b0>
 8005a2e:	bf00      	nop
 8005a30:	08005ce4 	.word	0x08005ce4
 8005a34:	08005cea 	.word	0x08005cea
 8005a38:	08005cee 	.word	0x08005cee
 8005a3c:	08003be1 	.word	0x08003be1
 8005a40:	080057a1 	.word	0x080057a1

08005a44 <_sbrk_r>:
 8005a44:	b538      	push	{r3, r4, r5, lr}
 8005a46:	2300      	movs	r3, #0
 8005a48:	4c05      	ldr	r4, [pc, #20]	; (8005a60 <_sbrk_r+0x1c>)
 8005a4a:	4605      	mov	r5, r0
 8005a4c:	4608      	mov	r0, r1
 8005a4e:	6023      	str	r3, [r4, #0]
 8005a50:	f7fb ff16 	bl	8001880 <_sbrk>
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	d102      	bne.n	8005a5e <_sbrk_r+0x1a>
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	b103      	cbz	r3, 8005a5e <_sbrk_r+0x1a>
 8005a5c:	602b      	str	r3, [r5, #0]
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
 8005a60:	2000033c 	.word	0x2000033c

08005a64 <__ascii_mbtowc>:
 8005a64:	b082      	sub	sp, #8
 8005a66:	b901      	cbnz	r1, 8005a6a <__ascii_mbtowc+0x6>
 8005a68:	a901      	add	r1, sp, #4
 8005a6a:	b142      	cbz	r2, 8005a7e <__ascii_mbtowc+0x1a>
 8005a6c:	b14b      	cbz	r3, 8005a82 <__ascii_mbtowc+0x1e>
 8005a6e:	7813      	ldrb	r3, [r2, #0]
 8005a70:	600b      	str	r3, [r1, #0]
 8005a72:	7812      	ldrb	r2, [r2, #0]
 8005a74:	1c10      	adds	r0, r2, #0
 8005a76:	bf18      	it	ne
 8005a78:	2001      	movne	r0, #1
 8005a7a:	b002      	add	sp, #8
 8005a7c:	4770      	bx	lr
 8005a7e:	4610      	mov	r0, r2
 8005a80:	e7fb      	b.n	8005a7a <__ascii_mbtowc+0x16>
 8005a82:	f06f 0001 	mvn.w	r0, #1
 8005a86:	e7f8      	b.n	8005a7a <__ascii_mbtowc+0x16>

08005a88 <memmove>:
 8005a88:	4288      	cmp	r0, r1
 8005a8a:	b510      	push	{r4, lr}
 8005a8c:	eb01 0302 	add.w	r3, r1, r2
 8005a90:	d807      	bhi.n	8005aa2 <memmove+0x1a>
 8005a92:	1e42      	subs	r2, r0, #1
 8005a94:	4299      	cmp	r1, r3
 8005a96:	d00a      	beq.n	8005aae <memmove+0x26>
 8005a98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a9c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005aa0:	e7f8      	b.n	8005a94 <memmove+0xc>
 8005aa2:	4283      	cmp	r3, r0
 8005aa4:	d9f5      	bls.n	8005a92 <memmove+0xa>
 8005aa6:	1881      	adds	r1, r0, r2
 8005aa8:	1ad2      	subs	r2, r2, r3
 8005aaa:	42d3      	cmn	r3, r2
 8005aac:	d100      	bne.n	8005ab0 <memmove+0x28>
 8005aae:	bd10      	pop	{r4, pc}
 8005ab0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ab4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005ab8:	e7f7      	b.n	8005aaa <memmove+0x22>

08005aba <__malloc_lock>:
 8005aba:	4770      	bx	lr

08005abc <__malloc_unlock>:
 8005abc:	4770      	bx	lr

08005abe <_realloc_r>:
 8005abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac0:	4607      	mov	r7, r0
 8005ac2:	4614      	mov	r4, r2
 8005ac4:	460e      	mov	r6, r1
 8005ac6:	b921      	cbnz	r1, 8005ad2 <_realloc_r+0x14>
 8005ac8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005acc:	4611      	mov	r1, r2
 8005ace:	f7ff be0d 	b.w	80056ec <_malloc_r>
 8005ad2:	b922      	cbnz	r2, 8005ade <_realloc_r+0x20>
 8005ad4:	f7ff fdbe 	bl	8005654 <_free_r>
 8005ad8:	4625      	mov	r5, r4
 8005ada:	4628      	mov	r0, r5
 8005adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ade:	f000 f821 	bl	8005b24 <_malloc_usable_size_r>
 8005ae2:	42a0      	cmp	r0, r4
 8005ae4:	d20f      	bcs.n	8005b06 <_realloc_r+0x48>
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	4638      	mov	r0, r7
 8005aea:	f7ff fdff 	bl	80056ec <_malloc_r>
 8005aee:	4605      	mov	r5, r0
 8005af0:	2800      	cmp	r0, #0
 8005af2:	d0f2      	beq.n	8005ada <_realloc_r+0x1c>
 8005af4:	4631      	mov	r1, r6
 8005af6:	4622      	mov	r2, r4
 8005af8:	f7ff fab6 	bl	8005068 <memcpy>
 8005afc:	4631      	mov	r1, r6
 8005afe:	4638      	mov	r0, r7
 8005b00:	f7ff fda8 	bl	8005654 <_free_r>
 8005b04:	e7e9      	b.n	8005ada <_realloc_r+0x1c>
 8005b06:	4635      	mov	r5, r6
 8005b08:	e7e7      	b.n	8005ada <_realloc_r+0x1c>

08005b0a <__ascii_wctomb>:
 8005b0a:	b149      	cbz	r1, 8005b20 <__ascii_wctomb+0x16>
 8005b0c:	2aff      	cmp	r2, #255	; 0xff
 8005b0e:	bf8b      	itete	hi
 8005b10:	238a      	movhi	r3, #138	; 0x8a
 8005b12:	700a      	strbls	r2, [r1, #0]
 8005b14:	6003      	strhi	r3, [r0, #0]
 8005b16:	2001      	movls	r0, #1
 8005b18:	bf88      	it	hi
 8005b1a:	f04f 30ff 	movhi.w	r0, #4294967295
 8005b1e:	4770      	bx	lr
 8005b20:	4608      	mov	r0, r1
 8005b22:	4770      	bx	lr

08005b24 <_malloc_usable_size_r>:
 8005b24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b28:	1f18      	subs	r0, r3, #4
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	bfbc      	itt	lt
 8005b2e:	580b      	ldrlt	r3, [r1, r0]
 8005b30:	18c0      	addlt	r0, r0, r3
 8005b32:	4770      	bx	lr

08005b34 <_init>:
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b36:	bf00      	nop
 8005b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3a:	bc08      	pop	{r3}
 8005b3c:	469e      	mov	lr, r3
 8005b3e:	4770      	bx	lr

08005b40 <_fini>:
 8005b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b42:	bf00      	nop
 8005b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b46:	bc08      	pop	{r3}
 8005b48:	469e      	mov	lr, r3
 8005b4a:	4770      	bx	lr
